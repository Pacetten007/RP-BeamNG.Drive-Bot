import disnake
import os
from disnake.ext import tasks, commands
from disnake import ApplicationCommandInteraction
import random
import string
import sqlite3
from datetime import datetime, timedelta
import asyncio
import logging
from unbelievaboat import client
import io
from dotenv import load_dotenv
import json
from api import download_file_from_server, parse_player_data, add_player_to_whitelist, add_car_to_player, remove_car_from_player

discord_token = ""
unbelievatoken = ""

intents = disnake.Intents.default()
intents.typing = False
intents.presences = False
intents.members = True
intents.messages = True
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)
unbclient = client(unbelievatoken)

conn = sqlite3.connect('everything.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''CREATE TABLE IF NOT EXISTS licenses (user_id TEXT,category TEXT,issue_date TEXT,status TEXT DEFAULT "active",PRIMARY KEY (user_id, category))''')
cursor.execute('''CREATE TABLE IF NOT EXISTS donations (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INT,amount TEXT,image_url TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS maxicoins (user_id INT,amount INT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS available_cars (brand TEXT,model TEXT,config TEXT,year INTEGER,price INTEGER,body_type TEXT,transmission TEXT,engine TEXT,image_data TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS purchased_cars (id INTEGER PRIMARY KEY AUTOINCREMENT,brand TEXT,model TEXT,config TEXT,purchase_price INTEGER,buyer_id INTEGER,purchase_date TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS pts(car_id INTEGER,owner_id INTEGER,brand TEXT,model TEXT,config TEXT, color TEXT,body TEXT,transmission TEXT,plate_number TEXT,status TEXT,horsepower TEXT, photo_url TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS real_estate (id INTEGER PRIMARY KEY AUTOINCREMENT,buyer_id INTEGER DEFAULT NULL,address TEXT,price INTEGER,class TEXT,property_type TEXT,garage_slots INTEGER,square_meters INTEGER,house_photo_url TEXT,location_photo_url TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS rentcar (car_id INTEGER,owner_id INTEGER,renter_id INTEGER,start_time DATETIME,end_time DATETIME,price_per_hour INTEGER,total_price INTEGER,status TEXT,PRIMARY KEY (car_id, start_time))''')
cursor.execute('''CREATE TABLE IF NOT EXISTS jobs_settings (id INTEGER PRIMARY KEY,jobs_enabled BOOLEAN NOT NULL DEFAULT 0)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS jobs (id INTEGER PRIMARY KEY,name TEXT NOT NULL,hourly_pay INTEGER NOT NULL,is_government BOOLEAN NOT NULL,required_license TEXT,required_driving_hours INTEGER DEFAULT 0,role_id TEXT,promotion_role_name TEXT, promotion_role_id TEXT, promotion_time_hours INTEGER DEFAULT 0, employability INTEGER DEFAULT 0)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS user_jobs (user_id INTEGER NOT NULL,job_id INTEGER NOT NULL,start_time TEXT NOT NULL,worked_hours REAL DEFAULT 0,FOREIGN KEY (job_id) REFERENCES jobs(id))''')
cursor.execute('''CREATE TABLE IF NOT EXISTS addjobs (job_id INTEGER,vehicle_config_url TEXT,spawn_location_url TEXT,car TEXT,PRIMARY KEY (job_id),FOREIGN KEY (job_id) REFERENCES jobs(id))''')
cursor.execute('''CREATE TABLE IF NOT EXISTS active_shifts (user_id INTEGER PRIMARY KEY,job_id INTEGER,start_time TEXT,FOREIGN KEY (job_id) REFERENCES jobs(id))''')
cursor.execute('''CREATE TABLE IF NOT EXISTS promotion_notifications (user_id TEXT,job_id INTEGER,notification_time TEXT,PRIMARY KEY (user_id, job_id))''')
cursor.execute('''CREATE TABLE IF NOT EXISTS hotel_bookings (id INTEGER PRIMARY KEY AUTOINCREMENT,user_id INTEGER NOT NULL,start_date TEXT NOT NULL,end_date TEXT NOT NULL,days INTEGER NOT NULL,total_price INTEGER NOT NULL)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS marketplace (id INTEGER PRIMARY KEY AUTOINCREMENT,seller_id INTEGER NOT NULL,item_name TEXT NOT NULL,item_type TEXT NOT NULL,item_id TEXT,price INTEGER NOT NULL,description TEXT, image_url TEXT,created_at TEXT NOT NULL,status TEXT DEFAULT 'active')''')
cursor.execute('''CREATE TABLE IF NOT EXISTS medals (id INTEGER PRIMARY KEY AUTOINCREMENT,user_id INTEGER NOT NULL,medal_type TEXT NOT NULL,award_date TEXT NOT NULL)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS car_service_requests (id INTEGER PRIMARY KEY AUTOINCREMENT,user_id INTEGER NOT NULL,car_id INTEGER NOT NULL,brand TEXT NOT NULL,model TEXT NOT NULL,config TEXT NOT NULL,damage_description TEXT,photo_front TEXT,photo_back TEXT,photo_left TEXT,photo_right TEXT,status TEXT NOT NULL,thread_id INTEGER,created_at TEXT NOT NULL,completed_at TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS car_tuning_requests (id INTEGER PRIMARY KEY AUTOINCREMENT,user_id INTEGER,car_id INTEGER,brand TEXT,model TEXT,config TEXT,tuning_description TEXT,photo_front TEXT,photo_back TEXT,photo_left TEXT,photo_right TEXT,status TEXT,thread_id INTEGER,created_at TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS tire_service_requests (id INTEGER PRIMARY KEY AUTOINCREMENT,user_id INTEGER,car_id INTEGER,brand TEXT,model TEXT,config TEXT,service_type TEXT,service_description TEXT,photo_wheels TEXT,photo_tires TEXT,status TEXT,thread_id INTEGER,created_at TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS service_invoices (id INTEGER PRIMARY KEY AUTOINCREMENT,service_type TEXT,request_id INTEGER,user_id INTEGER,amount INTEGER,status TEXT DEFAULT 'pending',issued_by INTEGER,issued_at TEXT,paid_at TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS traffic_violations (id INTEGER PRIMARY KEY AUTOINCREMENT,violator_id INTEGER NOT NULL,officer_id INTEGER NOT NULL,violation_details TEXT NOT NULL,impounded_car_id INTEGER,license_revoked BOOLEAN NOT NULL DEFAULT 0,fine_amount INTEGER NOT NULL DEFAULT 0,issued_at TEXT NOT NULL,thread_id INTEGER,status TEXT DEFAULT 'active')''')
cursor.execute('''CREATE TABLE IF NOT EXISTS loans (id INTEGER PRIMARY KEY AUTOINCREMENT,user_id INTEGER NOT NULL,principal_amount INTEGER NOT NULL,remaining_amount INTEGER NOT NULL,interest_rate REAL NOT NULL DEFAULT 0.1,start_date TEXT NOT NULL,last_payment_date TEXT,next_payment_date TEXT NOT NULL,payment_periods INTEGER NOT NULL, remaining_periods INTEGER NOT NULL,status TEXT NOT NULL DEFAULT 'active', penalty_amount INTEGER DEFAULT 0,overdue_days INTEGER DEFAULT 0,purpose TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS garage_slots (id INTEGER PRIMARY KEY AUTOINCREMENT,owner_id INTEGER,slots INTEGER DEFAULT 1,purchase_date TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS driving_exams (id INTEGER PRIMARY KEY AUTOINCREMENT,student_id INTEGER NOT NULL,instructor_id INTEGER NOT NULL,category TEXT NOT NULL,status TEXT NOT NULL,result TEXT,start_time TEXT NOT NULL,end_time TEXT)''')
conn.commit()


BEAMMP_MODERATORS = ["Pacetten007", "Dewerto", "haitu55", "Chepard22", "Fellisia", "Sanya_Dolg"]  

cursor.execute('SELECT COUNT(*) FROM jobs_settings')
if cursor.fetchone()[0] == 0:
    cursor.execute('INSERT OR IGNORE INTO jobs_settings (id, jobs_enabled) VALUES (1, 0)')
    conn.commit()

ADMIN_ID = 1051764411578191872
current_donator = None 

def check_license_status(issue_date):
    expiration_date = datetime.fromisoformat(issue_date) + timedelta(days=90)
    return '–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã' if datetime.now() < expiration_date else '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã'



@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user.name} –∑–∞–ø—É—â–µ–Ω!')
    channel = bot.get_channel(1346840187950338210)
    async for message in channel.history():
        if message.author == bot.user and message.components:
            await message.delete()
    embed = disnake.Embed(
        title="üöó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
        description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
        color=disnake.Color.blue()
    )
    view = disnake.ui.View(timeout=None)
    view.add_item(AddPTSButton())
    await channel.send(embed=embed, view=view)
    await starting()

class AddPTSButton(disnake.ui.Button):
    def __init__(self):
        super().__init__(
            label="–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç",
            style=disnake.ButtonStyle.primary,
            emoji="üöó",
            custom_id="register_vehicle"
        )

    async def callback(self, inter: disnake.MessageInteraction):
        modal = PTSModal(inter.author)
        await inter.response.send_modal(modal)




async def –∫–æ–º–∞–Ω–¥—ã(ctx):
    """Displays all available commands organized by categories"""
    try:
        # Define command categories
        categories = {
            "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏": [
                ("!–∞–≤—Ç–æ—Å–∞–ª–æ–Ω", "–ö—É–ø–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"),
                ("!–≥–∞—Ä–∞–∂", "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"),
                ("!–ø—Ä–æ–¥–∞—Ç—å_–∞–≤—Ç–æ id @–∏–≥—Ä–æ–∫ —Ü–µ–Ω–∞", "–ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"),
                ("!–∞—Ä–µ–Ω–¥–∞", "–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"),
                ("!–∞–≤—Ç–æ id", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
                ("!–ø—Ç—Å id", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ç—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
                ("!–ø—Ä–æ–¥–∞—Ç—å_–∞–≤—Ç–æ–≥–æ—Å id", "–ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ"),
                ("!–∞—Ä–µ–Ω–¥–∞_–∞–≤—Ç–æ id @–∏–≥—Ä–æ–∫ —Ü–µ–Ω–∞-–≤-—á–∞—Å —á–∞—Å—ã", "–°–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –∞—Ä–µ–Ω–¥—É"),
                ("!–º–æ–∏_–∞—Ä–µ–Ω–¥—ã", "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"),
                ("!–º–æ–∏_–ø—Ä–∞–≤–∞", "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ø—Ä–∞–≤"),
            ],
            "üíº –†–∞–±–æ—Ç–∞": [
                ("!—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É"),
                ("!–º–æ–∏_—Ä–∞–±–æ—Ç—ã", "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç, –∞ —Ç–∞–∫ –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–æ–ª–∏—Ç—å—Å—è"),
                ("!–Ω–∞—á–∞—Ç—å_—Ä–∞–±–æ—Ç—É", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É"),
                ("!–∫–æ–Ω–µ—Ü_—Ä–∞–±–æ—Ç—ã", "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É"),
                ("!—Å–º–µ–Ω–∞", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã")
            ],
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": [
                ("!bal", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å"),
                ("!pay @–∏–≥—Ä–æ–∫", "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É"),
                ("!top", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É"),
            ],
            "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": [
                ("!–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–ö—É–ø–∏—Ç—å –¥–æ–º,–≥–∞—Ä–∞–∂ –∏ –¥—Ä—É–≥—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"),
                ("!–º–æ–∏_–¥–æ–º–∞", "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –¥–æ–º–æ–≤"),
                ("!–ø—Ä–æ–¥–∞—Ç—å_–¥–æ–º", "–ü—Ä–æ–¥–∞—Ç—å –¥–æ–º"),
                ("!–≥–∞—Ä–∞–∂–Ω—ã–µ –º–µ—Å—Ç–∞", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –≥–∞—Ä–∞–∂–Ω—ã–µ –º–µ—Å—Ç–∞"),
                ("!–ø—Ä–æ–¥–∞—Ç—å_–¥–æ–º id @–∏–≥—Ä–æ–∫ —Ü–µ–Ω–∞", "–ü—Ä–æ–¥–∞—Ç—å –¥–æ–º –∏–≥—Ä–æ–∫—É"),
                ("!–ø—Ä–æ–¥–∞—Ç—å_–¥–æ–º–≥–æ—Å id", "–ü—Ä–æ–¥–∞—Ç—å –¥–æ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É"),
                ("!–º–æ—è_–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"),
                ("!–æ–±—ä–µ–∫—Ç id", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"),
                ("!–æ—Ç–µ–ª—å –∫–æ–ª-–≤–æ –¥–Ω–µ–π", "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–µ–ª—å"),
                ("!–º–æ–π_–æ—Ç–µ–ª—å", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É –≤ –æ—Ç–µ–ª–µ")
                
            ],
            "üí∞ –î–æ–Ω–∞—Ç": [
                ("!donat", "–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–Ω–∞—Ç"),
                ("!donatbal", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å Maxi Coins"),
                ("!top", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É"),
                ("!–∫—É–ø–∏—Ç—å_–≤–∞–ª—é—Ç—É", "–ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É –∑–∞ Maxi Coins"),
                ("!–∫—É–ø–∏—Ç—å_–≥–∞—Ä–∞–∂", "–ö—É–ø–∏—Ç—å –≥–∞—Ä–∞–∂–Ω–æ–µ –º–µ—Å—Ç–æ –∑–∞ Maxi Coins")
            ]
        }
        
        # Start with the general category
        current_category = "üí∞ –î–æ–Ω–∞—Ç"
        
        # Function to create embed for a specific category
        async def create_category_embed(category_name):
            embed = disnake.Embed(
                title="üìö –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                description=f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}**\n\n",
                color=disnake.Color.blue()
            )
            
            # Add commands for this category
            commands_list = categories.get(category_name, [])
            for cmd, desc in commands_list:
                embed.description += f"**{cmd}** - {desc}\n"
            
            embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            return embed
        
        # Create view with category buttons
        view = disnake.ui.View(timeout=300)  # 5 minute timeout
        
        # Create buttons for each category
        for category_name in categories.keys():
            button = disnake.ui.Button(
                style=disnake.ButtonStyle.secondary,
                label=category_name,
                custom_id=f"category_{category_name}"
            )
            
            async def button_callback(interaction, category=category_name):
                if interaction.author.id != ctx.author.id:
                    return await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥!", ephemeral=True)
                
                embed = await create_category_embed(category)
                await interaction.response.edit_message(embed=embed)
            
            button.callback = button_callback
            view.add_item(button)
        
        # Initial embed
        initial_embed = await create_category_embed(current_category)
        
        # Send the message with the view
        await ctx.send(embed=initial_embed, view=view)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {str(e)}",
            color=disnake.Color.red()
        )
        await ctx.send(embed=error_embed)


@bot.slash_command(name="–¥–æ–Ω–∞—Ç", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞–º–∏ –∏ Maxi-Coins")
async def donation_commands(inter: ApplicationCommandInteraction):
    """–ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–∞–º–∏ –∏ Maxi-Coins"""
    pass

@donation_commands.sub_command(name="–ø–æ–ø–æ–ª–Ω–∏—Ç—å", description="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å")
async def donate(inter: ApplicationCommandInteraction):
    """–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –¥–æ–Ω–∞—Ç"""
    global current_donator
    current_donator = inter.author.id  

    logging.info(f"{inter.author} initiated a donation process.")

    embed = disnake.Embed(
        title="üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞",
        description="üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!\n\n"
                    "üíé –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–Ω–∞—Ç-–≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–ª–∏ –∂–µ –∏–≥—Ä–æ–≤—ã–µ –¥–µ–Ω—å–≥–∏ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∫—É—Ä—Å—É.\n",
        color=disnake.Color.gold()
    )
    embed.add_field(
        name="üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:",
        value="‚Ä¢ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–∞–Ω–∫\n‚Ä¢ DonationAlerts (–¥–ª—è –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö —Å—Ç—Ä–∞–Ω)",
        inline=False
    )
    embed.add_field(name="", value="**–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É**\n\n")
    embed.set_footer(text="–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 Maxi-Coin = 2,800 –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã")
    
    await inter.response.send_message("‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", ephemeral=True)
    await inter.author.send(embed=embed)

    def check(msg):
        return msg.author == inter.author and isinstance(msg.channel, disnake.DMChannel)

    try:
        response = await bot.wait_for('message', check=check, timeout=300)

        if response.content.isdigit():
            amount = response.content
            await inter.author.send(f"–†–µ–∫–≤–∏–∑–∏—Ç—ã (–¢-–±–∞–Ω–∫) - https://www.tinkoff.ru/rm/r_sDpUdUUONT.bpJcZEymPM/LuA7Z57177\n"
                                  f"–†–µ–∫–≤–∏–∑–∏—Ç—ã (–ó–∞—Ä—É–±–µ–∂–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã. –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É,–ø–∏—à–∏—Ç–µ –∏–º—è —Å—Ö–æ–∂–µ–µ —Å —Ç–µ–≥–æ–º –¥–∏—Å–∫–æ—Ä–¥–∞!) - https://www.donationalerts.com/r/splug_team_project\n"
                                  f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å - –ù–∏–∫–∏—Ç–∞ –õ.\n"
                                  f"–û–ø–∏—Å–∞–Ω–∏–µ - –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —á–µ–∫ –æ–ø–ª–∞—Ç—ã –≤ –≤–∏–¥–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.")

            def check_image(msg):
                return msg.author == inter.author and isinstance(msg.channel, disnake.DMChannel) and msg.attachments

            while True:
                try:
                    image_msg = await bot.wait_for('message', check=check_image, timeout=300)
                    if image_msg.attachments:
                        image_url = image_msg.attachments[0].url
                        cursor.execute('INSERT INTO donations (user_id, amount, image_url) VALUES (?, ?, ?)', 
                                       (inter.author.id, amount, image_url))
                        conn.commit()
                        donation_id = cursor.lastrowid
                        channel_id = 1343156587786928158  
                        channel = bot.get_channel(channel_id)
                        embed = disnake.Embed(title="–ù–æ–≤—ã–π –¥–æ–Ω–∞—Ç",
                                              description=f"–î–æ–Ω–∞—Ç –æ—Ç {inter.author.mention}",
                                              colour=disnake.Color.dark_embed())
                        embed.add_field(name="ID –¥–æ–Ω–∞—Ç–∞:", value=donation_id)
                        embed.add_field(name="–°—É–º–º–∞:", value=f'{amount}‚ÇΩ')
                        embed.set_image(url=image_url)                        
                        await channel.send(embed=embed)
                        await inter.author.send("–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–¥–∞—á–∏ –≤–∞–ª—é—Ç—ã. –°–≤—è–∂–∏—Ç–µ—Å—å—Ç—Ä —Å crosshair0972(Sky), —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å–∞—Ü–∏–∏ –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ —Å –≤—ã–¥–∞—á–µ–π —Ç–æ–≤–∞—Ä–∞.")
                        break
                except asyncio.TimeoutError:
                    await inter.author.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
                    return
        else:
            await inter.author.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")

    except asyncio.TimeoutError:
        await inter.author.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")

@donation_commands.sub_command(name="–±–∞–ª–∞–Ω—Å", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å Maxi-Coins")
async def donation_balance(inter: ApplicationCommandInteraction):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å Maxi-Coins"""
    user_id = inter.author.id  
    cursor.execute('SELECT amount FROM maxicoins WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    if result:
        amount = result[0]
    else:
        amount = 0
    embed = disnake.Embed(
        title="üí∞ –ë–∞–ª–∞–Ω—Å Maxi-Coins",
        description=f"–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: **{amount}** Maxi-Coins",
        color=disnake.Color.gold()
    )
    embed.set_footer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
    await inter.response.send_message(embed=embed, ephemeral=True)

@donation_commands.sub_command(name="–∫—É–ø–∏—Ç—å_–≤–∞–ª—é—Ç—É", description="–ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É –∑–∞ Maxi-Coins")
async def buy_currency(inter: ApplicationCommandInteraction, amount: int):
    """–ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É –∑–∞ Maxi-Coins"""
    await inter.response.defer(ephemeral=True)
    user_id = inter.author.id
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ç-–≤–∞–ª—é—Ç—ã
    cursor.execute('SELECT amount FROM maxicoins WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if result and result[0] >= amount:
        bal = unbclient.get_user_bal(1341469479510474813, int(user_id))
        new_bal = bal['cash'] + amount * 2800
        unbclient.set_user_bal(1341469479510474813, int(user_id), cash=new_bal)

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ–Ω–∞—Ç-–≤–∞–ª—é—Ç—ã
        new_balance = result[0] - amount
        cursor.execute('UPDATE maxicoins SET amount = ? WHERE user_id = ?', (new_balance, user_id))
        conn.commit()

        embed = disnake.Embed(
            title="üí∞ –£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è",
            description=f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ –¥–æ–Ω–∞—Ç-–≤–∞–ª—é—Ç—É –Ω–∞ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É!",
            color=disnake.Color.green()
        )
        embed.add_field(
            name="üìä –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            value=f"**–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:** {amount} Maxi-Coins\n"
                  f"**–ü–æ–ª—É—á–µ–Ω–æ:** {amount * 2800} –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã",
            inline=False
        )
        embed.add_field(
            name="üíé –í–∞—à –±–∞–ª–∞–Ω—Å",
            value=f"**Maxi-Coins:** {new_balance}",
            inline=False
        )
        embed.set_footer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!")
        
        await inter.edit_original_response(embed=embed)
    else:
        await inter.edit_original_response(content="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–Ω–∞—Ç-–≤–∞–ª—é—Ç—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.")

@donation_commands.sub_command(name="–∫—É–ø–∏—Ç—å_–≥–∞—Ä–∞–∂", description="–ö—É–ø–∏—Ç—å –≥–∞—Ä–∞–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –∑–∞ Maxi-Coins")
async def buy_garage(inter: ApplicationCommandInteraction, slots: int = 1):
    """–ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–∞—Ä–∞–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –∑–∞ Maxi-Coins"""
    await inter.response.defer(ephemeral=True)
    try:
        # Check if user already has garage slots
        cursor.execute('SELECT slots FROM garage_slots WHERE owner_id = ?', (inter.author.id,))
        result = cursor.fetchone()
        cost = 0
        for i in range(slots):
            if i == 0:
                cost += 115
            elif i == 1:
                cost += 220
            elif i == 2:
                cost += 330
            else:
                cost += 110
        
        # Check user's Maxi-Coins balance
        cursor.execute('SELECT amount FROM maxicoins WHERE user_id = ?', (inter.author.id,))
        balance = cursor.fetchone()
        
        if not balance or balance[0] < cost:
            embed = disnake.Embed(
                title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Maxi-Coins",
                description=f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {cost} Maxi-Coins\n–£ –≤–∞—Å: {balance[0] if balance else 0} Maxi-Coins",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
            
        # Update or insert garage slots
        if result:
            new_slots = result[0] + slots
            cursor.execute('UPDATE garage_slots SET slots = ? WHERE owner_id = ?', 
                         (new_slots, inter.author.id))
        else:
            cursor.execute('INSERT INTO garage_slots (owner_id, slots, purchase_date) VALUES (?, ?, ?)',
                         (inter.author.id, slots, datetime.now().isoformat()))
                         
        # Deduct Maxi-Coins
        new_balance = balance[0] - cost
        cursor.execute('UPDATE maxicoins SET amount = ? WHERE user_id = ?',
                      (new_balance, inter.author.id))
        
        conn.commit()
        
        embed = disnake.Embed(
            title="‚úÖ –ì–∞—Ä–∞–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –∫—É–ø–ª–µ–Ω—ã",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üè† **–ö—É–ø–ª–µ–Ω–æ –º–µ—Å—Ç:** {slots}\n"
                f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {cost} Maxi-Coins\n"
                f"üìä **–í—Å–µ–≥–æ –º–µ—Å—Ç:** {new_slots if result else slots}\n"
                f"üíé **–û—Å—Ç–∞—Ç–æ–∫ Maxi-Coins:** {new_balance}\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green()
        )
        embed.set_footer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
        await inter.edit_original_response(embed=embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

@donation_commands.sub_command_group(name="–∞–¥–º–∏–Ω", description="–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–∞–º–∏")
async def donation_admin(inter: ApplicationCommandInteraction):
    """–ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–∞–º–∏"""
    pass

@donation_admin.sub_command(name="–ø—Ä–∏–Ω—è—Ç—å", description="–ü—Ä–∏–Ω—è—Ç—å –¥–æ–Ω–∞—Ç")
@commands.has_role("High Stuff+")
async def accept_donation(inter: ApplicationCommandInteraction, donation_id: int):
    """–ü—Ä–∏–Ω—è—Ç—å –¥–æ–Ω–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏)"""
    await inter.response.defer(ephemeral=True)
    cursor.execute('SELECT user_id, amount, image_url FROM donations WHERE id = ?', (donation_id,))
    donation = cursor.fetchone()

    if donation:
        user_id, amount, image_url = donation
        user = await bot.fetch_user(user_id)

        embed = disnake.Embed(
            title="‚úÖ –î–æ–Ω–∞—Ç –ø—Ä–∏–Ω—è—Ç!",
            description=f"–í–∞—à –¥–æ–Ω–∞—Ç –Ω–∞ —Å—É–º–º—É **{amount}‚ÇΩ** –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç.",
            color=disnake.Color.green()
        )
        embed.add_field(
            name="üíù –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å",
            value="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! –ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –¥–æ–Ω–∞—Ç–µ—Ä–∞.",
            inline=False
        )
        await user.send(embed=embed)

        cursor.execute('SELECT amount FROM maxicoins WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()

        if result:
            new_amount = result[0] + int(amount)
            cursor.execute('UPDATE maxicoins SET amount = ? WHERE user_id = ?', (new_amount, user_id))
        else:
            cursor.execute('INSERT INTO maxicoins (user_id, amount) VALUES (?, ?)', (user_id, amount))

        conn.commit()

        await inter.edit_original_response(content=f"–î–æ–Ω–∞—Ç ID {donation_id} –ø—Ä–∏–Ω—è—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        
        cursor.execute('DELETE FROM donations WHERE id = ?', (donation_id,))
        conn.commit()
    else:
        await inter.edit_original_response(content=f"–î–æ–Ω–∞—Ç —Å ID {donation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@donation_admin.sub_command(name="–æ—Ç–∫–ª–æ–Ω–∏—Ç—å", description="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–æ–Ω–∞—Ç")
@commands.has_role("High Stuff+")
async def reject_donation(inter: ApplicationCommandInteraction, donation_id: int):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–æ–Ω–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏)"""
    await inter.response.defer(ephemeral=True)
    cursor.execute('SELECT user_id, amount, image_url FROM donations WHERE id = ?', (donation_id,))
    donation = cursor.fetchone()

    if donation:
        user_id, amount, image_url = donation
        user = await bot.fetch_user(user_id)

        embed = disnake.Embed(
            title="‚ùå –î–æ–Ω–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω",
            description=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –¥–æ–Ω–∞—Ç –Ω–∞ —Å—É–º–º—É **{amount}‚ÇΩ** –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.",
            color=disnake.Color.red()
        )
        embed.add_field(
            name="üìù –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            value="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            inline=False
        )
        await user.send(embed=embed)

        await inter.edit_original_response(content=f"–î–æ–Ω–∞—Ç ID {donation_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        
        cursor.execute('DELETE FROM donations WHERE id = ?', (donation_id,))
        conn.commit()
    else:
        await inter.edit_original_response(content=f"–î–æ–Ω–∞—Ç —Å ID {donation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.slash_command(name="–≥–∞—Ä–∞–∂", description="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞—Ä–∞–∂–æ–º")
async def garage_commands(inter: ApplicationCommandInteraction):
    """–ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞—Ä–∞–∂–æ–º"""
    pass

@garage_commands.sub_command(name="–º–µ—Å—Ç–∞", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞—Ä–∞–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
async def garage_slots(inter: ApplicationCommandInteraction):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞—Ä–∞–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö"""
    try:
        await inter.response.defer()
        
        # Get real estate details with garage slots first
        cursor.execute('''
            SELECT address, garage_slots, id, property_type 
            FROM real_estate 
            WHERE buyer_id = ? AND garage_slots > 0
        ''', (inter.author.id,))
        properties = cursor.fetchall()
        
        # Get additional garage slots
        cursor.execute('SELECT slots, purchase_date FROM garage_slots WHERE owner_id = ?', 
                      (inter.author.id,))
        garage_result = cursor.fetchone()
        
        # Check for active hotel booking
        cursor.execute('''
            SELECT end_date FROM hotel_bookings
            WHERE user_id = ? AND end_date > ?
        ''', (inter.author.id, datetime.now().isoformat()))
        hotel_booking = cursor.fetchone()
        hotel_slots = 1 if hotel_booking else 0
        
        # Calculate total slots from real estate
        cursor.execute('SELECT SUM(garage_slots) FROM real_estate WHERE buyer_id = ?',
                      (inter.author.id,))
        estate_slots = cursor.fetchone()[0] or 0
        
        # Calculate total slots
        total_slots = (garage_result[0] if garage_result else 0) + estate_slots + hotel_slots
        
        if total_slots > 0:
            embed = disnake.Embed(
                title="üè† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∞—Ä–∞–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –í–∞—à–∏ –º–µ—Å—Ç–∞ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "üöò –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –≤–∞—à–∏ –≥–∞—Ä–∞–∂–Ω—ã–µ –º–µ—Å—Ç–∞\n"
                    "‚ú® –í–∫–ª—é—á–∞—è –º–µ—Å—Ç–∞ –æ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ"
                ),
                color=disnake.Color.blue()
            )
            if properties:
                estate_details = "\n".join(
                    f"üè¢ **{property_type} {address} (ID: {id_})**\n"
                    f"‚îî‚îÄ ‚Ä¢ {slots} –≥–∞—Ä–∞–∂–Ω–æ–µ –º–µ—Å—Ç(–∞)"
                    for address, slots, id_, property_type in properties
                )
                embed.add_field(
                    name="üèòÔ∏è –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Å –≥–∞—Ä–∞–∂–∞–º–∏\n",
                    value=estate_details,
                    inline=False
                )
            
            # Add additional garage slots info
            if garage_result:
                embed.add_field(
                    name="üìÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–∞—Ä–∞–∂–Ω—ã–µ –º–µ—Å—Ç–∞:",
                    value=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {garage_result[0]}\n–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {datetime.fromisoformat(garage_result[1]).strftime('%d.%m.%Y')}",
                    inline=False
                )
            
            # Add hotel slot info if available
            if hotel_booking:
                end_date = datetime.fromisoformat(hotel_booking[0])
                embed.add_field(
                    name="üè® –û—Ç–µ–ª—å:",
                    value=f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ: 1\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}",
                    inline=False
                )
            
            # Add total slots info
            embed.add_field(
                name="üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
                value=f"–í—Å–µ–≥–æ –º–µ—Å—Ç: {total_slots}\n‚Ä¢ –û—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {estate_slots}\n‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {garage_result[0] if garage_result else 0}\n‚Ä¢ –û—Ç –æ—Ç–µ–ª—è: {hotel_slots}",
                inline=False
            )
            
            embed.description += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            
        else:
            embed = disnake.Embed(
                title="üè† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∞—Ä–∞–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö",
                description="–£ –≤–∞—Å –Ω–µ—Ç –≥–∞—Ä–∞–∂–Ω—ã—Ö –º–µ—Å—Ç\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–≥–∞—Ä–∞–∂ –∫—É–ø–∏—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Å –≥–∞—Ä–∞–∂–æ–º",
                color=disnake.Color.orange()
            )
            
        await inter.edit_original_response(embed=embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Å—Ç: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)
        
@bot.slash_command(name="–ø—Ä–∞–≤–∞", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏")
async def license_commands(inter: ApplicationCommandInteraction):
    """–ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏"""
    pass

@license_commands.sub_command(name="–º–æ–∏", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞")
async def my_licenses(inter: ApplicationCommandInteraction):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞"""
    user_id = str(inter.author.id)
    cursor.execute('SELECT category, issue_date FROM licenses WHERE user_id = ?', (user_id,))
    licenses_info = cursor.fetchall()
    
    if licenses_info:
        licenses_per_embed = 5
        total_licenses = len(licenses_info)
        num_embeds = (total_licenses + licenses_per_embed - 1) // licenses_per_embed

        for embed_index in range(num_embeds):
            start_idx = embed_index * licenses_per_embed
            end_idx = min(start_idx + licenses_per_embed, total_licenses)
            current_licenses = licenses_info[start_idx:end_idx]

            embed = disnake.Embed(
                title="üöó –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
                description=f"**–í–ª–∞–¥–µ–ª–µ—Ü:** {inter.author.mention}\n" + 
                          f"**–ù–æ–º–µ—Ä —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:** {inter.author.id}\n" +
                          "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                color=disnake.Color.brand_green()
            )

            # Add license categories to current embed
            for category, issue_date in current_licenses:
                status = check_license_status(issue_date)
                date = datetime.fromisoformat(issue_date).date()
                expiration_date = (datetime.fromisoformat(issue_date) + timedelta(days=90)).date()
                
                status_emoji = "‚úÖ" if status == "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã" else "‚ùå"
                
                embed.add_field(
                    name=f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}",
                    value=f"```\n"
                          f"–°—Ç–∞—Ç—É—Å: {status_emoji} {status}\n"
                          f"–í—ã–¥–∞–Ω–æ: {date.strftime('%d.%m.%Y')}\n"
                          f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiration_date.strftime('%d.%m.%Y')}\n"
                          f"```",
                    inline=False
                )

            # Add page number if multiple embeds
            if num_embeds > 1:
                embed.set_footer(text=f"–ì–ò–ë–î–î | –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {embed_index + 1}/{num_embeds}")
            else:
                embed.set_footer(text="–ì–ò–ë–î–î | –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            
            embed.timestamp = datetime.now()
            
            if embed_index == 0:
                await inter.response.send_message(embed=embed)
            else:
                await inter.followup.send(embed=embed)
    else:
        error_embed = disnake.Embed(
            title="‚ùå –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            description="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º.\n" +
                       "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–≤—Ç–æ—à–∫–æ–ª—É.",
            color=disnake.Color.red()
        )
        error_embed.set_footer(text="–ì–ò–ë–î–î | –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        await inter.response.send_message(embed=error_embed)

@license_commands.sub_command(name="–ø—Ä–æ–≤–µ—Ä–∏—Ç—å", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞")
async def check_licenses(inter: ApplicationCommandInteraction, member: disnake.Member):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ì–ò–ë–î–î)"""
    if not any(role.name == "–ì–ò–ë–î–î" for role in inter.author.roles):
        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!", ephemeral=True)
        return
        
    user_id = str(member.id)
    cursor.execute('SELECT category, issue_date FROM licenses WHERE user_id = ?', (user_id,))
    licenses_info = cursor.fetchall()
    
    if licenses_info:
        embed = disnake.Embed(
            title="üöó –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
            description=f"**–í–ª–∞–¥–µ–ª–µ—Ü:** {member.mention}\n" + 
                      f"**–ù–æ–º–µ—Ä —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:** {member.id}\n" +
                      "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            color=disnake.Color.brand_green()
        )
        
        for category, issue_date in licenses_info:
            status = check_license_status(issue_date)
            date = datetime.fromisoformat(issue_date).date()
            expiration_date = (datetime.fromisoformat(issue_date) + timedelta(days=90)).date()
            
            status_emoji = "‚úÖ" if status == "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã" else "‚ùå"
            
            embed.add_field(
                name=f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}",
                value=f"```\n"
                      f"–°—Ç–∞—Ç—É—Å: {status_emoji} {status}\n"
                      f"–í—ã–¥–∞–Ω–æ: {date.strftime('%d.%m.%Y')}\n"
                      f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiration_date.strftime('%d.%m.%Y')}\n"
                      f"```",
                inline=False
            )
        
        embed.set_footer(text="–ì–ò–ë–î–î | –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        embed.timestamp = datetime.now()
        await inter.response.send_message(embed=embed)
    else:
        await inter.response.send_message(f"–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.display_name} –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º.")

@license_commands.sub_command(name="–ª–∏—à–∏—Ç—å", description="–õ–∏—à–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤")
async def revoke_licenses(inter: ApplicationCommandInteraction, member: disnake.Member):
    """–õ–∏—à–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ì–ò–ë–î–î)"""
    if not any(role.name == "–ì–ò–ë–î–î" for role in inter.author.roles):
        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!", ephemeral=True)
        return
        
    user_id = str(member.id)
    cursor.execute('DELETE FROM licenses WHERE user_id = ?', (user_id,))
    conn.commit()
    
    embed = disnake.Embed(
        title="üö´ –õ–∏—à–µ–Ω–∏–µ –ø—Ä–∞–≤",
        description=(
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ **–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω:** {member.mention}\n"
            f"üìù **–°—Ç–∞—Ç—É—Å:** {'–ü—Ä–∞–≤–∞ –∏–∑—ä—è—Ç—ã' if cursor.rowcount > 0 else '–ü—Ä–∞–≤ –Ω–µ –∏–º–µ–µ—Ç'}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        ),
        color=disnake.Color.red() if cursor.rowcount > 0 else disnake.Color.orange()
    )
    embed.set_footer(text="–ì–ò–ë–î–î | –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    embed.timestamp = datetime.now()
    await inter.response.send_message(embed=embed)

@license_commands.sub_command(name="–≤—ã–¥–∞—Ç—å_a", description="–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ A")
async def add_license_a(inter: ApplicationCommandInteraction, member: disnake.Member):
    """–í—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ A (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤)"""
    if not any(role.name == "–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ A" for role in inter.author.roles):
        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!", ephemeral=True)
        return
        
    user_id = str(member.id)
    cursor.execute('INSERT OR REPLACE INTO licenses (user_id, category, issue_date) VALUES (?, ?, ?)', 
                   (user_id, 'A', datetime.now().isoformat()))
    conn.commit()
    
    embed = disnake.Embed(
        title="üèçÔ∏è –í—ã–¥–∞—á–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è",
        description=(
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {member.mention}\n"
            f"üìù **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** A\n"
            f"üìÖ **–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:** {datetime.now().strftime('%d.%m.%Y')}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        ),
        color=disnake.Color.green()
    )
    embed.set_footer(text="–ì–ò–ë–î–î | –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    embed.timestamp = datetime.now()
    await inter.response.send_message(embed=embed)

@license_commands.sub_command(name="–≤—ã–¥–∞—Ç—å_b", description="–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B")
async def add_license_b(inter: ApplicationCommandInteraction, member: disnake.Member):
    """–í—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤)"""
    if not any(role.name == "–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B" for role in inter.author.roles):
        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!", ephemeral=True)
        return
        
    user_id = str(member.id)
    cursor.execute('INSERT OR REPLACE INTO licenses (user_id, category, issue_date) VALUES (?, ?, ?)', 
                   (user_id, 'B', datetime.now().isoformat()))
    conn.commit()
    
    embed = disnake.Embed(
        title="üöó –í—ã–¥–∞—á–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è",
        description=(
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {member.mention}\n"
            f"üìù **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** B\n"
            f"üìÖ **–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:** {datetime.now().strftime('%d.%m.%Y')}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        ),
        color=disnake.Color.green()
    )
    embed.set_footer(text="–ì–ò–ë–î–î | –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    embed.timestamp = datetime.now()
    await inter.response.send_message(embed=embed)

@license_commands.sub_command(name="–≤—ã–¥–∞—Ç—å_c", description="–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ C")
async def add_license_c(inter: ApplicationCommandInteraction, member: disnake.Member):
    """–í—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ C (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤)"""
    if not any(role.name == "–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ C" for role in inter.author.roles):
        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!", ephemeral=True)
        return
    user_id = str(member.id)
    cursor.execute('INSERT OR REPLACE INTO licenses (user_id, category, issue_date) VALUES (?, ?, ?)', 
                   (user_id, 'C', datetime.now().isoformat()))
    conn.commit()
    embed = disnake.Embed(
        title="üöõ –í—ã–¥–∞—á–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è",
        description=(
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {member.mention}\n"
            f"üìù **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** C\n"
            f"üìÖ **–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:** {datetime.now().strftime('%d.%m.%Y')}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        ),
        color=disnake.Color.green()
    )
    embed.set_footer(text="–ì–ò–ë–î–î | –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    embed.timestamp = datetime.now()
    await inter.response.send_message(embed=embed)

@license_commands.sub_command(name="–≤—ã–¥–∞—Ç—å_d", description="–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ D")
async def add_license_d(inter: ApplicationCommandInteraction, member: disnake.Member):
    """–í—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ D (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤)"""
    if not any(role.name == "–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ D" for role in inter.author.roles):
        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!", ephemeral=True)
        return
        
    user_id = str(member.id)
    cursor.execute('INSERT OR REPLACE INTO licenses (user_id, category, issue_date) VALUES (?, ?, ?)', 
                   (user_id, 'D', datetime.now().isoformat()))
    conn.commit()
    
    embed = disnake.Embed(
        title="üöå –í—ã–¥–∞—á–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è",
        description=(
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {member.mention}\n"
            f"üìù **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** D\n"
            f"üìÖ **–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:** {datetime.now().strftime('%d.%m.%Y')}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        ),
        color=disnake.Color.green()
    )
    embed.set_footer(text="–ì–ò–ë–î–î | –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    embed.timestamp = datetime.now()
    await inter.response.send_message(embed=embed)

async def starting():
    """Initialize background tasks"""
    check_server_status.start()
    check_rentals.start()
    check_promotion_eligibility.start()
    check_hotel_bookings.start()
    print("All background tasks started successfully")




@bot.command()
@commands.has_role('–ì–ò–ë–î–î')
async def –ø—Ä–∏–Ω—è—Ç—å_–ø—Ç—Å(ctx, vehicle_id: int):
    cursor.execute('UPDATE pts SET status = "approved" WHERE car_id = ?', (vehicle_id,))
    conn.commit()
    
    if cursor.rowcount > 0:
        cursor.execute('SELECT owner_id FROM pts WHERE car_id = ?', (vehicle_id,))
        owner_id = cursor.fetchone()[0]
        owner = await bot.fetch_user(owner_id)
        embed = disnake.Embed(
            title="‚úÖ –ü–¢–° –æ–¥–æ–±—Ä–µ–Ω!",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üîë **ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** `{vehicle_id}`\n"
                "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¢–° –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green()
        )
        embed.set_footer(text="–ì–ò–ë–î–î | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        embed.timestamp = datetime.now()
        await owner.send(embed=embed)
        await ctx.send(f"–ü–¢–° #{vehicle_id} –æ–¥–æ–±—Ä–µ–Ω")
        await pts(ctx, vehicle_id)
    else:
        await ctx.send("–ü–¢–° —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.command()
@commands.has_role('–ì–ò–ë–î–î')
async def –æ—Ç–∫–ª–æ–Ω–∏—Ç—å_–ø—Ç—Å(ctx, vehicle_id: int, *, reason: str):
    cursor.execute('SELECT owner_id FROM pts WHERE car_id = ? AND status = "pending"', (vehicle_id,))
    result = cursor.fetchone()
    
    if result:
        owner_id = result[0]
        owner = await bot.fetch_user(owner_id)
        cursor.execute('DELETE FROM pts WHERE car_id = ?', (vehicle_id,))
        conn.commit()
        
        embed = disnake.Embed(
            title="‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üîë **ID –∑–∞—è–≤–∫–∏:** `{vehicle_id}`\n"
                f"üìù **–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:** {reason}\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.red()
        )
        embed.set_footer(text="–ì–ò–ë–î–î | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        embed.timestamp = datetime.now()
        await owner.send(embed=embed)
        await ctx.send(f"–ü–¢–° #{vehicle_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    else:
        await ctx.send("–ü–¢–° —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")


class PTSModal(disnake.ui.Modal):
    def __init__(self, member):
        self.member = member
        components = [
            disnake.ui.TextInput(
                label="ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 72", 
                custom_id="car_id",
                required=True
            ),
            disnake.ui.TextInput(
                label="–¶–≤–µ—Ç",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ß–µ—Ä–Ω—ã–π –º–µ—Ç–∞–ª–ª–∏–∫",
                custom_id="color",
                required=True
            ),
            disnake.ui.TextInput(
                label="–õ–æ—à–∞–¥–∏–Ω—ã–µ —Å–∏–ª—ã",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 450",
                custom_id="horsepower",
                required=True
            )
        ]
        super().__init__(
            title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
            components=components,
            custom_id="pts_modal"
        )

    async def callback(self, inter: disnake.ModalInteraction):
        # Send a nicely formatted processing message
        await inter.response.defer(ephemeral=True)
        await inter.edit_original_response(
            embed=disnake.Embed(
                title="‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏", 
                description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                color=disnake.Color.blue()
            )
        )
        
        car_id = inter.text_values["car_id"]
        
        # Check if PTS already exists or is pending
        cursor.execute('''
            SELECT status FROM pts 
            WHERE car_id = ? AND owner_id = ?
        ''', (car_id, self.member.id))
        
        existing_pts = cursor.fetchone()
        
        if existing_pts:
            status_messages = {
                'pending': '‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ü–¢–° –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
                'approved': '‚ÑπÔ∏è –≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ü–¢–°'
            }
            # Send informational message only visible to the interaction user
            info_embed = disnake.Embed(
                title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                description=status_messages.get(existing_pts[0], '‚ÑπÔ∏è –≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –∏–º–µ–µ—Ç –ü–¢–°'),
                color=disnake.Color.blue()
            )
            info_embed.set_footer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–ª—É–∂–±—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ü–¢–°")
            await inter.author.send(embed=info_embed)
            return
        
        # Get car info from purchased_cars
        cursor.execute('''
            SELECT brand, model, config, purchase_price 
            FROM purchased_cars 
            WHERE id = ? AND buyer_id = ?
        ''', (car_id, self.member.id))
        
        purchased_car = cursor.fetchone()
        
        if not purchased_car:
            error_embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –≥–∞—Ä–∞–∂–µ!",
                color=disnake.Color.red()
            )
            error_embed.set_footer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–ª—É–∂–±—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ü–¢–°")
            await inter.author.send(embed=error_embed)
            return
            
        brand, model, config, price = purchased_car
        
        # Get additional car info from available_cars
        cursor.execute('''
            SELECT body_type, transmission, engine
            FROM available_cars 
            WHERE brand = ? AND model = ? AND config = ?
        ''', (brand, model, config))
        
        car_details = cursor.fetchone()
        
        if not car_details:
            error_embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ!",
                color=disnake.Color.red()
            )
            error_embed.set_footer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–ª—É–∂–±—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ü–¢–°")
            await inter.author.send(embed=error_embed)
            return
            
        body_type, transmission, engine = car_details

        # Generate random plate number
        plate_number = f"{random.choice(['–ê', '–í', '–ï', '–ö', '–ú', '–ù', '–û', '–†', '–°', '–¢', '–£', '–•'])}{random.randint(100, 999)}{random.choice(['–ê', '–í', '–ï', '–ö', '–ú', '–ù', '–û', '–†', '–°', '–¢', '–£', '–•'])}{random.choice(['–ê', '–í', '–ï', '–ö', '–ú', '–ù', '–û', '–†', '–°', '–¢', '–£', '–•'])}|86"

        # Ask user to send photo
        await inter.author.send(
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –≤–∏–¥–Ω—ã –ª–æ—à–∞–¥–∏–Ω—ã–µ —Å–∏–ª—ã –∏ —Ü–≤–µ—Ç."
        )
            
        def check(m):
            return m.author.id == self.member.id and m.attachments

        try:
            # Wait for photo
            photo_message = await bot.wait_for('message', check=check, timeout=300)
            
            # Get photo URL
            photo_url = photo_message.attachments[0].url

            # Send photo to approval channel
            photo_channel = bot.get_channel(1351431079738867763)
            photo_embed = await photo_channel.send(file=await photo_message.attachments[0].to_file())
            stored_photo_url = photo_embed.attachments[0].url

            # Insert into pts table
            cursor.execute('''
                INSERT INTO pts (
                    car_id, owner_id, brand, model, config, color,
                    body, transmission, plate_number, status, horsepower, photo_url
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'pending', ?, ?)
            ''', (
                car_id, self.member.id, brand, model, config,
                inter.text_values["color"], body_type, transmission,
                plate_number, inter.text_values["horsepower"], stored_photo_url
            ))
            conn.commit()

            approval_channel = bot.get_channel(1346841023849955459)
            embed = disnake.Embed(
                title="üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¢–°",
                description=f"**–ó–∞—è–≤–∫–∞ ‚Ññ {car_id}**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                color=disnake.Color.gold()
            )

            embed.add_field(
                name="üë§ –í–ª–∞–¥–µ–ª–µ—Ü",
                value=f"{self.member.mention}\nID: {self.member.id}",
                inline=False
            )

            embed.add_field(
                name="üöó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¢–°",
                value=f"**–ú–∞—Ä–∫–∞:** {brand}\n"
                    f"**–ú–æ–¥–µ–ª—å:** {model}\n"
                    f"**–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:** {config}\n"
                    f"**–¶–≤–µ—Ç:** {inter.text_values['color']}\n"
                    f"**–ú–æ—â–Ω–æ—Å—Ç—å:** {inter.text_values['horsepower']} –ª.—Å.",
                inline=True
            )

            embed.add_field(
                name="‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                value=f"**–¢–∏–ø –∫—É–∑–æ–≤–∞:** {body_type}\n"
                    f"**–ö–ü–ü:** {transmission}\n"
                    f"**–î–≤–∏–≥–∞—Ç–µ–ª—å:** {engine}\n"
                    f"**–ì–æ—Å–Ω–æ–º–µ—Ä:** `{plate_number}`\n"
                    f"**ID –¢–°:** {car_id}",
                inline=True
            )

            embed.set_image(url=stored_photo_url)
            embed.set_footer(text="–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã !–ø—Ä–∏–Ω—è—Ç—å_–ø—Ç—Å –∏–ª–∏ !–æ—Ç–∫–ª–æ–Ω–∏—Ç—å_–ø—Ç—Å –ø—Ä–∏—á–∏–Ω–∞")
            embed.timestamp = datetime.now()

            await approval_channel.send(embed=embed)
            await self.member.send(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¢–° —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!"
            )

        except asyncio.TimeoutError:
            await self.member.send("‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ.")

@bot.command()
async def –ø—Ç—Å(ctx, vehicle_id: int):
    cursor.execute('''SELECT * FROM pts WHERE car_id = ?''', (vehicle_id,))
    vehicle = cursor.fetchone()
    
    if vehicle:
        if vehicle[9] == "pending":
            pending_embed = disnake.Embed(
                title="‚è≥ –ü–¢–° –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                description="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.",
                color=disnake.Color.yellow()
            )
            await ctx.send(embed=pending_embed)
            return
            
        owner = await bot.fetch_user(vehicle[1])
        embed = disnake.Embed(
            title="üöó –ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
            description=f"–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{vehicle[0]}",
            color=disnake.Color.dark_blue()
        )
        
        embed.add_field(
            name="üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ",
            value=f"–í–ª–∞–¥–µ–ª–µ—Ü: {owner.mention}",
            inline=False
        )
        
        embed.add_field(
            name="üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
            value=f"**–ú–∞—Ä–∫–∞:** {vehicle[2]}\n"
                  f"**–ú–æ–¥–µ–ª—å:** {vehicle[3]}\n"
                  f"**–¶–≤–µ—Ç:** {vehicle[5]}\n"
                  f"**–¢–∏–ø –∫—É–∑–æ–≤–∞:** {vehicle[6]}",
            inline=True
        )
        
        embed.add_field(
            name="‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            value=f"**–ö–ü–ü:** {vehicle[7]}\n"
                  f"**–ì–æ—Å–Ω–æ–º–µ—Ä:** `{vehicle[8]}`\n"
                  f"**–ú–æ—â–Ω–æ—Å—Ç—å:** {vehicle[10]} –ª.—Å.\n"
                  f"**ID –¢–°:** {vehicle[0]}",
            inline=True
        )
        if vehicle[11]:
            embed.set_image(url=vehicle[11])
        
        embed.set_footer(text="–ì–ò–ë–î–î | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        embed.timestamp = datetime.now()
        
        await ctx.send(embed=embed)
    else:
        embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞",
            description="–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            color=disnake.Color.red()
        )
        await ctx.send(embed=embed)


@bot.command()
@commands.has_role('–ì–ò–ë–î–î')
async def –∏–∑–º–µ–Ω–∏—Ç—å_–Ω–æ–º–µ—Ä(ctx, vehicle_id: int, new_plate_number: str):
    cursor.execute('UPDATE pts SET plate_number = ? WHERE car_id = ?', 
                  (new_plate_number, vehicle_id))
    conn.commit()
    
    if cursor.rowcount > 0:
        embed = disnake.Embed(
            title="‚úÖ –ù–æ–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üöó **ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** {vehicle_id}\n"
                f"üî¢ **–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä:** `{new_plate_number}`\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green()
        )
        embed.set_footer(text="–ì–ò–ë–î–î | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        embed.timestamp = datetime.now()
        await ctx.send(embed=embed)
    else:
        embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.red()
        )
        embed.set_footer(text="–ì–ò–ë–î–î | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        embed.timestamp = datetime.now()
        await ctx.send(embed=embed)
    

@bot.slash_command(name="–∞–≤—Ç–æ—Å–∞–ª–æ–Ω", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–µ")
async def car_dealership(inter: ApplicationCommandInteraction):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    try:
        await inter.response.defer()
        
        initial_embed = disnake.Embed(  
            title="‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞...",
            description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            color=disnake.Color.blue()
        )
        message = await inter.edit_original_response(embed=initial_embed)
        
        cursor.execute('SELECT DISTINCT brand FROM available_cars')
        brands_raw = [row[0] for row in cursor.fetchall()] 
        brands = []
        for brand in brands_raw:
            if brand and len(brand.strip()) > 0 and len(brand.strip()) <= 100:
                brands.append(brand.strip())
            elif brand and len(brand.strip()) > 100:
                brands.append(brand.strip()[:97] + "...") 
        
        if not brands:
            embed = disnake.Embed(
                title="–ê–≤—Ç–æ—Å–∞–ª–æ–Ω", 
                description="üö´ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        

        brands_per_page = 25
        total_brand_pages = (len(brands) + brands_per_page - 1) // brands_per_page
        current_brand_page = 0
            
        brand_models = {}
        for brand in brands:
            cursor.execute('SELECT DISTINCT model FROM available_cars WHERE brand LIKE ?', (brand.replace("...", "%"),))
            models_raw = [row[0] for row in cursor.fetchall()]
            valid_models = []
            for model in models_raw:
                if model and len(model.strip()) > 0 and len(model.strip()) <= 100:
                    valid_models.append(model.strip())
                elif model and len(model.strip()) > 100:
                    valid_models.append(model.strip()[:97] + "...")       
            brand_models[brand] = valid_models
        

        async def update_brand_page(page_num):
            start_idx = page_num * brands_per_page
            end_idx = min(start_idx + brands_per_page, len(brands))
            current_page_brands = brands[start_idx:end_idx]
            
            select = disnake.ui.Select(
                placeholder=f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É (—Å—Ç—Ä. {page_num+1}/{total_brand_pages})",
                options=[disnake.SelectOption(label=brand, value=brand) for brand in current_page_brands]
            )
            
            async def brand_callback(interaction):
                if interaction.message.id != message.id:
                    return                
                await interaction.response.defer()            
                brand = select.values[0]
                models = brand_models[brand]
                
                if not models:
                    embed = disnake.Embed(
                        title="–û—à–∏–±–∫–∞",
                        description="–ú–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                        color=disnake.Color.red()
                    )
                    return await interaction.edit_original_response(embed=embed)
                

                models_per_page = 25
                total_model_pages = (len(models) + models_per_page - 1) // models_per_page
                current_model_page = 0
                

                cursor.execute('''SELECT model, config, year, price, body_type,
                               transmission, engine, image_data FROM available_cars
                               WHERE brand = ?''', (brand,))
                all_configs = {row[0]: [] for row in cursor.fetchall()}           
                
                cursor.execute('''SELECT model, config, year, price, body_type,
                               transmission, engine, image_data FROM available_cars
                               WHERE brand = ?''', (brand,))
                for row in cursor.fetchall():
                    model_name = row[0]
                    all_configs[model_name].append(row[1:])
                

                async def update_model_page(page_num):
                    start_idx = page_num * models_per_page
                    end_idx = min(start_idx + models_per_page, len(models))
                    current_page_models = models[start_idx:end_idx]
                    
                    model_select = disnake.ui.Select(
                        placeholder=f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (—Å—Ç—Ä. {page_num+1}/{total_model_pages})",
                        options=[disnake.SelectOption(label=model) for model in current_page_models]
                    )
                    
                    async def model_callback(inter):
                        if inter.message.id != message.id:
                            return                    
                        await inter.response.defer()                
                        model = model_select.values[0]
                        configs = all_configs.get(model, [])
                        
                        if not configs:
                            embed = disnake.Embed(
                                title="–û—à–∏–±–∫–∞",
                                description="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                                color=disnake.Color.red()
                            )
                            return await inter.edit_original_response(embed=embed)
                            
                        configs.sort(key=lambda x: x[2])
                        current_config_index = 0
                        total_configs = len(configs)
                        
                        async def show_config(config_index, interaction):
                            config = configs[config_index]
                            embed = disnake.Embed(
                                title=f"üöó {brand} {model} {config[0]}",
                                description=(
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                    f"üìÖ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {config[1]}\n"
                                    f"üèóÔ∏è **–¢–∏–ø –∫—É–∑–æ–≤–∞:** {config[3]}\n"
                                    f"üîÑ **–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è:** {config[4]}\n"
                                    f"üîß **–î–≤–∏–≥–∞—Ç–µ–ª—å:** {config[5]}\n\n"
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –°—Ç–æ–∏–º–æ—Å—Ç—å ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                                    f"üí∞ **–¶–µ–Ω–∞:** {config[2]:,}‚ÇΩ\n"
                                ),
                                color=disnake.Color.gold()
                            )
                            embed.set_footer(text=f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_index + 1} –∏–∑ {total_configs}")
                            if config[6]:
                                embed.set_image(url=config[6])

                            view = disnake.ui.View(timeout=180)
                            prev_button = disnake.ui.Button(
                                style=disnake.ButtonStyle.secondary,
                                label="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                                custom_id="prev_config",
                                disabled=config_index == 0
                            )     
                            async def prev_callback(prev_inter):
                                if prev_inter.message.id != message.id:
                                    return
                                await prev_inter.response.defer()
                                nonlocal current_config_index
                                current_config_index = max(0, current_config_index - 1)
                                await show_config(current_config_index, prev_inter)               
                            prev_button.callback = prev_callback
                            
                            next_button = disnake.ui.Button(
                                style=disnake.ButtonStyle.secondary,
                                label="–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂Ô∏è",
                                custom_id="next_config",
                                disabled=config_index == total_configs - 1  
                            )   
                            async def next_callback(next_inter):
                                if next_inter.message.id != message.id:
                                    return
                                await next_inter.response.defer()
                                nonlocal current_config_index
                                current_config_index = min(total_configs - 1, current_config_index + 1)
                                await show_config(current_config_index, next_inter)                   
                            next_button.callback = next_callback
                            
                            back_button = disnake.ui.Button(
                                style=disnake.ButtonStyle.secondary,
                                label="‚óÄÔ∏è –ö –º–æ–¥–µ–ª—è–º",
                                custom_id="back_to_models"
                            )                   
                            async def back_callback(back_inter):
                                if back_inter.message.id != message.id:
                                    return
                                await back_inter.response.defer()
                                await update_model_page(current_model_page)                  
                            back_button.callback = back_callback
                            
                            back_to_brands = disnake.ui.Button(
                                style=disnake.ButtonStyle.secondary,
                                label="üè† –ö —Å–ø–∏—Å–∫—É –º–∞—Ä–æ–∫",
                                custom_id="back_to_brands"
                            )            
                            async def brands_callback(brands_inter):
                                if brands_inter.message.id != message.id:
                                    return
                                await brands_inter.response.defer()
                                await update_brand_page(current_brand_page)
                            
                            back_to_brands.callback = brands_callback


                            buy_button = disnake.ui.Button(
                                style=disnake.ButtonStyle.green,
                                label="üõí –ö—É–ø–∏—Ç—å",
                                custom_id="buy_car"
                            )

                            async def buy_callback(buy_inter):
                                if buy_inter.message.id != message.id:
                                    return
                                await buy_inter.response.defer(ephemeral=True)
                                
                                try:
                                    has_space, total_slots, used_slots = await check_garage_space(inter.author.id)
                
                                    if not has_space:
                                        embed = disnake.Embed(
                                            title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–∞—Ä–∞–∂–Ω—ã—Ö –º–µ—Å—Ç",
                                            description=(
                                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                                f"üöó **–ó–∞–Ω—è—Ç–æ –º–µ—Å—Ç:** {used_slots}/{total_slots}\n"
                                                f"‚ùó **–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:**\n"
                                                f"   ‚Ä¢ –ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ (/–∫—É–ø–∏—Ç—å_–≥–∞—Ä–∞–∂)\n"
                                                f"   ‚Ä¢ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Å –≥–∞—Ä–∞–∂–æ–º (/–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å)\n"
                                                f"   ‚Ä¢ –ü—Ä–æ–¥–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n\n"
                                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                                            ),
                                            color=disnake.Color.red()
                                        )
                                        return await buy_inter.edit_original_response(embed=embed)
                                        
                                    addtoserver = await carmanager(inter.author.display_name, "–¥–æ–±–∞–≤–∏—Ç—å", f"{brand} {model}")
                                    if addtoserver == False:
                                        error_embed = disnake.Embed(
                                            title="‚ùå –û—à–∏–±–∫–∞",
                                            description=(
                                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                                "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n"
                                                "üë®‚Äçüíº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
                                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                                            ),
                                            color=disnake.Color.red()
                                        )
                                        await buy_inter.edit_original_response(embed=error_embed)
                                        return
                                        
                                    # Check if user has enough money
                                    bal = unbclient.get_user_bal(1341469479510474813, int(buy_inter.author.id))
                                    if bal['cash'] < config[2]:
                                        await buy_inter.edit_original_response(embed=disnake.Embed(
                                            title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                                            description=f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {config[2]:,}‚ÇΩ\n–£ –≤–∞—Å: {bal['cash']:,}‚ÇΩ",
                                            color=disnake.Color.red()
                                        ))
                                        return
                                        
                                    new_bal = bal['cash'] - config[2]
                                    unbclient.set_user_bal(1341469479510474813, int(buy_inter.author.id), cash=new_bal)
                                    
                                    cursor.execute('''INSERT INTO purchased_cars 
                                                 (brand, model, config, purchase_price, buyer_id, purchase_date)
                                                 VALUES (?, ?, ?, ?, ?, ?)''',
                                                 (brand, model, config[0], config[2],
                                                  buy_inter.author.id, datetime.now().isoformat()))
                                    conn.commit()
                                    
                                    success_embed = disnake.Embed(
                                        title="‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!",
                                        description=(
                                            "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è!**\n\n"
                                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¢–° ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                            f"üöó **–ú–∞—Ä–∫–∞:** {brand}\n"
                                            f"üìã **–ú–æ–¥–µ–ª—å:** {model}\n"
                                            f"‚öôÔ∏è **–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:** {config[0]}\n"
                                            f"üìÖ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {config[1]}\n"
                                            f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {config[2]:,}‚ÇΩ\n"
                                            f"üèóÔ∏è **–¢–∏–ø –∫—É–∑–æ–≤–∞:** {config[3]}\n" 
                                            f"üîÑ **–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è:** {config[4]}\n"
                                            f"üîß **–î–≤–∏–≥–∞—Ç–µ–ª—å:** {config[5]}\n\n"
                                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                            f"üîë **ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** `{cursor.lastrowid}`"
                                        ),
                                        color=disnake.Color.green()
                                    )
                                    # Add vehicle image if available
                                    if config[6]:
                                        success_embed.set_image(url=config[6])
                                        
                                    # Remove previous buttons by sending an empty view
                                    await interaction.edit_original_response(view=None)
                                    await buy_inter.edit_original_response(embed=success_embed)
                                    
                                    # Send successful purchase log to bot's log channel
                                    logs_channel = bot.get_channel(1351455653197123665)
                                    purchase_log_embed = disnake.Embed(
                                        title="üõí –ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                                        description=(
                                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                            f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {brand} {model} {config[0]}\n"
                                            f"üë§ **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {buy_inter.author.mention}\n"
                                            f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {config[2]:,}‚ÇΩ\n"
                                            f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                                        ),
                                        color=disnake.Color.green()
                                    )
                                    if config[6]:  # If car has image
                                        purchase_log_embed.set_image(url=config[6])
                                    await logs_channel.send(embed=purchase_log_embed)
                                    
                                except Exception as e:
                                    await buy_inter.edit_original_response(embed=disnake.Embed(
                                        title="‚ùå –û—à–∏–±–∫–∞",
                                        description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}",
                                        color=disnake.Color.red()
                                    ))

                            buy_button.callback = buy_callback
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                            view.add_item(prev_button)
                            view.add_item(next_button)
                            view.add_item(buy_button)
                            view.add_item(back_button)
                            view.add_item(back_to_brands)
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
                            await interaction.edit_original_response(embed=embed, view=view)

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                        await show_config(current_config_index, inter)

                    model_select.callback = model_callback
                    
                    view = disnake.ui.View(timeout=180)
                    view.add_item(model_select)
                    

                    if total_model_pages > 1:
                        prev_button = disnake.ui.Button(
                            style=disnake.ButtonStyle.secondary,
                            label="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                            custom_id="prev_model_page",
                            disabled=page_num == 0
                        )
                        
                        next_button = disnake.ui.Button(
                            style=disnake.ButtonStyle.secondary,
                            label="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚ñ∂Ô∏è",
                            custom_id="next_model_page",
                            disabled=page_num == total_model_pages - 1
                        )
                        
                        async def prev_page_callback(interaction):
                            if interaction.message.id != message.id:
                                return
                            await interaction.response.defer()
                            nonlocal current_model_page
                            current_model_page = max(0, current_model_page - 1)
                            await update_model_page(current_model_page)
                        
                        async def next_page_callback(interaction):
                            if interaction.message.id != message.id:
                                return
                            await interaction.response.defer()
                            nonlocal current_model_page
                            current_model_page = min(total_model_pages - 1, current_model_page + 1)
                            await update_model_page(current_model_page)
                        
                        prev_button.callback = prev_page_callback
                        next_button.callback = next_page_callback
                        
                        view.add_item(prev_button)
                        view.add_item(next_button)
                    

                    back_to_brands = disnake.ui.Button(
                        style=disnake.ButtonStyle.secondary,
                        label="üè† –ö —Å–ø–∏—Å–∫—É –º–∞—Ä–æ–∫",
                        custom_id="back_to_brands"
                    )
                    
                    async def brands_callback(brands_inter):
                        if brands_inter.message.id != message.id:
                            return
                        await brands_inter.response.defer()
                        await update_brand_page(current_brand_page)
                    
                    back_to_brands.callback = brands_callback
                    view.add_item(back_to_brands)
                    
                    embed = disnake.Embed(
                        title=f"üöó {brand}",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            "üöò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n"
                            "‚ú® –ö–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏\n\n"
                            f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num+1} –∏–∑ {total_model_pages}\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.green()
                    )
                    await interaction.edit_original_response(embed=embed, view=view)
                

                await update_model_page(current_model_page)
            
            select.callback = brand_callback
            
            view = disnake.ui.View(timeout=180)
            view.add_item(select)
            

            if total_brand_pages > 1:
                prev_button = disnake.ui.Button(
                    style=disnake.ButtonStyle.secondary,
                    label="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                    custom_id="prev_brand_page",
                    disabled=page_num == 0
                )
                
                next_button = disnake.ui.Button(
                    style=disnake.ButtonStyle.secondary,
                    label="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚ñ∂Ô∏è",
                    custom_id="next_brand_page",
                    disabled=page_num == total_brand_pages - 1
                )
                
                async def prev_page_callback(interaction):
                    if interaction.message.id != message.id:
                        return
                    await interaction.response.defer()
                    nonlocal current_brand_page
                    current_brand_page = max(0, current_brand_page - 1)
                    await update_brand_page(current_brand_page)
                
                async def next_page_callback(interaction):
                    if interaction.message.id != message.id:
                        return
                    await interaction.response.defer()
                    nonlocal current_brand_page
                    current_brand_page = min(total_brand_pages - 1, current_brand_page + 1)
                    await update_brand_page(current_brand_page)
                
                prev_button.callback = prev_page_callback
                next_button.callback = next_page_callback
                
                view.add_item(prev_button)
                view.add_item(next_button)
            
            embed = disnake.Embed(
                title="üèéÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω MaxiCars",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    "üöó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n"
                    "üí´ –£ –Ω–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ª—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ –æ—Ç –≤–µ–¥—É—â–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π\n\n"
                    f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num+1} –∏–∑ {total_brand_pages}\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.blue()
            )
            await inter.edit_original_response(embed=embed, view=view)
        

        await update_brand_page(current_brand_page)

    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞: {str(e)}",
            color=disnake.Color.red()
        )
        if not inter.response.is_done():
            await inter.response.send_message(embed=error_embed)
        else:
            await inter.edit_original_response(embed=error_embed)



@garage_commands.sub_command(name="–º–æ–∏_–∞–≤—Ç–æ", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏")
async def my_cars(inter: ApplicationCommandInteraction):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await inter.response.defer(ephemeral=True)
        
        # Get all cars owned by the user
        cursor.execute('''
            SELECT id, brand, model, config, purchase_date 
            FROM purchased_cars 
            WHERE buyer_id = ?
            ORDER BY purchase_date DESC
        ''', (inter.author.id,))
        cars = cursor.fetchall()

        # Get rented cars
        cursor.execute('''
            SELECT rc.car_id, pc.brand, pc.model, pc.config, rc.start_time, rc.end_time
            FROM rentcar rc
            JOIN purchased_cars pc ON rc.car_id = pc.id
            WHERE rc.renter_id = ? AND rc.status = 'active'
            AND rc.end_time > ?
        ''', (inter.author.id, datetime.now().isoformat()))
        rented_cars = cursor.fetchall()

        if not cars and not rented_cars:
            embed = disnake.Embed(
                title="üöó –ú–æ–π –≥–∞—Ä–∞–∂",
                description="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)

        # Create embed for owned cars
        for i, car in enumerate(cars):
            car_id, brand, model, config, purchase_date = car
            
            # Get car image from available_cars table
            cursor.execute('''
                SELECT image_data 
                FROM available_cars 
                WHERE brand = ? AND model = ? AND config = ?
            ''', (brand, model, config))
            car_image = cursor.fetchone()

            # Get full car details from available_cars table
            cursor.execute('''
                SELECT body_type, transmission, engine, year, price
                FROM available_cars 
                WHERE brand = ? AND model = ? AND config = ?
            ''', (brand, model, config))
            car_details = cursor.fetchone()

            if car_details:
                body_type, transmission, engine, year, price = car_details
                # Check if car is being rented out
                cursor.execute('''
                    SELECT renter_id, end_time 
                    FROM rentcar 
                    WHERE car_id = ? AND status = 'active' AND end_time > ?
                ''', (car_id, datetime.now().isoformat()))
                rental_info = cursor.fetchone()

                # Check if user is renting this car
                cursor.execute('''
                    SELECT owner_id, end_time 
                    FROM rentcar 
                    WHERE car_id = ? AND renter_id = ? AND status = 'active' AND end_time > ?
                ''', (car_id, inter.author.id, datetime.now().isoformat()))
                renting_info = cursor.fetchone()

                rental_status = ""
                if rental_info:
                    renter = await bot.fetch_user(rental_info[0])
                    rental_status = f"\nüë• **–í –∞—Ä–µ–Ω–¥–µ —É:** {renter.mention}\n‚è∞ **–î–æ:** {datetime.fromisoformat(rental_info[1]).strftime('%d.%m.%Y %H:%M')}"
                elif renting_info:
                    owner = await bot.fetch_user(renting_info[0])
                    rental_status = f"\nüë§ **–ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–æ —É:** {owner.mention}\n‚è∞ **–î–æ:** {datetime.fromisoformat(renting_info[1]).strftime('%d.%m.%Y %H:%M')}"

                embed = disnake.Embed(
                    title=f"üöó {brand} {model} {config}",
                    description=(
                        "**‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ **‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ**\n\n"
                        f"üîë **ID:** {car_id}\n"
                        f"üìÖ **–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:** {datetime.fromisoformat(purchase_date).strftime('%d.%m.%Y')}\n"
                        f"üèóÔ∏è **–¢–∏–ø –∫—É–∑–æ–≤–∞:** {body_type}\n"
                        f"üîÑ **–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è:** {transmission}\n"
                        f"üîß **–î–≤–∏–≥–∞—Ç–µ–ª—å:** {engine}\n"
                        f"üìÖ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {year}\n"
                        f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {price:,}‚ÇΩ"
                        f"{rental_status}\n\n"
                        "**‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ**"
                    ),
                    color=disnake.Color.gold()
                )
                if car_image and car_image[0]:
                    embed.set_thumbnail(url=car_image[0])
            else:
                embed = disnake.Embed(
                    title=f"üöó {brand} {model} {config}",
                    description=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üîë **ID:** {car_id}\n"
                        f"üìÖ **–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:** {datetime.fromisoformat(purchase_date).strftime('%d.%m.%Y')}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    color=disnake.Color.brand_green()
                )
                if car_image and car_image[0]:
                    embed.set_thumbnail(url=car_image[0])
            
            if i == 0:
                await inter.edit_original_response(embed=embed)
            else:
                await inter.followup.send(embed=embed, ephemeral=True)

        # Create embed for rented cars
        for rented_car in rented_cars:
            car_id, brand, model, config, start_time, end_time = rented_car
            
            cursor.execute('''
                SELECT image_data, body_type, transmission, engine, year, price
                FROM available_cars 
                WHERE brand = ? AND model = ? AND config = ?
            ''', (brand, model, config))
            car_details = cursor.fetchone()

            if car_details:
                image_url, body_type, transmission, engine, year, price = car_details
                embed = disnake.Embed(
                    title=f"üöó {brand} {model} {config} (–ê—Ä–µ–Ω–¥–æ–≤–∞–Ω)",
                    description=(
                        "**‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–º –∞–≤—Ç–æ **‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ**\n\n"
                        f"üîë **ID:** {car_id}\n"
                        f"üìÖ **–ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã:** {datetime.fromisoformat(start_time).strftime('%d.%m.%Y %H:%M')}\n"
                        f"‚è∞ **–ö–æ–Ω–µ—Ü –∞—Ä–µ–Ω–¥—ã:** {datetime.fromisoformat(end_time).strftime('%d.%m.%Y %H:%M')}\n"
                        f"üèóÔ∏è **–¢–∏–ø –∫—É–∑–æ–≤–∞:** {body_type}\n"
                        f"üîÑ **–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è:** {transmission}\n"
                        f"üîß **–î–≤–∏–≥–∞—Ç–µ–ª—å:** {engine}\n"
                        f"üìÖ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {year}\n\n"
                        "**‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ**"
                    ),
                    color=disnake.Color.blue()
                )
                if image_url:
                    embed.set_thumbnail(url=image_url)
                await inter.followup.send(embed=embed, ephemeral=True)

        # Send summary message
        total_cars = len(cars) + len(rented_cars)
        summary = disnake.Embed(
            title="üìã –°–≤–æ–¥–∫–∞",
            description=(
                f"–í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –≥–∞—Ä–∞–∂–µ: {total_cars}\n"
                f"‚Ä¢ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {len(cars)}\n"
                f"‚Ä¢ –ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö: {len(rented_cars)}"
            ),
            color=disnake.Color.green()
        )
        await inter.followup.send(embed=summary, ephemeral=True)

    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {str(e)}",
            color=disnake.Color.red()
        )
        if not inter.response.is_done():
            await inter.response.send_message(embed=error_embed, ephemeral=True)
        else:
            await inter.followup.send(embed=error_embed, ephemeral=True)

@garage_commands.sub_command(name="–∏–Ω—Ñ–æ", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ")
async def car_info(inter: ApplicationCommandInteraction, car_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ ID"""
    try:
        await inter.response.defer()
        
        # Get car details from purchased_cars table
        cursor.execute('''
            SELECT brand, model, config, purchase_price, buyer_id, purchase_date
            FROM purchased_cars 
            WHERE id = ?
        ''', (car_id,))
        car = cursor.fetchone()

        if not car:
            embed = disnake.Embed(
                title="‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                description="–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)

        brand, model, config, price, owner_id, purchase_date = car

        # Get additional car details from available_cars
        cursor.execute('''
            SELECT body_type, transmission, engine, year, image_data
            FROM available_cars 
            WHERE brand = ? AND model = ? AND config = ?
        ''', (brand, model, config))
        car_details = cursor.fetchone()

        if car_details:
            body_type, transmission, engine, year, image_url = car_details
            owner = await bot.fetch_user(owner_id)

            # Check if car is being rented
            cursor.execute('''
                SELECT renter_id, end_time 
                FROM rentcar 
                WHERE car_id = ? AND status = 'active' AND end_time > ?
            ''', (car_id, datetime.now().isoformat()))
            rental_info = cursor.fetchone()

            rental_status = ""
            if rental_info:
                renter = await bot.fetch_user(rental_info[0])
                rental_status = f"\nüë• **–í –∞—Ä–µ–Ω–¥–µ —É:** {renter.mention}\n‚è∞ **–î–æ:** {datetime.fromisoformat(rental_info[1]).strftime('%d.%m.%Y %H:%M')}"

            embed = disnake.Embed(
                title=f"üöó {brand} {model} {config}",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üë§ **–í–ª–∞–¥–µ–ª–µ—Ü:** {owner.mention}\n"
                    f"üîë **ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** {car_id}\n"
                    f"üìÖ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {year}\n"
                    f"üèóÔ∏è **–¢–∏–ø –∫—É–∑–æ–≤–∞:** {body_type}\n"
                    f"üîÑ **–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è:** {transmission}\n"
                    f"üîß **–î–≤–∏–≥–∞—Ç–µ–ª—å:** {engine}\n"
                    f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {price:,}‚ÇΩ\n"
                    f"üìÖ **–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:** {datetime.fromisoformat(purchase_date).strftime('%d.%m.%Y')}"
                    f"{rental_status}\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.blue()
            )

            if image_url:
                embed.set_image(url=image_url)

            embed.set_footer(text="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤")
            embed.timestamp = datetime.now()

            await inter.edit_original_response(embed=embed)
        else:
            embed = disnake.Embed(
                title="‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                description="–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                color=disnake.Color.orange()
            )
            await inter.edit_original_response(embed=embed)

    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}",
            color=disnake.Color.red()
        )
        if not inter.response.is_done():
            await inter.response.send_message(embed=error_embed)
        else:
            await inter.edit_original_response(embed=error_embed)

@garage_commands.sub_command(name="–∞—Ä–µ–Ω–¥–∞", description="–°–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –∞—Ä–µ–Ω–¥—É –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É")
async def rent_car(
    inter: ApplicationCommandInteraction, 
    car_id: int, 
    –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä: disnake.Member, 
    —Ü–µ–Ω–∞_–≤_—á–∞—Å: int, 
    —á–∞—Å–æ–≤: int
):
    """–°–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –∞—Ä–µ–Ω–¥—É –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É"""
    try:
        await inter.response.defer()
        
        # Check if car exists and belongs to owner
        cursor.execute('''
            SELECT pc.*, ac.image_data
            FROM purchased_cars pc
            LEFT JOIN available_cars ac ON pc.brand = ac.brand 
                AND pc.model = ac.model AND pc.config = ac.config
            WHERE pc.id = ? AND pc.buyer_id = ?
        ''', (car_id, inter.author.id))
        car = cursor.fetchone()

        if not car:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
            
        # Check if car is already being rented
        cursor.execute('''
            SELECT * FROM rentcar 
            WHERE car_id = ? AND status = 'active' AND end_time > ?
        ''', (car_id, datetime.now().isoformat()))
        
        active_rental = cursor.fetchone()
        if active_rental:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ä–µ–Ω–¥–µ",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
            
        total_price = —Ü–µ–Ω–∞_–≤_—á–∞—Å * —á–∞—Å–æ–≤

        # Create rental offer embed
        embed = disnake.Embed(
            title="üöó –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–µ–Ω–¥–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üöò **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {car[1]} {car[2]} {car[3]}\n"
                f"‚è∞ **–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:** {—á–∞—Å–æ–≤} —á–∞—Å(–æ–≤)\n"
                f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —á–∞—Å:** {—Ü–µ–Ω–∞_–≤_—á–∞—Å:,}‚ÇΩ\n"
                f"üíµ **–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_price:,}‚ÇΩ\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.blue()
        )

        if car[7]:  # If car has image
            embed.set_image(url=car[7])

        # Create buttons view
        view = disnake.ui.View(timeout=300)  # 5 minutes timeout

        accept_button = disnake.ui.Button(
            label="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
            style=disnake.ButtonStyle.green,
            custom_id="accept"
        )

        decline_button = disnake.ui.Button(
            label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            style=disnake.ButtonStyle.red,
            custom_id="decline"
        )

        async def accept_callback(interaction: disnake.MessageInteraction):
            if interaction.author != –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä:
                return await interaction.response.send_message("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)

            await interaction.response.defer()

            try:
                addtoserverpo = await carmanager(interaction.author.display_name, "–¥–æ–±–∞–≤–∏—Ç—å", f'{car[1]} {car[2]}')
                if addtoserverpo == False:
                    error_embed = disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=(
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                        "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n"
                                        "üë®‚Äçüíº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.red()
                    )
                    await inter.followup.send(embed=error_embed)
                    
                addtoserverpr = await carmanager(inter.author.display_name, "—É–¥–∞–ª–∏—Ç—å", f'{car[1]} {car[2]}')
                if addtoserverpr == False:
                    error_embed = disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=(
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                        "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞\n"
                                        "üë®‚Äçüíº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.red()
                    )
                    await inter.followup.send(embed=error_embed)
                    
                # Check renter's balance
                bal = unbclient.get_user_bal(1341469479510474813, –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä.id)
                if bal['cash'] < total_price:
                    return await interaction.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                            description=f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {total_price:,}‚ÇΩ\n–£ –≤–∞—Å: {bal['cash']:,}‚ÇΩ",
                            color=disnake.Color.red()
                        )
                    )
                    
                cursor.execute('''
                    INSERT INTO rentcar (
                        car_id, owner_id, renter_id, 
                        start_time, end_time, price_per_hour, total_price, status
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, 'active')
                ''', (
                    car_id, inter.author.id, –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä.id,
                    datetime.now(), 
                    datetime.now() + timedelta(hours=—á–∞—Å–æ–≤),
                    —Ü–µ–Ω–∞_–≤_—á–∞—Å, total_price
                ))
                conn.commit()

                # Transfer money
                new_renter_bal = bal['cash'] - total_price
                unbclient.set_user_bal(1341469479510474813, –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä.id, cash=new_renter_bal)

                owner_bal = unbclient.get_user_bal(1341469479510474813, inter.author.id)
                new_owner_bal = owner_bal['cash'] + total_price
                unbclient.set_user_bal(1341469479510474813, inter.author.id, cash=new_owner_bal)

                success_embed = disnake.Embed(
                    title="‚úÖ –ê—Ä–µ–Ω–¥–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞",
                    description=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–µ–Ω–¥–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {car[1]} {car[2]} {car[3]}\n"
                        f"üë§ **–í–ª–∞–¥–µ–ª–µ—Ü:** {inter.author.mention}\n"
                        f"üë• **–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä:** {–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä.mention}\n"
                        f"‚è∞ **–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:** {—á–∞—Å–æ–≤} —á–∞—Å(–æ–≤)\n"
                        f"üí∞ **–û–ø–ª–∞—á–µ–Ω–æ:** {total_price:,}‚ÇΩ\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    color=disnake.Color.green()
                )

                if car[7]:
                    success_embed.set_image(url=car[7])

                await interaction.edit_original_response(embed=success_embed, view=None)

                # Log the rental
                logs_channel = bot.get_channel(1351455653197123665)
                logs_embed = disnake.Embed(
                    title="üöó –ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    description=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–µ–Ω–¥–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üöò **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {car[1]} {car[2]} {car[3]} (ID: {car_id})\n"
                        f"üë§ **–í–ª–∞–¥–µ–ª–µ—Ü:** {inter.author.mention}\n"
                        f"üë• **–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä:** {–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä.mention}\n"
                        f"‚è∞ **–°—Ä–æ–∫:** {—á–∞—Å–æ–≤} —á–∞—Å(–æ–≤)\n"
                        f"üí∞ **–°—É–º–º–∞:** {total_price:,}‚ÇΩ\n"
                        f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    color=disnake.Color.green()
                )
                if car[7]:
                    logs_embed.set_image(url=car[7])
                await logs_channel.send(embed=logs_embed)

            except Exception as e:
                await interaction.edit_original_response(
                    embed=disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=str(e),
                        color=disnake.Color.red()
                    )
                )

        async def decline_callback(interaction: disnake.MessageInteraction):
            if interaction.author != –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä:
                return await interaction.response.send_message("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)

            await interaction.response.defer()

            decline_embed = disnake.Embed(
                title="‚ùå –ê—Ä–µ–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                description=(
                    f"**–í–ª–∞–¥–µ–ª–µ—Ü:** {inter.author.mention}\n"
                    f"**–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä:** {–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä.mention}\n"
                    f"**–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {car[1]} {car[2]} {car[3]}\n"
                    "**–ü—Ä–∏—á–∏–Ω–∞:** –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
                ),
                color=disnake.Color.red()
            )

            await interaction.edit_original_response(embed=decline_embed, view=None)

        accept_button.callback = accept_callback
        decline_button.callback = decline_callback

        view.add_item(accept_button)
        view.add_item(decline_button)

        await inter.edit_original_response(embed=embed, view=view)

    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã: {str(e)}",
            color=disnake.Color.red()
        )
        if not inter.response.is_done():
            await inter.response.send_message(embed=error_embed)
        else:
            await inter.edit_original_response(embed=error_embed)

@garage_commands.sub_command(name="–ø—Ä–æ–¥–∞—Ç—å", description="–ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É")
async def sell_car(
    inter: ApplicationCommandInteraction, 
    car_id: int, 
    –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: disnake.Member, 
    —Ü–µ–Ω–∞: int
):
    """–ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É"""
    try:    
        await inter.response.defer()
        if —Ü–µ–Ω–∞ < 1:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
            
        has_space, total_slots, used_slots = await check_garage_space(–ø–æ–∫—É–ø–∞—Ç–µ–ª—å.id)
        
        if not has_space:
            embed = disnake.Embed(
                title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–∞—Ä–∞–∂–Ω—ã—Ö –º–µ—Å—Ç —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üë§ **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {–ø–æ–∫—É–ø–∞—Ç–µ–ª—å.mention}\n"
                    f"üöó **–ó–∞–Ω—è—Ç–æ –º–µ—Å—Ç:** {used_slots}/{total_slots}\n"
                    f"‚ùó **–£ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥–∞—Ä–∞–∂–Ω—ã—Ö –º–µ—Å—Ç**\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        
        # Check if car exists and belongs to seller
        cursor.execute('''
            SELECT pc.brand, pc.model, pc.config, pc.buyer_id, ac.body_type, 
                   ac.transmission, ac.engine, ac.year, ac.image_data
            FROM purchased_cars pc
            LEFT JOIN available_cars ac ON pc.brand = ac.brand 
                AND pc.model = ac.model AND pc.config = ac.config
            WHERE pc.id = ?
        ''', (car_id,))
        car = cursor.fetchone()

        if not car:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
            
        # Check if car is being rented
        cursor.execute('''
            SELECT * FROM rentcar 
            WHERE car_id = ? AND status = 'active' AND end_time > ?
        ''', (car_id, datetime.now().isoformat()))
        
        rental = cursor.fetchone()
        if rental:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ä–µ–Ω–¥–µ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–∞–Ω\n–î–æ–∂–¥–∏—Ç–µ—Å—å —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã!",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)

        brand, model, config, owner_id, body_type, transmission, engine, year, image_url = car

        if owner_id != inter.author.id:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)

        # Create sale embed
        embed = disnake.Embed(
            title="üöó –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
            color=disnake.Color.blue()
        )

        # Add vehicle information
        embed.add_field(
            name="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
            value=(
                f"**–ú–∞—Ä–∫–∞:** {brand}\n"
                f"**–ú–æ–¥–µ–ª—å:** {model}\n"
                f"**–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:** {config}\n"
                f"**–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {year}\n"
                f"**–¢–∏–ø –∫—É–∑–æ–≤–∞:** {body_type}\n"
                f"**–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è:** {transmission}\n"
                f"**–î–≤–∏–≥–∞—Ç–µ–ª—å:** {engine}\n"
                f"**ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** {car_id}"
            ),
            inline=False
        )

        # Add sale information
        embed.add_field(
            name="üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ",
            value=(
                f"**–ü—Ä–æ–¥–∞–≤–µ—Ü:** {inter.author.mention}\n"
                f"**–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {–ø–æ–∫—É–ø–∞—Ç–µ–ª—å.mention}\n"
                f"**–¶–µ–Ω–∞:** {—Ü–µ–Ω–∞:,}‚ÇΩ"
            ),
            inline=False
        )

        if image_url:
            embed.set_image(url=image_url)

        embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
        embed.timestamp = datetime.now()


        view = disnake.ui.View(timeout=300)  

        # Create accept button
        accept_button = disnake.ui.Button(
            label="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
            style=disnake.ButtonStyle.green,
            custom_id="accept"
        )

        # Create decline button
        decline_button = disnake.ui.Button(
            label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
            style=disnake.ButtonStyle.red,
            custom_id="decline"
        )

        async def accept_callback(interaction: disnake.MessageInteraction):
            if interaction.author != –ø–æ–∫—É–ø–∞—Ç–µ–ª—å:
                return await interaction.response.send_message("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)

            await interaction.response.defer()

            await interaction.edit_original_response(
                embed=disnake.Embed(
                    title="‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏",
                    description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                    color=disnake.Color.yellow()
                ),
                view=None
            )

            try:
                # Check buyer's balance
                bal = unbclient.get_user_bal(1341469479510474813, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.id)
                if bal['cash'] < —Ü–µ–Ω–∞:
                    return await interaction.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                            description="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!",
                            color=disnake.Color.red()
                        )
                    )
                addtoserverpr = await carmanager(inter.author.display_name, "—É–¥–∞–ª–∏—Ç—å", f'{brand} {model}')
                if addtoserverpr == False:
                    error_embed = disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=(
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                        "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞\n"
                                        "üë®‚Äçüíº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.red()
                    )
                    await inter.followup.send(embed=error_embed)
                addtoserverpo = await carmanager(interaction.author.display_name, "–¥–æ–±–∞–≤–∏—Ç—å", f'{brand} {model}')
                if addtoserverpo == False:
                    error_embed = disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=(
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                        "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n"
                                        "üë®‚Äçüíº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.red()
                    )
                    await inter.followup.send(embed=error_embed)        

                # Update car ownership
                cursor.execute('''
                    UPDATE purchased_cars 
                    SET buyer_id = ?, purchase_date = ?
                    WHERE id = ?
                ''', (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å.id, datetime.now().isoformat(), car_id))

                # Transfer money
                new_buyer_bal = bal['cash'] - —Ü–µ–Ω–∞
                unbclient.set_user_bal(1341469479510474813, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.id, cash=new_buyer_bal)

                seller_bal = unbclient.get_user_bal(1341469479510474813, inter.author.id)
                new_seller_bal = seller_bal['cash'] + —Ü–µ–Ω–∞
                unbclient.set_user_bal(1341469479510474813, inter.author.id, cash=new_seller_bal)

                conn.commit()

                success_embed = disnake.Embed(
                    title="‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    color=disnake.Color.green()
                )

                success_embed.add_field(
                    name="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                    value=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –î–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üöó **–ú–∞—Ä–∫–∞:** {brand}\n"
                        f"üìù **–ú–æ–¥–µ–ª—å:** {model}\n" 
                        f"‚öôÔ∏è **–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:** {config}\n"
                        f"üìÖ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {year}\n"
                        f"üîë **ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** {car_id}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    inline=False
                )

                success_embed.add_field(
                    name="üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ",
                    value=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üíé **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {inter.author.mention}\n"
                        f"üõí **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {–ø–æ–∫—É–ø–∞—Ç–µ–ª—å.mention}\n"
                        f"üíµ **–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏:** {—Ü–µ–Ω–∞:,}‚ÇΩ\n"
                        f"‚è∞ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    inline=False
                )

                if image_url:
                    success_embed.set_image(url=image_url)

                # Remove buttons by sending None as view
                await interaction.edit_original_response(embed=success_embed, view=None)
                
                logs_channel = bot.get_channel(1351455653197123665)
                logs_embed = disnake.Embed(
                    title="üîÑ –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    description=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {brand} {model} {config}\n"
                        f"üîë **ID:** {car_id}\n"
                        f"üíé **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {inter.author.mention}\n"
                        f"üõí **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {–ø–æ–∫—É–ø–∞—Ç–µ–ª—å.mention}\n"
                        f"üí∞ **–°—É–º–º–∞:** {—Ü–µ–Ω–∞:,}‚ÇΩ\n"
                        f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    color=disnake.Color.green()
                )
                if image_url:
                    logs_embed.set_image(url=image_url)
                await logs_channel.send(embed=logs_embed)
            except Exception as e:
                await interaction.edit_original_response(
                    embed=disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                        color=disnake.Color.red()
                    )
                )

        async def decline_callback(interaction: disnake.MessageInteraction):
            if interaction.author != –ø–æ–∫—É–ø–∞—Ç–µ–ª—å:
                return await interaction.response.send_message("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)

            await interaction.response.defer()

            decline_embed = disnake.Embed(
                title="‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                description=(
                    f"**–ü—Ä–æ–¥–∞–≤–µ—Ü:** {inter.author.mention}\n"
                    f"**–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {–ø–æ–∫—É–ø–∞—Ç–µ–ª—å.mention}\n"
                    f"**–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {brand} {model} {config}\n"
                    f"**–ü—Ä–∏—á–∏–Ω–∞:** –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
                ),
                color=disnake.Color.red()
            )

            # Remove buttons by sending None as view
            await interaction.edit_original_response(embed=decline_embed, view=None)

        # Set button callbacks
        accept_button.callback = accept_callback
        decline_button.callback = decline_callback

        # Add buttons to view
        view.add_item(accept_button)
        view.add_item(decline_button)

        # Send the sale offer
        await inter.edit_original_response(embed=embed, view=view)

    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}",
            color=disnake.Color.red()
        )
        if not inter.response.is_done():
            await inter.response.send_message(embed=error_embed)
        else:
            await inter.edit_original_response(embed=error_embed)

@garage_commands.sub_command(name="–ø—Ä–æ–¥–∞—Ç—å_–≥–æ—Å", description="–ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É –∑–∞ 75% —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
async def sell_car_to_state(inter: ApplicationCommandInteraction, car_id: int):
    """–ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É –∑–∞ 75% —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        await inter.response.defer()
        
        # Check if car exists and belongs to seller
        cursor.execute('''
            SELECT pc.*, ac.price
            FROM purchased_cars pc
            LEFT JOIN available_cars ac ON pc.brand = ac.brand 
                AND pc.model = ac.model AND pc.config = ac.config
            WHERE pc.id = ? AND pc.buyer_id = ?
        ''', (car_id, inter.author.id))
        car = cursor.fetchone()

        if not car:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞", 
                description="–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
            
        # Check if car is being rented
        cursor.execute('''
            SELECT * FROM rentcar 
            WHERE car_id = ? AND status = 'active' AND end_time > ?
        ''', (car_id, datetime.now().isoformat()))
        
        rental = cursor.fetchone()
        if rental:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ä–µ–Ω–¥–µ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–∞–Ω\n–î–æ–∂–¥–∏—Ç–µ—Å—å —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã!",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        refund_amount = int(car[4] * 0.75)  # car[7] is the price from available_cars
        confirm_embed = disnake.Embed(
            title="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {car[1]} {car[2]} {car[3]}\n"
                f"üí∞ **–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:** {refund_amount:,}‚ÇΩ (75% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏)\n"
                "‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.yellow()
        )

        # Create confirmation buttons
        view = disnake.ui.View(timeout=60)  # 60 seconds timeout
        
        async def confirm_callback(interaction):
            if interaction.user.id != inter.author.id:
                return await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø—Ä–æ–¥–∞–∂–∞!", ephemeral=True)
            addtoserverpr = await carmanager(inter.author.display_name, "—É–¥–∞–ª–∏—Ç—å", f'{car[1]} {car[2]}')
            if addtoserverpr == False:
                error_embed = disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description=(
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                        "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞\n"
                                        "üë®‚Äçüíº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    color=disnake.Color.red()
                )
                await inter.followup.send(embed=error_embed)

            # Update user's balance
            bal = unbclient.get_user_bal(1341469479510474813, inter.author.id)
            new_bal = bal['cash'] + refund_amount
            unbclient.set_user_bal(1341469479510474813, inter.author.id, cash=new_bal)

            # Delete car from database
            cursor.execute('DELETE FROM purchased_cars WHERE id = ?', (car_id,))
            conn.commit()
            success_embed = disnake.Embed(
                title="‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–æ–¥–∞–Ω –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {car[1]} {car[2]} {car[3]}\n"
                    f"üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** {refund_amount:,}‚ÇΩ (75% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏)\n"
                    f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.green()
            )
            await interaction.response.edit_message(embed=success_embed, view=None)
            # Log the transaction
            logs_channel = bot.get_channel(1351455653197123665)
            logs_embed = disnake.Embed(
                title="üè¢ –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {car[1]} {car[2]} {car[3]}\n"
                    f"üë§ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {inter.author.mention}\n"
                    f"üí∞ **–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:** {refund_amount:,}‚ÇΩ\n"
                    f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.blue()
            )
            await logs_channel.send(embed=logs_embed)

        async def cancel_callback(interaction):
            if interaction.user.id != inter.author.id:
                return await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø—Ä–æ–¥–∞–∂–∞!", ephemeral=True)
            
            cancel_embed = disnake.Embed(
                title="‚ùå –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                description="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É",
                color=disnake.Color.red()
            )
            await interaction.response.edit_message(embed=cancel_embed, view=None)

        # Add buttons to view
        confirm_button = disnake.ui.Button(label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=disnake.ButtonStyle.green)
        cancel_button = disnake.ui.Button(label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.red)
        
        confirm_button.callback = confirm_callback
        cancel_button.callback = cancel_callback
        
        view.add_item(confirm_button)
        view.add_item(cancel_button)

        # Send confirmation message
        await inter.edit_original_response(embed=confirm_embed, view=view)

    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {str(e)}",
            color=disnake.Color.red()
        )
        if not inter.response.is_done():
            await inter.response.send_message(embed=error_embed)
        else:
            await inter.edit_original_response(embed=error_embed)

async def check_property_purchase_restrictions(user_id, property_type):
    try:
        cursor.execute('''
            SELECT property_type FROM real_estate 
            WHERE buyer_id = ?
        ''', (user_id,))
        owned_property_types = [row[0] for row in cursor.fetchall()]
        if property_type == "–ì–∞—Ä–∞–∂":
            if not any(p_type in ["–î–æ–º", "–ö–≤–∞—Ä—Ç–∏—Ä–∞"] for p_type in owned_property_types):
                return False, "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–∞—Ä–∞–∂–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–º –∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É"
            elif "–ì–∞—Ä–∞–∂" in owned_property_types:
                return False, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≥–∞—Ä–∞–∂. –í—ã –º–æ–∂–µ—Ç–µ –≤–ª–∞–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º –≥–∞—Ä–∞–∂–æ–º"
        elif property_type == "–ö–≤–∞—Ä—Ç–∏—Ä–∞" and "–ö–≤–∞—Ä—Ç–∏—Ä–∞" in owned_property_types:
            return False, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–ª–∞–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–æ–π"
        elif property_type == "–î–æ–º" and "–î–æ–º" in owned_property_types:
            return False, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –≤–ª–∞–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º –¥–æ–º–æ–º"
        return True, None
    except Exception as e:
        print(f"Error checking property restrictions: {e}")
        return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {str(e)}"

@bot.command()
async def –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å(ctx):
    """Shows available real estate properties"""
    try:
        initial_embed = disnake.Embed(
            title="‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...",
            description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            color=disnake.Color.blue()
        )
        message = await ctx.send(embed=initial_embed)

        # Get all property types
        cursor.execute('SELECT DISTINCT property_type FROM real_estate WHERE buyer_id IS NULL')
        property_types = [row[0] for row in cursor.fetchall()]

        if not property_types:
            embed = disnake.Embed(
                title="üè† –ë–∞–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                description="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                color=disnake.Color.red()
            )
            return await message.edit(embed=embed)

        # Create property type selection menu
        type_select = disnake.ui.Select(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
            options=[disnake.SelectOption(label=prop_type) for prop_type in property_types]
        )

        async def type_callback(interaction):
            if interaction.message.id != message.id:
                return
            
            await interaction.response.defer()
            prop_type = type_select.values[0]

            # Get classes for selected property type
            cursor.execute('SELECT DISTINCT class FROM real_estate WHERE property_type = ? AND buyer_id IS NULL', (prop_type,))
            classes = [row[0] for row in cursor.fetchall()]

            class_select = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                options=[disnake.SelectOption(label=class_) for class_ in classes]
            )

            async def class_callback(inter):
                if inter.message.id != message.id:
                    return
                
                await inter.response.defer()
                selected_class = class_select.values[0]

                # Get properties of selected type and class
                cursor.execute('''
                    SELECT * FROM real_estate 
                    WHERE property_type = ? AND class = ? AND buyer_id IS NULL
                    ORDER BY price
                ''', (prop_type, selected_class))
                properties = cursor.fetchall()

                current_index = 0
                total_properties = len(properties)

                async def show_property(index, interaction):
                    property = properties[index]
                    embed = disnake.Embed(
                        title=f"üè† {property[5]} –∫–ª–∞—Å—Å–∞ {property[4]}",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üìç **–ê–¥—Ä–µ—Å:** {property[2]}\n"
                            f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {property[3]:,}‚ÇΩ\n"
                            f"üìè **–ü–ª–æ—â–∞–¥—å:** {property[7]} –º¬≤\n"
                            f"üöó **–ü–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç:** {property[6]}\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.gold()
                    )

                    if property[8]:  # house photo
                        embed.set_image(url=property[8])
                    if property[9]:  # location photo
                        embed.set_thumbnail(url=property[9])

                    embed.set_footer(text=f"–û–±—ä–µ–∫—Ç {index + 1} –∏–∑ {total_properties}")

                    view = disnake.ui.View(timeout=180)

                    # Navigation buttons
                    prev_button = disnake.ui.Button(
                        style=disnake.ButtonStyle.secondary,
                        label="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
                        disabled=index == 0
                    )
                    next_button = disnake.ui.Button(
                        style=disnake.ButtonStyle.secondary,
                        label="–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂Ô∏è",
                        disabled=index == total_properties - 1
                    )
                     # Check if user can buy this property type
                    can_purchase, error_message = await check_property_purchase_restrictions(
                        interaction.author.id, property[5]
                    )
                    
                    buy_button = disnake.ui.Button(
                        style=disnake.ButtonStyle.green,
                        label="üõí –ö—É–ø–∏—Ç—å",
                        disabled=not can_purchase
                    )
                    
                    # Add tooltip to embed if button is disabled
                    if not can_purchase and error_message:
                        embed.add_field(
                            name="‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏",
                            value=error_message,
                            inline=False
                        )
                    back_button = disnake.ui.Button(
                        style=disnake.ButtonStyle.secondary,
                        label="üîô –ù–∞–∑–∞–¥"
                    )

                    async def prev_callback(b_inter):
                        nonlocal current_index
                        current_index = max(0, current_index - 1)
                        await b_inter.response.defer()
                        await show_property(current_index, b_inter)

                    async def next_callback(b_inter):
                        nonlocal current_index
                        current_index = min(total_properties - 1, current_index + 1)
                        await b_inter.response.defer() 
                        await show_property(current_index, b_inter)

                    async def buy_callback(b_inter):
                        await b_inter.response.defer(ephemeral=True)
                        
                        try:
                            # Check user's balance
                            bal = unbclient.get_user_bal(1341469479510474813, int(b_inter.author.id))
                            if bal['cash'] < property[3]:
                                await b_inter.edit_original_response(
                                    embed=disnake.Embed(
                                        title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                                        description=f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {property[3]:,}‚ÇΩ\n–£ –≤–∞—Å: {bal['cash']:,}‚ÇΩ",
                                        color=disnake.Color.red()
                                    )
                                )
                                return

                            # Update property ownership
                            cursor.execute('''
                                UPDATE real_estate 
                                SET buyer_id = ? 
                                WHERE id = ?
                            ''', (b_inter.author.id, property[0]))

                            # Update user's balance
                            new_bal = bal['cash'] - property[3]
                            unbclient.set_user_bal(1341469479510474813, int(b_inter.author.id), cash=new_bal)
                            
                            conn.commit()

                            success_embed = disnake.Embed(
                                title="‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!",
                                description=(
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                    f"üè† **–¢–∏–ø:** {property[5]}\n"
                                    f"üåü **–ö–ª–∞—Å—Å:** {property[4]}\n"
                                    f"üìç **–ê–¥—Ä–µ—Å:** {property[2]}\n"
                                    f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {property[3]:,}‚ÇΩ\n"
                                    f"üìè **–ü–ª–æ—â–∞–¥—å:** {property[7]} –º¬≤\n"
                                    f"üöó **–ü–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç:** {property[6]}\n\n"
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                                ),
                                color=disnake.Color.green()
                            )
                            
                            if property[8]:
                                success_embed.set_image(url=property[8])

                            await b_inter.edit_original_response(embed=success_embed)
                            await interaction.message.edit(view=None)

                            logs_channel = bot.get_channel(1351455653197123665)
                            purchase_log_embed = disnake.Embed(
                                title="üè† –ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                                description=(
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                    f"üèòÔ∏è **–û–±—ä–µ–∫—Ç:** {property[5]} –∫–ª–∞—Å—Å–∞ {property[4]}\n"
                                    f"üë§ **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {b_inter.author.mention}\n"
                                    f"üìç **–ê–¥—Ä–µ—Å:** {property[2]}\n"
                                    f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {property[3]:,}‚ÇΩ\n"
                                    f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                                ),
                                color=disnake.Color.green()
                            )
                            await logs_channel.send(embed=purchase_log_embed)
                        except Exception as e:
                            await b_inter.edit_original_response(
                                embed=disnake.Embed(
                                    title="‚ùå –û—à–∏–±–∫–∞",
                                    description=str(e),
                                    color=disnake.Color.red()
                                )
                            )

                    async def back_callback(b_inter):
                        embed = disnake.Embed(
                            title="üè† –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                            description=(
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                "üèòÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n"
                                "‚ú® –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –∏–º–µ–µ—Ç —Å–≤–æ–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            ),
                            color=disnake.Color.blue()
                        )
                        view = disnake.ui.View(timeout=180)
                        view.add_item(class_select)
                        view.add_item(back_to_types)
                        await b_inter.response.edit_message(embed=embed, view=view)

                    prev_button.callback = prev_callback
                    next_button.callback = next_callback
                    buy_button.callback = buy_callback
                    back_button.callback = back_callback

                    view.add_item(prev_button)
                    view.add_item(next_button)
                    view.add_item(buy_button)
                    view.add_item(back_button)

                    await interaction.edit_original_response(embed=embed, view=view)

                back_to_types = disnake.ui.Button(
                    style=disnake.ButtonStyle.secondary,
                    label="üè† –ö —Å–ø–∏—Å–∫—É —Ç–∏–ø–æ–≤"
                )

                async def back_to_types_callback(b_inter):
                    embed = disnake.Embed(
                        title="üè† –ë–∞–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            "üèòÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n"
                            "‚ú® –£ –Ω–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ª—é–±–æ–≥–æ –±—é–¥–∂–µ—Ç–∞\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.blue()
                    )
                    view = disnake.ui.View(timeout=180)
                    view.add_item(type_select)
                    await b_inter.response.edit_message(embed=embed, view=view)

                back_to_types.callback = back_to_types_callback

                await show_property(current_index, inter)

            class_select.callback = class_callback

            embed = disnake.Embed(
                title="üè† –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    "üèòÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n"
                    "‚ú® –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –∏–º–µ–µ—Ç —Å–≤–æ–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.blue()
            )
            view = disnake.ui.View(timeout=180)
            view.add_item(class_select)
            await interaction.edit_original_response(embed=embed, view=view)

        type_select.callback = type_callback

        embed = disnake.Embed(
            title="üè† –ë–∞–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üèòÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n"
                "‚ú® –£ –Ω–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ª—é–±–æ–≥–æ –±—é–¥–∂–µ—Ç–∞\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.blue()
        )
        view = disnake.ui.View(timeout=180)
        view.add_item(type_select)
        await message.edit(embed=embed, view=view)

    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            color=disnake.Color.red()
        )
        await ctx.send(embed=error_embed)

@bot.slash_command(
    name="–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
    description="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é",
    guild_ids=[1341469479510474813]
)
async def real_estate(inter: disnake.ApplicationCommandInteraction):
    """Group command for real estate management"""
    pass

@real_estate.sub_command(
    name="–º–æ—è",
    description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
)
async def my_property(inter: disnake.ApplicationCommandInteraction):
    """Shows all real estate owned by the user with pagination"""
    try:
        await inter.response.defer()
        
        # Get all properties owned by the user
        cursor.execute('''
            SELECT * FROM real_estate 
            WHERE buyer_id = ?
            ORDER BY property_type, class
        ''', (inter.author.id,))
        properties = cursor.fetchall()

        if not properties:
            embed = disnake.Embed(
                title="üè† –ú–æ—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
                description="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)

        current_page = 0
        total_pages = len(properties)

        async def show_property(page_num, interaction=None):
            property = properties[page_num]
            embed = disnake.Embed(
                title=f"üè† {property[5]} –∫–ª–∞—Å—Å–∞ {property[4]}",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üîë **ID:** {property[0]}\n"
                    f"üìç **–ê–¥—Ä–µ—Å:** {property[2]}\n"
                    f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {property[3]:,}‚ÇΩ\n"
                    f"üìè **–ü–ª–æ—â–∞–¥—å:** {property[7]} –º¬≤\n"
                    f"üöó **–ü–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç:** {property[6]}\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.gold()
            )

            if property[8]:  # house photo
                embed.set_image(url=property[8])
            if property[9]:  # location photo
                embed.set_thumbnail(url=property[9])

            embed.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} –∏–∑ {total_pages}")
            embed.timestamp = datetime.now()

            # Create navigation buttons
            view = disnake.ui.View(timeout=180)

            prev_button = disnake.ui.Button(
                style=disnake.ButtonStyle.secondary,
                label="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
                disabled=page_num == 0
            )
            next_button = disnake.ui.Button(
                style=disnake.ButtonStyle.secondary,
                label="–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂Ô∏è",
                disabled=page_num == total_pages - 1
            )

            # Add upgrade button for garage
            if property[5] == "–ì–∞—Ä–∞–∂":
                cursor.execute('SELECT slots FROM garage_slots WHERE id = ?', (property[0],))
                garage_result = cursor.fetchone()
                current_slots = garage_result[0] if garage_result else 0

                if current_slots < 4:  
                    upgrade_button = disnake.ui.Button(
                        style=disnake.ButtonStyle.green,
                        label="‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –≥–∞—Ä–∞–∂",
                        custom_id="upgrade_garage"
                    )

                    async def upgrade_callback(b_inter):
                        if b_inter.user.id != inter.author.id:
                            return await b_inter.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –≥–∞—Ä–∞–∂!", ephemeral=True)

                        await b_inter.response.defer()

                        try:
                            cost = 0
                            new_slots = 0
                            if current_slots == 1:
                                new_slots = 2
                                cost = 700000
                            elif current_slots == 2:
                                new_slots = 4
                                cost = 2500000

                            bal = unbclient.get_user_bal(1341469479510474813, inter.author.id)
                            if bal['cash'] < cost:
                                return await b_inter.followup.send(
                                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è: {cost:,}‚ÇΩ", 
                                    ephemeral=True
                                )

                            if garage_result:
                                cursor.execute(
                                    'UPDATE real_estate SET garage_slots = ? WHERE id = ?',
                                    (new_slots, property[0])
                                )

                            new_bal = bal['cash'] - cost
                            unbclient.set_user_bal(1341469479510474813, inter.author.id, cash=new_bal)


                            if new_slots == 4:
                                cursor.execute(
                                    'INSERT INTO medals (user_id, medal_type, award_date) VALUES (?, "–ì–∞—Ä–º–æ–Ω–∏—è –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞", ?)',
                                    (inter.author.id, datetime.now().isoformat())
                                )


                                guild = b_inter.guild
                                role = disnake.utils.get(guild.roles, name='–ú–µ–¥–∞–ª—å "–ì–∞—Ä–º–æ–Ω–∏—è –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"')
                                if role:
                                    await b_inter.author.add_roles(role)
                                    

                                    medal_embed = disnake.Embed(
                                        title="üèÖ –ü–æ–ª—É—á–µ–Ω–∞ –º–µ–¥–∞–ª—å!",
                                        description=(
                                            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏:\n"
                                            "**–ú–µ–¥–∞–ª—å ¬´–ì–∞—Ä–º–æ–Ω–∏—è –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞¬ª**\n"
                                            "–ó–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –≥–∞—Ä–∞–∂–∞"
                                        ),
                                        color=disnake.Color.gold()
                                    )
                                    await b_inter.author.send(embed=medal_embed)

                            conn.commit()


                            success_embed = disnake.Embed(
                                title="‚úÖ –ì–∞—Ä–∞–∂ —É–ª—É—á—à–µ–Ω!",
                                description=(
                                    f"–£—Ä–æ–≤–µ–Ω—å –≥–∞—Ä–∞–∂–∞ –ø–æ–≤—ã—à–µ–Ω!\n"
                                    f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤: {new_slots}\n"
                                    f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost:,}‚ÇΩ"
                                ),
                                color=disnake.Color.green()
                            )
                            await b_inter.followup.send(embed=success_embed)
                            await show_property(page_num, b_inter)

                        except Exception as e:
                            await b_inter.followup.send(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)

                    upgrade_button.callback = upgrade_callback
                    view.add_item(upgrade_button)

            async def prev_callback(b_inter):
                nonlocal current_page
                if b_inter.user.id != inter.author.id:
                    return await b_inter.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à —Å–ø–∏—Å–æ–∫!", ephemeral=True)
                current_page = max(0, current_page - 1)
                await b_inter.response.defer()
                await show_property(current_page, b_inter)

            async def next_callback(b_inter):
                nonlocal current_page
                if b_inter.user.id != inter.author.id:
                    return await b_inter.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à —Å–ø–∏—Å–æ–∫!", ephemeral=True)
                current_page = min(total_pages - 1, current_page + 1)
                await b_inter.response.defer()
                await show_property(current_page, b_inter)

            prev_button.callback = prev_callback
            next_button.callback = next_callback

            view.add_item(prev_button)
            view.add_item(next_button)

            if interaction:
                await interaction.edit_original_response(embed=embed, view=view)
            else:
                await inter.edit_original_response(embed=embed, view=view)

        await show_property(current_page)

    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

@real_estate.sub_command(
    name="–∏–≥—Ä–æ–∫–∞",
    description="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞"
)
@commands.has_any_role('–°–º–æ—Ç—Ä—è—â–∏–π –∑–∞ RolePlay','–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', '–ì–ò–ë–î–î', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
async def player_property(
    inter: disnake.ApplicationCommandInteraction,
    –∏–≥—Ä–æ–∫: disnake.Member = commands.Param(description="–ò–≥—Ä–æ–∫, —á—å—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å")
):
    """Shows all real estate owned by the specified player"""
    try:
        await inter.response.defer()
        
        # Get all properties owned by the specified user
        cursor.execute('''
            SELECT * FROM real_estate 
            WHERE buyer_id = ?
            ORDER BY property_type, class
        ''', (–∏–≥—Ä–æ–∫.id,))
        properties = cursor.fetchall()

        if not properties:
            embed = disnake.Embed(
                title="üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞",
                description=f"–£ {–∏–≥—Ä–æ–∫.mention} –Ω–µ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)

        # Create embed for each property
        for property in properties:
            embed = disnake.Embed(
                title=f"üè† {property[5]} –∫–ª–∞—Å—Å–∞ {property[4]}",
                description=(
                    f"üë§ **–í–ª–∞–¥–µ–ª–µ—Ü:** {–∏–≥—Ä–æ–∫.mention}\n"
                    f"üîë **ID:** {property[0]}\n"
                    f"üìç **–ê–¥—Ä–µ—Å:** {property[2]}\n"
                    f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {property[3]:,}‚ÇΩ\n"
                    f"üìè **–ü–ª–æ—â–∞–¥—å:** {property[7]} –º¬≤\n"
                    f"üöó **–ü–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç:** {property[6]}\n\n"
                ),
                color=disnake.Color.gold()
            )

            # Add property photos if available
            if property[8]:  # house photo
                embed.set_image(url=property[8])
            if property[9]:  # location photo
                embed.set_thumbnail(url=property[9])

            embed.timestamp = datetime.now()
            await inter.followup.send(embed=embed)

        # Send summary message
        summary = disnake.Embed(
            title="üìã –°–≤–æ–¥–∫–∞",
            description=f"–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —É {–∏–≥—Ä–æ–∫.display_name}: {len(properties)}",
            color=disnake.Color.green()
        )
        await inter.followup.send(embed=summary)

    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

@real_estate.sub_command(
    name="–æ–±—ä–µ–∫—Ç",
    description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
)
async def property_info(
    inter: disnake.ApplicationCommandInteraction,
    id: int = commands.Param(description="ID –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
):
    """Shows detailed information about a specific property by ID"""
    try:
        await inter.response.defer()
        
        # Get property details from database
        cursor.execute('SELECT * FROM real_estate WHERE id = ?', (id,))
        property = cursor.fetchone()

        if not property:
            embed = disnake.Embed(
                title="‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                description="–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)

        # Create embed with property information
        embed = disnake.Embed(
            title=f"üè† {property[5]} –∫–ª–∞—Å—Å–∞ {property[4]}",
            description=(
                f"üîë **ID:** {property[0]}\n"
                f"üìç **–ê–¥—Ä–µ—Å:** {property[2]}\n"
                f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {property[3]:,}‚ÇΩ\n"
                f"üìè **–ü–ª–æ—â–∞–¥—å:** {property[7]} –º¬≤\n"
                f"üöó **–ü–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç:** {property[6]}\n"
            ),
            color=disnake.Color.blue()
        )

        # Add owner information if property is owned
        if property[1]:  # buyer_id
            owner = await bot.fetch_user(property[1])
            embed.add_field(
                name="üë§ –í–ª–∞–¥–µ–ª–µ—Ü",
                value=f"{owner.mention}",
                inline=False
            )

        # Add photos if available
        if property[8]:  # house photo
            embed.set_image(url=property[8])
        if property[9]:  # location photo
            embed.set_thumbnail(url=property[9])

        embed.set_footer(text="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        embed.timestamp = datetime.now()

        await inter.edit_original_response(embed=embed)

    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

@real_estate.sub_command(
    name="–ø—Ä–æ–¥–∞—Ç—å_–∏–≥—Ä–æ–∫—É",
    description="–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É"
)
async def sell_to_player(
    inter: disnake.ApplicationCommandInteraction,
    id: int = commands.Param(description="ID –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"),
    –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: disnake.Member = commands.Param(description="–ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–¥–∞—ë—Ç—Å—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"),
    —Ü–µ–Ω–∞: int = commands.Param(description="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏")
):
    """Command to sell a property to another player"""
    try:
        await inter.response.defer()
        
        # Check if property exists and belongs to seller
        cursor.execute('''
            SELECT * FROM real_estate 
            WHERE id = ? AND buyer_id = ?
        ''', (id, inter.author.id))
        property = cursor.fetchone()
        
        if —Ü–µ–Ω–∞ < 1:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
            
        if not property:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)

        # Create sale embed
        embed = disnake.Embed(
            title="üè† –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
            color=disnake.Color.blue()
        )

        # Add property information
        embed.add_field(
            name="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ",
            value=(
                f"**–¢–∏–ø:** {property[5]}\n"
                f"**–ö–ª–∞—Å—Å:** {property[4]}\n"
                f"**–ê–¥—Ä–µ—Å:** {property[2]}\n"
                f"**–ü–ª–æ—â–∞–¥—å:** {property[7]} –º¬≤\n"
                f"**–ü–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç:** {property[6]}\n"
                f"**ID –æ–±—ä–µ–∫—Ç–∞:** {property[0]}"
            ),
            inline=False
        )

        # Add sale information
        embed.add_field(
            name="üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ",
            value=(
                f"**–ü—Ä–æ–¥–∞–≤–µ—Ü:** {inter.author.mention}\n"
                f"**–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {–ø–æ–∫—É–ø–∞—Ç–µ–ª—å.mention}\n"
                f"**–¶–µ–Ω–∞:** {—Ü–µ–Ω–∞:,}‚ÇΩ"
            ),
            inline=False
        )

        if property[8]:  # house photo
            embed.set_image(url=property[8])
        if property[9]:  # location photo
            embed.set_thumbnail(url=property[9])

        embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
        embed.timestamp = datetime.now()

        # Create buttons view
        view = disnake.ui.View(timeout=300)  # 5 minutes timeout

        # Create accept button
        accept_button = disnake.ui.Button(
            label="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
            style=disnake.ButtonStyle.green,
            custom_id="accept"
        )

        # Create decline button
        decline_button = disnake.ui.Button(
            label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            style=disnake.ButtonStyle.red,
            custom_id="decline"
        )

        async def accept_callback(interaction: disnake.MessageInteraction):
            if interaction.author != –ø–æ–∫—É–ø–∞—Ç–µ–ª—å:
                return await interaction.response.send_message("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)

            await interaction.response.defer()

            try:
                # Check buyer's balance
                bal = unbclient.get_user_bal(1341469479510474813, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.id)
                if bal['cash'] < —Ü–µ–Ω–∞:
                    return await interaction.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                            description=f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {—Ü–µ–Ω–∞:,}‚ÇΩ\n–£ –≤–∞—Å: {bal['cash']:,}‚ÇΩ",
                            color=disnake.Color.red()
                        )
                    )

                # Update property ownership
                cursor.execute('''
                    UPDATE real_estate 
                    SET buyer_id = ? 
                    WHERE id = ?
                ''', (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å.id, id))

                # Transfer money
                new_buyer_bal = bal['cash'] - —Ü–µ–Ω–∞
                unbclient.set_user_bal(1341469479510474813, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.id, cash=new_buyer_bal)

                seller_bal = unbclient.get_user_bal(1341469479510474813, inter.author.id)
                new_seller_bal = seller_bal['cash'] + —Ü–µ–Ω–∞
                unbclient.set_user_bal(1341469479510474813, inter.author.id, cash=new_seller_bal)

                conn.commit()

                success_embed = disnake.Embed(
                    title="‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    description=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üè† **–û–±—ä–µ–∫—Ç:** {property[5]} –∫–ª–∞—Å—Å–∞ {property[4]}\n"
                        f"üìç **–ê–¥—Ä–µ—Å:** {property[2]}\n"
                        f"üí∞ **–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏:** {—Ü–µ–Ω–∞:,}‚ÇΩ\n"
                        f"üë§ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {inter.author.mention}\n"
                        f"üõí **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {–ø–æ–∫—É–ø–∞—Ç–µ–ª—å.mention}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    color=disnake.Color.green()
                )

                if property[8]:
                    success_embed.set_image(url=property[8])

                await interaction.edit_original_response(embed=success_embed, view=None)

                # Log the transaction
                logs_channel = bot.get_channel(1351455653197123665)
                logs_embed = disnake.Embed(
                    title="üè† –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                    description=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üèòÔ∏è **–û–±—ä–µ–∫—Ç:** {property[5]} –∫–ª–∞—Å—Å–∞ {property[4]}\n"
                        f"üìç **–ê–¥—Ä–µ—Å:** {property[2]}\n"
                        f"üí∞ **–°—É–º–º–∞:** {—Ü–µ–Ω–∞:,}‚ÇΩ\n"
                        f"üë§ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {inter.author.mention}\n"
                        f"üõí **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {–ø–æ–∫—É–ø–∞—Ç–µ–ª—å.mention}\n"
                        f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    color=disnake.Color.green()
                )
                if property[8]:
                    logs_embed.set_image(url=property[8])
                await logs_channel.send(embed=logs_embed)

            except Exception as e:
                await interaction.edit_original_response(
                    embed=disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=str(e),
                        color=disnake.Color.red()
                    )
                )

        async def decline_callback(interaction: disnake.MessageInteraction):
            if interaction.author != –ø–æ–∫—É–ø–∞—Ç–µ–ª—å:
                return await interaction.response.send_message("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)

            await interaction.response.defer()

            decline_embed = disnake.Embed(
                title="‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                description=(
                    f"**–ü—Ä–æ–¥–∞–≤–µ—Ü:** {inter.author.mention}\n"
                    f"**–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {–ø–æ–∫—É–ø–∞—Ç–µ–ª—å.mention}\n"
                    f"**–û–±—ä–µ–∫—Ç:** {property[5]} –∫–ª–∞—Å—Å–∞ {property[4]}\n"
                    f"**–ü—Ä–∏—á–∏–Ω–∞:** –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
                ),
                color=disnake.Color.red()
            )

            await interaction.edit_original_response(embed=decline_embed, view=None)

        # Set button callbacks
        accept_button.callback = accept_callback
        decline_button.callback = decline_callback

        # Add buttons to view
        view.add_item(accept_button)
        view.add_item(decline_button)

        # Send the sale offer
        await inter.edit_original_response(embed=embed, view=view)

    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

@real_estate.sub_command(
    name="–ø—Ä–æ–¥–∞—Ç—å_–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É",
    description="–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É"
)
async def sell_to_state(
    inter: disnake.ApplicationCommandInteraction,
    id: int = commands.Param(description="ID –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
):
    """Command to sell a property to the state (removes owner but keeps the record)"""
    try:
        await inter.response.defer()
        
        # Check if property exists and belongs to seller
        cursor.execute('''
            SELECT * FROM real_estate 
            WHERE id = ? AND buyer_id = ?
        ''', (id, inter.author.id))
        property = cursor.fetchone()

        if not property:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)

        # Calculate refund amount (75% of original price)
        refund_amount = int(property[3] * 0.75)  # property[3] is the price

        # Create confirmation embed
        confirm_embed = disnake.Embed(
            title="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üè† **–û–±—ä–µ–∫—Ç:** {property[5]} –∫–ª–∞—Å—Å–∞ {property[4]}\n"
                f"üìç **–ê–¥—Ä–µ—Å:** {property[2]}\n"
                f"üí∞ **–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:** {refund_amount:,}‚ÇΩ (75% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏)\n"
                "‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.yellow()
        )

        if property[8]:  # Add property photo if available
            confirm_embed.set_image(url=property[8])

        # Create confirmation buttons
        view = disnake.ui.View(timeout=60)  # 60 seconds timeout

        async def confirm_callback(interaction):
            if interaction.user.id != inter.author.id:
                return await interaction.response.send_message(
                    "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø—Ä–æ–¥–∞–∂–∞!", ephemeral=True
                )

            try:
                # Update user's balance
                bal = unbclient.get_user_bal(1341469479510474813, inter.author.id)
                new_bal = bal['cash'] + refund_amount
                unbclient.set_user_bal(1341469479510474813, inter.author.id, cash=new_bal)

                # Remove owner from property
                cursor.execute(
                    'UPDATE real_estate SET buyer_id = NULL WHERE id = ?', 
                    (id,)
                )
                conn.commit()

                success_embed = disnake.Embed(
                    title="‚úÖ –û–±—ä–µ–∫—Ç –ø—Ä–æ–¥–∞–Ω –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É",
                    description=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üè† **–û–±—ä–µ–∫—Ç:** {property[5]} –∫–ª–∞—Å—Å–∞ {property[4]}\n"
                        f"üìç **–ê–¥—Ä–µ—Å:** {property[2]}\n"
                        f"üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** {refund_amount:,}‚ÇΩ\n"
                        f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    color=disnake.Color.green()
                )

                if property[8]:
                    success_embed.set_image(url=property[8])

                await interaction.response.edit_message(embed=success_embed, view=None)

                # Log the transaction
                logs_channel = bot.get_channel(1351455653197123665)
                logs_embed = disnake.Embed(
                    title="üè¢ –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É",
                    description=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üè† **–û–±—ä–µ–∫—Ç:** {property[5]} –∫–ª–∞—Å—Å–∞ {property[4]}\n"
                        f"üìç **–ê–¥—Ä–µ—Å:** {property[2]}\n"
                        f"üë§ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {inter.author.mention}\n"
                        f"üí∞ **–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:** {refund_amount:,}‚ÇΩ\n"
                        f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    color=disnake.Color.blue()
                )
                if property[8]:
                    logs_embed.set_image(url=property[8])
                await logs_channel.send(embed=logs_embed)

            except Exception as e:
                await interaction.response.send_message(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}", 
                    ephemeral=True
                )

        async def cancel_callback(interaction):
            if interaction.user.id != inter.author.id:
                return await interaction.response.send_message(
                    "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø—Ä–æ–¥–∞–∂–∞!", ephemeral=True
                )

            cancel_embed = disnake.Embed(
                title="‚ùå –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                description="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É",
                color=disnake.Color.red()
            )
            await interaction.response.edit_message(embed=cancel_embed, view=None)

        # Add buttons to view
        confirm_button = disnake.ui.Button(
            label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
            style=disnake.ButtonStyle.green
        )
        cancel_button = disnake.ui.Button(
            label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
            style=disnake.ButtonStyle.red
        )

        confirm_button.callback = confirm_callback
        cancel_button.callback = cancel_callback

        view.add_item(confirm_button)
        view.add_item(cancel_button)

        # Send confirmation message
        await inter.edit_original_response(embed=confirm_embed, view=view)

    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

async def check_garage_space(user_id):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥–∞—Ä–∞–∂–Ω—ã—Ö –º–µ—Å—Ç
    tuple: (bool, int, int) - (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–µ—Å—Ç, –≤—Å–µ–≥–æ –º–µ—Å—Ç, –∑–∞–Ω—è—Ç–æ –º–µ—Å—Ç)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT COUNT(*) FROM purchased_cars WHERE buyer_id = ?', (user_id,))
        owned_cars = cursor.fetchone()[0] or 0
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–∞—Ä–∞–∂–Ω—ã–µ –º–µ—Å—Ç–∞
        cursor.execute('SELECT slots FROM garage_slots WHERE owner_id = ?', (user_id,))
        garage_result = cursor.fetchone()
        additional_slots = garage_result[0] if garage_result else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –æ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        cursor.execute('SELECT SUM(garage_slots) FROM real_estate WHERE buyer_id = ?', (user_id,))
        estate_slots = cursor.fetchone()[0] or 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è
        cursor.execute('''
            SELECT COUNT(*) FROM hotel_bookings
            WHERE user_id = ? AND end_date > ?
        ''', (user_id, datetime.now().isoformat()))
        has_hotel = cursor.fetchone()[0] > 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º 1 –º–µ—Å—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è
        hotel_slots = 1 if has_hotel else 0
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
        total_slots = additional_slots + estate_slots + hotel_slots
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
        has_space = owned_cars < total_slots
        
        return (has_space, total_slots, owned_cars)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–∞—Ä–∞–∂–Ω—ã—Ö –º–µ—Å—Ç: {e}")
        return (False, 0, 0)

@bot.command()
async def –æ—Ç–µ–ª—å(ctx, days: int = None):
    """Command to rent a hotel room for a specified number of days"""
    try:
        # Fixed hotel price
        price_per_day = 10000
        hotel_name = "–ì—Ä–∞–Ω–¥ –û—Ç–µ–ª—å"
        hotel_description = "–ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–π –æ—Ç–µ–ª—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞ —Å –≤–∏–¥–æ–º –Ω–∞ –ø–∞—Ä–∫"
        hotel_location = "—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 15"
        hotel_image = "https://cdn.discordapp.com/attachments/1344985538670759996/1361428256506773534/22.png?ex=67ff611e&is=67fe0f9e&hm=980a5ab500787e26e2554772f3107fb24f61b35cf1c091fa78b827610644c1c9&"  # Replace with actual image URL
        
        if days is None:
            # Show hotel information
            embed = disnake.Embed(
                title=f"üè® {hotel_name}",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üìç **–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {hotel_location}\n"
                    f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {price_per_day:,}‚ÇΩ –≤ —Å—É—Ç–∫–∏\n\n"
                    f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {hotel_description}\n\n"
                    "–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                    "`!–æ—Ç–µ–ª—å [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π]`\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.blue()
            )
            
            if hotel_image:
                embed.set_image(url=hotel_image)
            
            await ctx.send(embed=embed)
            
        else:
            # Direct booking with specified days
            if days < 1 or days > 30:
                embed = disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30",
                    color=disnake.Color.red()
                )
                return await ctx.send(embed=embed)
            
            # Calculate total price
            total_price = price_per_day * days
            
            # Create confirmation view
            confirm_view = disnake.ui.View(timeout=60)
            
            confirm_button = disnake.ui.Button(
                style=disnake.ButtonStyle.green,
                label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
            )
            cancel_button = disnake.ui.Button(
                style=disnake.ButtonStyle.red,
                label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
            )
            
            async def confirm_callback(interaction):
                if interaction.user.id != ctx.author.id:
                    return await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –±—Ä–æ–Ω—å!", ephemeral=True)
                
                await interaction.response.defer()
                
                try:
                    # Check user's balance
                    bal = unbclient.get_user_bal(1341469479510474813, ctx.author.id)
                    if bal['cash'] < total_price:
                        return await interaction.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                                description=f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {total_price:,}‚ÇΩ\n–£ –≤–∞—Å: {bal['cash']:,}‚ÇΩ",
                                color=disnake.Color.red()
                            ),
                            view=None
                        )
                    
                    # Calculate booking dates
                    start_date = datetime.now()
                    end_date = start_date + timedelta(days=days)
                    
                    # Deduct payment from user's balance
                    new_bal = bal['cash'] - total_price
                    unbclient.set_user_bal(1341469479510474813, ctx.author.id, cash=new_bal)
                    
                    # Record booking in database
                    cursor.execute('''
                        INSERT INTO hotel_bookings 
                        (user_id, start_date, end_date, days, total_price)
                        VALUES (?, ?, ?, ?, ?)
                    ''', (
                        ctx.author.id, start_date.isoformat(), 
                        end_date.isoformat(), days, total_price
                    ))
                    conn.commit()
                    
                    # Create success embed
                    success_embed = disnake.Embed(
                        title="‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üè® **–û—Ç–µ–ª—å:** {hotel_name}\n"
                            f"üìç **–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {hotel_location}\n"
                            f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
                            f"‚è±Ô∏è **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:** {days}\n"
                            f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {total_price:,}‚ÇΩ\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.green()
                    )
                    
                    if hotel_image:
                        success_embed.set_image(url=hotel_image)
                    
                    await interaction.edit_original_response(embed=success_embed, view=None)
                    
                    # Log the booking
                    logs_channel = bot.get_channel(1351455653197123665)
                    log_embed = disnake.Embed(
                        title="üè® –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è",
                        description=(
                            f"üë§ **–ò–≥—Ä–æ–∫:** {ctx.author.mention}\n"
                            f"üè® **–û—Ç–µ–ª—å:** {hotel_name}\n"
                            f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
                            f"‚è±Ô∏è **–î–Ω–µ–π:** {days}\n"
                            f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {total_price:,}‚ÇΩ\n"
                            f"üìÜ **–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                        ),
                        color=disnake.Color.blue()
                    )
                    await logs_channel.send(embed=log_embed)
                    
                except Exception as e:
                    error_embed = disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}",
                        color=disnake.Color.red()
                    )
                    await interaction.edit_original_response(embed=error_embed, view=None)
            
            async def cancel_callback(interaction):
                if interaction.user.id != ctx.author.id:
                    return await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –±—Ä–æ–Ω—å!", ephemeral=True)
                
                cancel_embed = disnake.Embed(
                    title="‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                    description="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è",
                    color=disnake.Color.red()
                )
                await interaction.response.edit_message(embed=cancel_embed, view=None)
            
            confirm_button.callback = confirm_callback
            cancel_button.callback = cancel_callback
            
            confirm_view.add_item(confirm_button)
            confirm_view.add_item(cancel_button)
            
            # Create confirmation embed
            confirm_embed = disnake.Embed(
                title="üè® –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üè® **–û—Ç–µ–ª—å:** {hotel_name}\n"
                    f"üìç **–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {hotel_location}\n"
                    f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {days} –¥–Ω–µ–π\n"
                    f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {price_per_day:,}‚ÇΩ √ó {days} = {total_price:,}‚ÇΩ\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.gold()
            )
            
            if hotel_image:
                confirm_embed.set_image(url=hotel_image)
            
            await ctx.send(embed=confirm_embed, view=confirm_view)
    
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            color=disnake.Color.red()
        )
        await ctx.send(embed=error_embed)

@bot.command()
async def –º–æ–π_–æ—Ç–µ–ª—å(ctx):
    """Shows current hotel booking for the user"""
    try:
        # Get active booking for the user
        cursor.execute('''
            SELECT * FROM hotel_bookings
            WHERE user_id = ? AND end_date > ?
        ''', (ctx.author.id, datetime.now().isoformat()))
        
        booking = cursor.fetchone()
        
        if not booking:
            embed = disnake.Embed(
                title="üè® –ú–æ–π –æ—Ç–µ–ª—å",
                description="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è",
                color=disnake.Color.red()
            )
            return await ctx.send(embed=embed)
        
        # Create embed with booking information
        booking_id, user_id, start_date, end_date, days, total_price = booking
        
        start_date_dt = datetime.fromisoformat(start_date)
        end_date_dt = datetime.fromisoformat(end_date)
        
        # Calculate remaining time
        now = datetime.now()
        time_remaining = end_date_dt - now
        days_remaining = time_remaining.days
        hours_remaining = time_remaining.seconds // 3600
        
        embed = disnake.Embed(
            title="üè® –ú–æ–π –æ—Ç–µ–ª—å",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {start_date_dt.strftime('%d.%m.%Y')} - {end_date_dt.strftime('%d.%m.%Y')}\n"
                f"‚è±Ô∏è **–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–Ω–µ–π:** {days}\n"
                f"‚åõ **–û—Å—Ç–∞–ª–æ—Å—å:** {days_remaining}–¥ {hours_remaining}—á\n"
                f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {total_price:,}‚ÇΩ\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.blue()
        )
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}",
            color=disnake.Color.red()
        )
        await ctx.send(embed=error_embed)
@tasks.loop(minutes=1)
async def check_hotel_bookings():
    try:
        # Get all active bookings that have expired
        cursor.execute('''
            SELECT * FROM hotel_bookings 
            WHERE end_date < ?
        ''', (datetime.now().isoformat(),))
        
        expired_bookings = cursor.fetchall()
        
        for booking in expired_bookings:
            booking_id, user_id, start_date, end_date, days, total_price = booking
            
            # Delete expired booking
            cursor.execute('DELETE FROM hotel_bookings WHERE id = ?', (booking_id,))
            conn.commit()
            
            # Notify user if needed
            try:
                user = await bot.fetch_user(user_id)
                if user:
                    embed = disnake.Embed(
                        title="üè® –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                        description=(
                            "–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
                            f"–ü–µ—Ä–∏–æ–¥: {datetime.fromisoformat(start_date).strftime('%d.%m.%Y')} - "
                            f"{datetime.fromisoformat(end_date).strftime('%d.%m.%Y')}"
                        ),
                        color=disnake.Color.blue()
                    )
                    await user.send(embed=embed)
            except Exception as e:
                print(f"Failed to notify user about hotel booking expiration: {e}")
                
    except Exception as e:
        print(f"Error in hotel booking check task: {e}")

@tasks.loop(minutes=30)
async def check_rentals():
    try:
        # Get all active rentals
        cursor.execute('''
            SELECT car_id, renter_id, end_time 
            FROM rentcar 
            WHERE status = 'active'
        ''')
        active_rentals = cursor.fetchall()
        
        current_time = datetime.now()
        
        for rental in active_rentals:
            car_id, renter_id, end_time = rental
            end_time = datetime.fromisoformat(end_time)
            
            if current_time > end_time:
                renter = await bot.fetch_user(renter_id)
                # Update rental status to expired
                cursor.execute('''
                    UPDATE rentcar 
                    SET status = 'expired' 
                    WHERE car_id = ? AND renter_id = ? AND status = 'active'
                ''', (car_id, renter_id))
                conn.commit()
                cursor.execute('''SELECT brand, model FROM purchased_cars WHERE id=?''',(car_id,))
                brandmodel = cursor.fetchone()
                addtoserverpr = await carmanager(renter.display_name, "—É–¥–∞–ª–∏—Ç—å", f'{brandmodel[0]} {brandmodel[1]}')
                if addtoserverpr == False:
                    error_embed = disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=(
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                        "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞\n"
                                        "üë®‚Äçüíº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.red()
                    )
                await ctx.send(embed=error_embed)
                # Notify users if needed
                try:
                    if renter:
                        embed = disnake.Embed(
                            title="üöó –ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                            description=f"–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è (ID: {car_id}) –∏—Å—Ç–µ–∫",
                            color=disnake.Color.red()
                        )
                        await renter.send(embed=embed)
                except Exception as e:
                    print(f"Failed to notify user about rental expiration: {e}")
                    
    except Exception as e:
        print(f"Error in rental check task: {e}")

@tasks.loop(minutes=2)
async def check_server_status():
    """Check server player count and automatically enable/disable job system"""
    try:
        download_file_from_server()
        
        script_dir = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(script_dir, 'latest_players.json')
                
        with open(file_path, 'r', encoding='utf-8') as f:
            player_data = json.load(f)
            
        if isinstance(player_data, dict) and "playerCount" in player_data and "players" in player_data:
            total_players = player_data["playerCount"]
            players_dict = player_data["players"]
            
            moderator_count = 0
            if isinstance(players_dict, dict):
                for player_key, player_info in players_dict.items():
                    player_name = player_info.get("name", "")
                    if player_name in BEAMMP_MODERATORS:
                        moderator_count += 1
            elif isinstance(players_dict, list):
                for player_info in players_dict:
                    if isinstance(player_info, dict) and "name" in player_info:
                        player_name = player_info["name"]
                        if player_name in BEAMMP_MODERATORS:
                            moderator_count += 1
        elif isinstance(player_data, list):
            total_players = len(player_data)
            moderator_count = 0
            
            for player in player_data:
                if isinstance(player, dict) and 'name' in player:
                    username = player['name']
                else:
                    username = str(player).strip()
                if username in BEAMMP_MODERATORS:
                    moderator_count += 1
        else:
            total_players = 0
            moderator_count = 0
        
        cursor.execute('SELECT jobs_enabled FROM jobs_settings WHERE id = 1')
        result = cursor.fetchone()
        current_status = result[0] if result else 0
            
        should_enable = total_players >= 4 and moderator_count >= 1
        
        if should_enable and not current_status:

            cursor.execute('UPDATE jobs_settings SET jobs_enabled = 1 WHERE id = 1')
            conn.commit()

            logs_channel = bot.get_channel(1351455653197123665)
            log_embed = disnake.Embed(
                title="üîß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç",
                description=(
                    "üìÖ **–î–µ–π—Å—Ç–≤–∏–µ:** –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω–∞\n"
                    f"üë• **–ò–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** {total_players}\n"
                    f"üëÆ **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** {moderator_count}"
                ),
                color=disnake.Color.blue()
            )
            await logs_channel.send(embed=log_embed)
            au_channel = bot.get_channel(1353803771565838438)
            au_embed = disnake.Embed(
                title="üîß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç",
                description=(
                    "üìÖ **–î–µ–π—Å—Ç–≤–∏–µ:** –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω–∞\n"
                    f"üë• **–ò–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** {total_players}\n"
                    f"üëÆ **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** {moderator_count}"
                ),
                color=disnake.Color.blue()
            )
            await au_channel.send(embed=au_embed)
                

        elif not should_enable and current_status:

            cursor.execute('''
                SELECT a.user_id, a.job_id, a.start_time, j.hourly_pay, j.name, uj.worked_hours
                FROM active_shifts a
                JOIN jobs j ON a.job_id = j.id
                JOIN user_jobs uj ON a.job_id = uj.job_id AND a.user_id = uj.user_id
            ''')
            active_shifts = cursor.fetchall()


            for shift in active_shifts:
                user_id, job_id, start_time, hourly_pay, job_name, previous_worked_hours = shift

                start_time_dt = datetime.fromisoformat(start_time)
                end_time_dt = datetime.now()
                time_worked = end_time_dt - start_time_dt
                hours_worked = time_worked.total_seconds() / 3600
                payment = int(hours_worked * hourly_pay)


                bal = unbclient.get_user_bal(1341469479510474813, user_id)
                new_bal = bal['cash'] + payment
                unbclient.set_user_bal(1341469479510474813, user_id, cash=new_bal)

                total_worked_hours = previous_worked_hours + hours_worked
                cursor.execute('''
                    UPDATE user_jobs 
                    SET worked_hours = ? 
                    WHERE user_id = ? AND job_id = ?
                ''', (total_worked_hours, user_id, job_id))

                try:
                    user = await bot.fetch_user(user_id)
                    if user:
                        shift_end_embed = disnake.Embed(
                            title="‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞",
                            description=(
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                f"üíº **–†–∞–±–æ—Ç–∞:** {job_name}\n"
                                f"‚è∞ **–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ:** {hours_worked:.1f} —á\n"
                                f"üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** {payment:,}‚ÇΩ\n\n"
                                "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –∏–≥—Ä–æ–∫–æ–≤/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            ),
                            color=disnake.Color.yellow()
                        )
                        await user.send(embed=shift_end_embed)
                except Exception as e:
                    print(f"Failed to notify user {user_id}: {e}")


            cursor.execute('DELETE FROM active_shifts')
            

            cursor.execute('UPDATE jobs_settings SET jobs_enabled = 0 WHERE id = 1')
            conn.commit()
            

            logs_channel = bot.get_channel(1351455653197123665)
            log_embed = disnake.Embed(
                title="üîß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç",
                description=(
                    "üìÖ **–î–µ–π—Å—Ç–≤–∏–µ:** –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞\n"
                    f"üë• **–ò–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** {total_players}\n"
                    f"üëÆ **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** {moderator_count}\n"
                    f"üìä **–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–º–µ–Ω:** {len(active_shifts)}"
                ),
                color=disnake.Color.red()
            )
            await logs_channel.send(embed=log_embed)
            au_channel = bot.get_channel(1353803771565838438)
            au_embed = disnake.Embed(
                title="üîß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç",
                description=(
                    "üìÖ **–î–µ–π—Å—Ç–≤–∏–µ:** –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞\n"
                    f"üë• **–ò–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** {total_players}\n"
                    f"üëÆ **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** {moderator_count}\n"
                    f"üìä **–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–º–µ–Ω:** {len(active_shifts)}"
                ),
                color=disnake.Color.red()
            )
            await au_channel.send(embed=au_embed)
                
    except Exception as e:
        print(f"Error in server status check: {e}")


@bot.command()
@commands.has_any_role('–°–º–æ—Ç—Ä—è—â–∏–π –∑–∞ RolePlay',"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–í—ã—Å—à–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
async def –≤–∫–ª—é—á–∏—Ç—å_—Ä–∞–±–æ—Ç—ã(ctx):
    """Enables the job system on the server"""
    try:
        cursor.execute('UPDATE jobs_settings SET jobs_enabled = 1 WHERE id = 1')
        conn.commit()
        
        embed = disnake.Embed(
            title="‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –≤–∫–ª—é—á–µ–Ω–∞",
            description="–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
            color=disnake.Color.green()
        )
        await ctx.send(embed=embed)
        
        # Log the action
        logs_channel = bot.get_channel(1351455653197123665)
        log_embed = disnake.Embed(
            title="üîß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç",
            description=f"üë§ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {ctx.author.mention}\nüìÖ **–î–µ–π—Å—Ç–≤–∏–µ:** –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –≤–∫–ª—é—á–µ–Ω–∞",
            color=disnake.Color.blue()
        )
        await logs_channel.send(embed=log_embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç: {str(e)}",
            color=disnake.Color.red()
        )
        await ctx.send(embed=error_embed)

@bot.command()
@commands.has_any_role('–°–º–æ—Ç—Ä—è—â–∏–π –∑–∞ RolePlay',"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–í—ã—Å—à–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
async def –≤—ã–∫–ª—é—á–∏—Ç—å_—Ä–∞–±–æ—Ç—ã(ctx):
    """Disables the job system on the server and ends all active shifts"""
    try:
        # Get all active shifts before disabling the system
        cursor.execute('''
            SELECT a.user_id, a.job_id, a.start_time, j.hourly_pay, j.name, uj.worked_hours
            FROM active_shifts a
            JOIN jobs j ON a.job_id = j.id
            JOIN user_jobs uj ON a.job_id = uj.job_id AND a.user_id = uj.user_id
        ''')
        active_shifts = cursor.fetchall()

        # Process all active shifts
        for shift in active_shifts:
            user_id, job_id, start_time, hourly_pay, job_name, previous_worked_hours = shift
            
            # Calculate payment for each worker
            start_time_dt = datetime.fromisoformat(start_time)
            end_time_dt = datetime.now()
            time_worked = end_time_dt - start_time_dt
            hours_worked = time_worked.total_seconds() / 3600
            payment = int(hours_worked * hourly_pay)
            
            # Update user's balance
            bal = unbclient.get_user_bal(1341469479510474813, user_id)
            new_bal = bal['cash'] + payment
            unbclient.set_user_bal(1341469479510474813, user_id, cash=new_bal)
            
            # Update worked hours
            total_worked_hours = previous_worked_hours + hours_worked
            cursor.execute('''
                UPDATE user_jobs 
                SET worked_hours = ? 
                WHERE user_id = ? AND job_id = ?
            ''', (total_worked_hours, user_id, job_id))
            
            # Try to notify the user
            try:
                user = await bot.fetch_user(user_id)
                if user:
                    shift_end_embed = disnake.Embed(
                        title="‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üíº **–†–∞–±–æ—Ç–∞:** {job_name}\n"
                            f"‚è∞ **–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ:** {hours_worked:.1f} —á\n"
                            f"üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** {payment:,}‚ÇΩ\n\n"
                            "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.yellow()
                    )
                    await user.send(embed=shift_end_embed)
            except Exception as e:
                print(f"Failed to notify user {user_id}: {e}")

        # Clear all active shifts
        cursor.execute('DELETE FROM active_shifts')
        
        # Disable the job system
        cursor.execute('UPDATE jobs_settings SET jobs_enabled = 0 WHERE id = 1')
        conn.commit()
        
        embed = disnake.Embed(
            title="üö´ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∞",
            description=(
                "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n"
                f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω: {len(active_shifts)}"
            ),
            color=disnake.Color.red()
        )
        await ctx.send(embed=embed)
        
        # Log the action
        logs_channel = bot.get_channel(1351455653197123665)
        log_embed = disnake.Embed(
            title="üîß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç",
            description=(
                f"üë§ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {ctx.author.mention}\n"
                f"üìÖ **–î–µ–π—Å—Ç–≤–∏–µ:** –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∞\n"
                f"üìä **–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–º–µ–Ω:** {len(active_shifts)}"
            ),
            color=disnake.Color.blue()
        )
        await logs_channel.send(embed=log_embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç: {str(e)}",
            color=disnake.Color.red()
        )
        await ctx.send(embed=error_embed)


def is_jobs_enabled():
    cursor.execute('SELECT jobs_enabled FROM jobs_settings WHERE id = 1')
    result = cursor.fetchone()
    return bool(result[0]) if result else False


async def check_user_job_status(user_id):
    cursor.execute('''
        SELECT j.id, j.name, j.is_government 
        FROM user_jobs uj
        JOIN jobs j ON uj.job_id = j.id
        WHERE uj.user_id = ?
    ''', (user_id,))
    
    job_info_list = cursor.fetchall()
    
    has_gov_job = any(job[2] for job in job_info_list)  
    has_non_gov_job = any(not job[2] for job in job_info_list)  
    
    return (has_gov_job, has_non_gov_job, job_info_list)

@tasks.loop(minutes=1)
async def check_promotion_eligibility():
    try:
        # Get all active shifts with promotion information
        cursor.execute('''
            SELECT a.user_id, a.job_id, a.start_time, j.promotion_time_hours, 
                   j.promotion_role_name, uj.worked_hours, j.name
            FROM active_shifts a
            JOIN jobs j ON a.job_id = j.id
            JOIN user_jobs uj ON a.job_id = uj.job_id AND a.user_id = uj.user_id
            WHERE j.promotion_time_hours > 0 AND j.promotion_role_name IS NOT NULL
        ''')
        
        active_shifts = cursor.fetchall()
        current_time = datetime.now()
        
        for shift in active_shifts:
            user_id, job_id, start_time, promotion_hours, promotion_role_name, worked_hours, job_name = shift
            
            # Calculate current shift duration
            start_time_dt = datetime.fromisoformat(start_time)
            current_shift_hours = (current_time - start_time_dt).total_seconds() / 3600
            
            # Calculate total hours (previous + current shift)
            total_hours = worked_hours + current_shift_hours
            
            # Check if user is eligible for promotion
            if total_hours >= promotion_hours:
                # Check if we've already notified this user
                cursor.execute('''
                    SELECT * FROM promotion_notifications 
                    WHERE user_id = ? AND job_id = ?
                ''', (user_id, job_id))
                
                notification = cursor.fetchone()
                
                if not notification:
                    # Send notification to user
                    try:
                        user = await bot.fetch_user(user_id)
                        
                        if user:
                            embed = disnake.Embed(
                                title="üìà –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ!",
                                description=(
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                    f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è!\n"
                                    f"üíº **–¢–µ–∫—É—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:** {job_name}\n"
                                    f"üìà **–ù–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:** {promotion_role_name}\n"
                                    f"‚è∞ **–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤:** {total_hours:.1f}/{promotion_hours}\n\n"
                                    "‚ö†Ô∏è **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É –∫–æ–º–∞–Ω–¥–æ–π** `/—Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å`\n\n"
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                                ),
                                color=disnake.Color.gold()
                            )
                            
                            await user.send(embed=embed)
                            
                            # Record notification in database to avoid duplicate messages
                            cursor.execute('''
                                INSERT INTO promotion_notifications (user_id, job_id, notification_time)
                                VALUES (?, ?, ?)
                            ''', (user_id, job_id, current_time.isoformat()))
                            
                            conn.commit()
                    except Exception as e:
                        print(f"Failed to notify user about promotion: {e}")
        

    except Exception as e:
        print(f"Error in promotion check task: {e}")
        
async def check_license(user_id, required_license):
    if not required_license:
        return True, None
    cyrillic_to_latin = {
        '–ê': 'A', '–í': 'B', '–°': 'C', '–ï': 'E', '–ù': 'H', '–ö': 'K',
        '–ú': 'M', '–û': 'O', '–†': 'P', '–¢': 'T', '–•': 'X', '–∞': 'a',
        '–≤': 'b', '—Å': 'c', '–µ': 'e', '–Ω': 'h', '–∫': 'k', '–º': 'm',
        '–æ': 'o', '—Ä': 'p', '—Ç': 't', '—Ö': 'x'
    }
    license_variants = [required_license]
    latin_variant = ''.join(cyrillic_to_latin.get(char, char) for char in required_license)
    if latin_variant != required_license:
        license_variants.append(latin_variant)
    latin_to_cyrillic = {v: k for k, v in cyrillic_to_latin.items()}
    cyrillic_variant = ''.join(latin_to_cyrillic.get(char, char) for char in required_license)
    if cyrillic_variant != required_license and cyrillic_variant not in license_variants:
        license_variants.append(cyrillic_variant)
    for variant in license_variants:
        cursor.execute('''
            SELECT * FROM licenses 
            WHERE user_id = ? 
            AND LOWER(TRIM(category)) = LOWER(TRIM(?)) 
            AND status = "active"
        ''', (str(user_id), variant))
        license_result = cursor.fetchone()
        if license_result:
            return True, license_result
    return False, None


@bot.command()
async def —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ(ctx):
    try:
        has_gov_job, has_non_gov_job, job_info_list = await check_user_job_status(ctx.author.id)
        cursor.execute('''
            SELECT * FROM jobs 
            WHERE employability = 1
            ORDER BY hourly_pay
        ''')
        jobs = cursor.fetchall()
        if not jobs:
            embed = disnake.Embed(
                title="üîç –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
                description="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
                color=disnake.Color.red()
            )
            return await ctx.send(embed=embed)
        current_index = 0
        total_jobs = len(jobs)
        has_both_job_types = has_gov_job and has_non_gov_job
        async def show_job(index, interaction=None):
            job = jobs[index]
            job_is_government = job[3]
            meets_requirements = True
            requirements_text = ""
            if has_both_job_types:
                meets_requirements = False
                gov_job_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                non_gov_job_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                for job_info in job_info_list:
                    if job_info[2]: 
                        gov_job_name = job_info[1]
                    else: 
                        non_gov_job_name = job_info[1]
                requirements_text += f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç:\n"
                requirements_text += f"‚Ä¢ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è: **{gov_job_name}**\n"
                requirements_text += f"‚Ä¢ –ß–∞—Å—Ç–Ω–∞—è: **{non_gov_job_name}**\n"
            elif (job_is_government and has_gov_job) or (not job_is_government and has_non_gov_job):
                job_type_str = "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π" if job_is_government else "—á–∞—Å—Ç–Ω–æ–π"
                current_job_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                for job_info in job_info_list:
                    if job_info[2] == job_is_government:
                        current_job_name = job_info[1]
                        break
                meets_requirements = False
                requirements_text += f"‚ùå –í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞ {job_type_str} —Ä–∞–±–æ—Ç–µ (**{current_job_name}**)\n"
            if job[4]:
                has_license, license_data = await check_license(ctx.author.id, job[4])   
                if not has_license:
                    meets_requirements = False
                    requirements_text += f"‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{job[4]}**\n"
                else:
                    requirements_text += f"‚úÖ –ü—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{job[4]}**\n"
            
            if job[5] > 0:
                has_license, license_data = await check_license(ctx.author.id, job[4])
                if license_data:
                    issue_date = datetime.fromisoformat(license_data[2])  
                    hours_since_issue = (datetime.now() - issue_date).total_seconds() / 3600
                    if hours_since_issue < job[5]:
                        meets_requirements = False
                        requirements_text += f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è **{job[5]}** —á–∞—Å–æ–≤ –æ–ø—ã—Ç–∞ –≤–æ–∂–¥–µ–Ω–∏—è (—É –≤–∞—Å {int(hours_since_issue)})\n"
                    else:
                        requirements_text += f"‚úÖ **{int(job[5])}** —á–∞—Å–æ–≤ –æ–ø—ã—Ç–∞ –≤–æ–∂–¥–µ–Ω–∏—è\n"
                else:
                    meets_requirements = False
                    requirements_text += f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è **{job[5]}** —á–∞—Å–æ–≤ –æ–ø—ã—Ç–∞ –≤–æ–∂–¥–µ–Ω–∏—è\n"
            job_type = "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è" if job_is_government else "–ß–∞—Å—Ç–Ω–∞—è"
            embed = disnake.Embed(
                title=f"üíº {job[1]}",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üí∞ **–û–ø–ª–∞—Ç–∞:** {'–°–¥–µ–ª—å–Ω–∞—è' if job[2] == 0 else f'{job[2]:,}‚ÇΩ –≤ —á–∞—Å'}\n"
                    f"üè¢ **–¢–∏–ø —Ä–∞–±–æ—Ç—ã:** {job_type}\n"
                ),
                color=disnake.Color.blue()
            )

            if requirements_text:
                embed.add_field(
                    name="üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                    value=requirements_text,
                    inline=False
                )
            if job[7]:  
                if job[9] == 0: 
                    embed.add_field(
                        name="üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç",
                        value="**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å**",
                        inline=False
                    )
                elif job[9] == 1: 
                    embed.add_field(
                        name="üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç",
                        value=(
                            f"**–ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ:** {job[7]}\n"
                            "**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ü–æ–≤—ã—à–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"
                        ),
                        inline=False
                    )
                else: 
                    embed.add_field(
                        name="üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç",
                        value=(
                            f"**–ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ:** {job[7]}\n"
                            f"**–¢—Ä–µ–±—É–µ–º–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {job[9]} —á–∞—Å–æ–≤"
                        ),
                        inline=False
                    )          
            if job_info_list:
                current_jobs_text = ""
                for job_info in job_info_list:
                    job_type_text = "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è" if job_info[2] else "–ß–∞—Å—Ç–Ω–∞—è"
                    current_jobs_text += f"‚Ä¢ **{job_info[1]}** ({job_type_text})\n"
                
                embed.add_field(
                    name="‚ÑπÔ∏è –¢–µ–∫—É—â–∏–µ —Ä–∞–±–æ—Ç—ã",
                    value=current_jobs_text,
                    inline=False
                )
            
            embed.set_footer(text=f"–í–∞–∫–∞–Ω—Å–∏—è {index + 1} –∏–∑ {total_jobs}")
            
            # Create view with navigation buttons
            view = disnake.ui.View(timeout=180)
            
            # Navigation buttons
            prev_button = disnake.ui.Button(
                style=disnake.ButtonStyle.secondary,
                label="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                disabled=index == 0
            )
            next_button = disnake.ui.Button(
                style=disnake.ButtonStyle.secondary,
                label="–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂Ô∏è",
                disabled=index == total_jobs - 1
            )
            apply_button = disnake.ui.Button(
                style=disnake.ButtonStyle.green,
                label="‚úÖ –£—Å—Ç—Ä–æ–∏—Ç—å—Å—è",
                disabled=not meets_requirements
            )
            
            async def prev_callback(b_inter):
                nonlocal current_index
                current_index = max(0, current_index - 1)
                await b_inter.response.defer()
                await show_job(current_index, b_inter)
            
            async def next_callback(b_inter):
                nonlocal current_index
                current_index = min(total_jobs - 1, current_index + 1)
                await b_inter.response.defer()
                await show_job(current_index, b_inter)
            
            async def apply_callback(b_inter):
                await b_inter.response.defer()
                
                try:
                    job = jobs[current_index]
                    cursor.execute('''SELECT car FROM addjobs WHERE job_id=?''',(jobs[current_index][0],))
                    car_result = cursor.fetchone()
                    
                    # Check if car_result exists and extract the car name
                    car_name = car_result[0] if car_result else None
                    
                    # Only try to add car if car_name exists
                    if car_name:
                        addtoserverpo = await carmanager(b_inter.author.display_name, "–¥–æ–±–∞–≤–∏—Ç—å", car_name)
                        if addtoserverpo == False:
                            error_embed = disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description=(
                                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                            "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n"
                                            "üë®‚Äçüíº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
                                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                                ),
                                color=disnake.Color.red()
                            )
                            await b_inter.edit_original_response(embed=error_embed, view=None)  
                            return
                    # Record employment in database
                    cursor.execute('''
                        INSERT INTO user_jobs (user_id, job_id, start_time)
                        VALUES (?, ?, ?)
                    ''', (b_inter.author.id, job[0], datetime.now().isoformat()))
                    
                    # Assign role if specified
                    if job[6]:  # role_id
                        # Handle both single role ID and comma-separated role IDs
                        if ',' in job[6]:
                            role_ids = job[6].split(',')
                        else:
                            role_ids = [job[6]]
                            
                        for role_id in role_ids:
                            try:
                                role = b_inter.guild.get_role(int(role_id.strip()))
                                if role:
                                    await b_inter.author.add_roles(role)
                            except Exception as e:
                                print(f"Error assigning role: {e}")
                    
                    conn.commit()
                    
                    success_embed = disnake.Embed(
                        title="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É!",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {job[1]}\n"
                            f"üí∞ **–û–ø–ª–∞—Ç–∞:** {job[2]:,}‚ÇΩ –≤ —á–∞—Å\n"
                            f"üè¢ **–¢–∏–ø —Ä–∞–±–æ—Ç—ã:** {'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è' if job[3] else '–ß–∞—Å—Ç–Ω–∞—è'}\n"
                            f"üìÖ **–î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `!–Ω–∞—á–∞—Ç—å_—Ä–∞–±–æ—Ç—É` —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.green()
                    )
                    
                    await b_inter.edit_original_response(embed=success_embed, view=None)
                    
                    # Log employment
                    logs_channel = bot.get_channel(1351455653197123665)
                    log_embed = disnake.Embed(
                        title="üíº –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
                        description=(
                            f"üë§ **–ò–≥—Ä–æ–∫:** {b_inter.author.mention}\n"
                            f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {job[1]}\n"
                            f"üí∞ **–û–ø–ª–∞—Ç–∞:** {job[2]:,}‚ÇΩ –≤ —á–∞—Å\n"
                            f"üè¢ **–¢–∏–ø —Ä–∞–±–æ—Ç—ã:** {'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è' if job[3] else '–ß–∞—Å—Ç–Ω–∞—è'}\n"
                            f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                        ),
                        color=disnake.Color.blue()
                    )
                    await logs_channel.send(embed=log_embed)
                    
                except Exception as e:
                    error_embed = disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {str(e)}",
                        color=disnake.Color.red()
                    )
                    await b_inter.edit_original_response(embed=error_embed)
            
            prev_button.callback = prev_callback
            next_button.callback = next_callback
            apply_button.callback = apply_callback
            
            view.add_item(prev_button)
            view.add_item(next_button)
            view.add_item(apply_button)
            
            if interaction:
                await interaction.edit_original_response(embed=embed, view=view)
            else:
                return await ctx.send(embed=embed, view=view)
        
        # Show the first job
        await show_job(current_index)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}",
            color=disnake.Color.red()
        )
        await ctx.send(embed=error_embed)

@bot.slash_command(name="—Ä–∞–±–æ—Ç–∞", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–º–∏ –∏ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º")
async def job_commands(inter: ApplicationCommandInteraction):
    """–ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–º–∏ –∏ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
    pass

@job_commands.sub_command(name="—Å–ø–∏—Å–æ–∫", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç")
async def my_jobs(inter: ApplicationCommandInteraction):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–≤–æ–ª—å–Ω–µ–Ω–∏—è"""
    try:
        await inter.response.defer(ephemeral=True)
        
        # Get all jobs for the user
        cursor.execute('''
            SELECT j.id, j.name, j.hourly_pay, j.is_government, uj.start_time, uj.worked_hours
            FROM user_jobs uj
            JOIN jobs j ON uj.job_id = j.id
            WHERE uj.user_id = ?
        ''', (inter.author.id,))
        
        jobs = cursor.fetchall()
        
        if not jobs:
            embed = disnake.Embed(
                title="üíº –ú–æ–∏ —Ä–∞–±–æ—Ç—ã",
                description="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/—Ä–∞–±–æ—Ç–∞ –Ω–∞–π—Ç–∏` –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã.",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        
        # Initialize variables for pagination
        current_index = 0
        total_jobs = len(jobs)
        
        # Function to display job information
        async def show_job(index, interaction=None):
            job = jobs[index]
            job_id, job_name, hourly_pay, is_government, start_time, worked_hours = job
            
            # Calculate time worked
            start_date = datetime.fromisoformat(start_time)
            time_worked = datetime.now() - start_date
            days_worked = time_worked.days
            
            # Format worked hours
            worked_hours = worked_hours or 0
            
            # Check if promotion is available
            cursor.execute('''
                SELECT promotion_role_name, promotion_time_hours
                FROM jobs
                WHERE id = ?
            ''', (job_id,))
            
            promotion_info = cursor.fetchone()
            promotion_text = ""
            
            if promotion_info and promotion_info[0] and promotion_info[1]:
                promotion_role, promotion_hours = promotion_info
                remaining_hours = max(0, promotion_hours - worked_hours)
                progress = min(100, int((worked_hours / promotion_hours) * 100))
                
                promotion_text = (
                    f"üìà **–°–ª–µ–¥—É—é—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:** {promotion_role}\n"
                    f"‚è≥ **–û—Å—Ç–∞–ª–æ—Å—å —á–∞—Å–æ–≤:** {remaining_hours:.1f}\n"
                    f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress}% ({worked_hours:.1f}/{promotion_hours})\n\n"
                )
            
            # Create embed with job information
            embed = disnake.Embed(
                title=f"üíº {job_name}",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üí∞ **–û–ø–ª–∞—Ç–∞:** {hourly_pay:,}‚ÇΩ/—á–∞—Å\n"
                    f"üè¢ **–¢–∏–ø:** {'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è' if is_government else '–ß–∞—Å—Ç–Ω–∞—è'}\n"
                    f"üìÖ **–î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {start_date.strftime('%d.%m.%Y')}\n"
                    f"‚è±Ô∏è **–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–Ω–µ–π:** {days_worked}\n"
                    f"‚è±Ô∏è **–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤:** {worked_hours:.1f}\n\n"
                    f"{promotion_text}"
                    f"üìÑ **–°—Ç—Ä–∞–Ω–∏—Ü–∞:** {index + 1}/{total_jobs}\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.blue()
            )
            
            # Create navigation buttons
            view = disnake.ui.View(timeout=60)
            
            prev_button = disnake.ui.Button(
                style=disnake.ButtonStyle.secondary,
                emoji="‚¨ÖÔ∏è",
                disabled=(index == 0)
            )
            
            next_button = disnake.ui.Button(
                style=disnake.ButtonStyle.secondary,
                emoji="‚û°Ô∏è",
                disabled=(index == total_jobs - 1)
            )
            
            quit_button = disnake.ui.Button(
                style=disnake.ButtonStyle.danger,
                label="–£–≤–æ–ª–∏—Ç—å—Å—è",
                emoji="üö™"
            )
            
            async def prev_callback(b_inter):
                if b_inter.author.id != inter.author.id:
                    return await b_inter.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç!", ephemeral=True)
                
                nonlocal current_index
                current_index = max(0, current_index - 1)
                await b_inter.response.defer()
                await show_job(current_index, b_inter)
            
            async def next_callback(b_inter):
                if b_inter.author.id != inter.author.id:
                    return await b_inter.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç!", ephemeral=True)
                
                nonlocal current_index
                current_index = min(total_jobs - 1, current_index + 1)
                await b_inter.response.defer()
                await show_job(current_index, b_inter)
            
            async def quit_callback(b_inter):
                if b_inter.author.id != inter.author.id:
                    return await b_inter.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç!", ephemeral=True)
                
                # Create confirmation view
                confirm_view = disnake.ui.View(timeout=30)
                
                confirm_button = disnake.ui.Button(
                    style=disnake.ButtonStyle.danger,
                    label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    emoji="‚úÖ"
                )
                
                cancel_button = disnake.ui.Button(
                    style=disnake.ButtonStyle.secondary,
                    label="–û—Ç–º–µ–Ω–∞",
                    emoji="‚ùå"
                )
                
                async def confirm_quit(c_inter):
                    if c_inter.author.id != inter.author.id:
                        return await c_inter.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ!", ephemeral=True)
                    
                    await c_inter.response.defer()
                    
                    try:
                        # Check if user has an active shift for this job
                        cursor.execute('SELECT * FROM active_shifts WHERE user_id = ? AND job_id = ?', 
                                      (inter.author.id, job_id))
                        active_shift = cursor.fetchone()
                        
                        if active_shift:
                            error_embed = disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–≤–æ–ª–∏—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–º–µ–Ω—É.",
                                color=disnake.Color.red()
                            )
                            return await c_inter.edit_original_response(embed=error_embed, view=None)
                        
                        # Get job role IDs
                        cursor.execute('SELECT role_id FROM jobs WHERE id = ?', (job_id,))
                        role_ids = cursor.fetchone()[0]
                        
                        # Remove roles if specified
                        if role_ids:
                            for role_id in role_ids.split(','):
                                try:
                                    role = inter.guild.get_role(int(role_id.strip()))
                                    if role:
                                        await inter.author.remove_roles(role)
                                except Exception as e:
                                    print(f"Error removing role: {e}")
                        
                        # Delete job from user_jobs
                        cursor.execute('DELETE FROM user_jobs WHERE user_id = ? AND job_id = ?', 
                                      (inter.author.id, job_id))
                        conn.commit()
                        
                        quit_embed = disnake.Embed(
                            title="‚úÖ –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
                            description=(
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {job_name}\n"
                                f"‚è±Ô∏è **–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤:** {worked_hours:.1f}\n"
                                f"üìÖ **–î–∞—Ç–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y')}\n\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            ),
                            color=disnake.Color.green()
                        )
                        
                        await c_inter.edit_original_response(embed=quit_embed, view=None)
                        
                        # Log the quit
                        logs_channel = bot.get_channel(1351455653197123665)
                        log_embed = disnake.Embed(
                            title="üö™ –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ —Å —Ä–∞–±–æ—Ç—ã",
                            description=(
                                f"üë§ **–ò–≥—Ä–æ–∫:** {inter.author.mention}\n"
                                f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {job_name}\n"
                                f"‚è∞ **–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤:** {worked_hours:.1f}\n"
                                f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                            ),
                            color=disnake.Color.red()
                        )
                        await logs_channel.send(embed=log_embed)
                        
                        # Check if there are any remaining jobs
                        cursor.execute('SELECT COUNT(*) FROM user_jobs WHERE user_id = ?', (inter.author.id,))
                        remaining_jobs = cursor.fetchone()[0]
                        
                        if remaining_jobs > 0:
                            # Refresh the jobs list
                            cursor.execute('''
                                SELECT j.id, j.name, j.hourly_pay, j.is_government, uj.start_time, uj.worked_hours
                                FROM user_jobs uj
                                JOIN jobs j ON uj.job_id = j.id
                                WHERE uj.user_id = ?
                            ''', (inter.author.id,))
                            
                            nonlocal jobs, total_jobs, current_index
                            jobs = cursor.fetchall()
                            total_jobs = len(jobs)
                            current_index = 0
                            
                            # Show the updated job list
                            await show_job(0, interaction)
                        
                    except Exception as e:
                        error_embed = disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏: {str(e)}",
                            color=disnake.Color.red()
                        )
                        await c_inter.edit_original_response(embed=error_embed)
                
                async def cancel_quit(c_inter):
                    if c_inter.author.id != inter.author.id:
                        return await c_inter.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ!", ephemeral=True)
                    
                    await c_inter.response.defer()
                    await show_job(current_index, c_inter)
                
                confirm_button.callback = confirm_quit
                cancel_button.callback = cancel_quit
                
                confirm_view.add_item(confirm_button)
                confirm_view.add_item(cancel_button)
                
                confirm_embed = disnake.Embed(
                    title="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è",
                    description=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –í–Ω–∏–º–∞–Ω–∏–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–æ–ª–∏—Ç—å—Å—è —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ **{job_name}**?\n\n"
                        "‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!**\n"
                        "‚ö†Ô∏è **–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!**\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    color=disnake.Color.yellow()
                )
                
                await b_inter.response.send_message(embed=confirm_embed, view=confirm_view, ephemeral=True)
            
            prev_button.callback = prev_callback
            next_button.callback = next_callback
            quit_button.callback = quit_callback
            
            view.add_item(prev_button)
            view.add_item(next_button)
            view.add_item(quit_button)
            
            if interaction:
                await interaction.edit_original_response(embed=embed, view=view)
            else:
                return await inter.edit_original_response(embed=embed, view=view)
        
        # Show the first job
        await show_job(current_index)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

@job_commands.sub_command(name="–Ω–∞—á–∞—Ç—å", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É")
async def start_work(inter: ApplicationCommandInteraction):
    """–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç"""
    try:
        await inter.response.defer(ephemeral=True)
        
        if not is_jobs_enabled():
            # Get player data to provide more specific information
            try:
                # Read player data from file
                # Get the script directory path
                script_dir = os.path.dirname(os.path.abspath(__file__))
                file_path = os.path.join(script_dir, 'latest_players.json')

                with open(file_path, 'r', encoding='utf-8') as f:
                    player_data = json.load(f)
                
                # Handle the specific format: {"playerCount":X,"players":{"0":{"vehicles":[...],"name":"..."}}}
                if isinstance(player_data, dict) and "playerCount" in player_data and "players" in player_data:
                    total_players = player_data["playerCount"]
                    players_dict = player_data["players"]
                    
                    # Get moderator count
                    moderator_count = sum(1 for _, p in players_dict.items() 
                                         if p.get('name') in BEAMMP_MODERATORS)
                    
                    # Create a more specific message based on the reason
                    reason = ""
                    if total_players < 3:
                        reason = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—Å–µ–π—á–∞—Å: {total_players}, –Ω—É–∂–Ω–æ: 4)"
                    elif moderator_count < 1:
                        reason = f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã 1)"
                    else:
                        reason = "–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"
                        
                    embed = disnake.Embed(
                        title="üö´ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞",
                        description=f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}",
                        color=disnake.Color.red()
                    )
                    return await inter.edit_original_response(embed=embed)
                # Handle list format as fallback
                elif isinstance(player_data, list):
                    total_players = len(player_data)
                    moderator_count = sum(1 for p in player_data 
                                         if isinstance(p, dict) and p.get('name') in BEAMMP_MODERATORS)
                    
                    reason = ""
                    if total_players < 4:
                        reason = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—Å–µ–π—á–∞—Å: {total_players}, –Ω—É–∂–Ω–æ: 4)"
                    elif moderator_count < 1:
                        reason = f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã 1)"
                    else:
                        reason = "–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"
                        
                    embed = disnake.Embed(
                        title="üö´ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞",
                        description=f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}",
                        color=disnake.Color.red()
                    )
                    return await inter.edit_original_response(embed=embed)
            except Exception as e:
                print(f"Error getting player data: {e}")
            
            # Fallback message if player data couldn't be retrieved
            embed = disnake.Embed(
                title="üö´ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞",
                description="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞ –∏ 1 –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        
        # Check if user already has an active shift
        cursor.execute('SELECT * FROM active_shifts WHERE user_id = ?', (inter.author.id,))
        active_shift = cursor.fetchone()
        
        if active_shift:
            # Calculate time worked so far
            start_time = datetime.fromisoformat(active_shift[2])
            time_worked = datetime.now() - start_time
            hours_worked = time_worked.total_seconds() / 3600
            
            embed = disnake.Embed(
                title="‚ö†Ô∏è –°–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"‚è∞ **–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã:** {start_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚åõ **–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏:** {int(time_worked.total_seconds() // 3600)}—á {int((time_worked.total_seconds() % 3600) // 60)}–º–∏–Ω\n\n"
                    "–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/—Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å`\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.yellow()
            )
            return await inter.edit_original_response(embed=embed)
        
        # Check if user has a job
        cursor.execute('''
            SELECT j.id, j.name, j.hourly_pay
            FROM user_jobs uj
            JOIN jobs j ON uj.job_id = j.id
            WHERE uj.user_id = ?
        ''', (inter.author.id,))
        
        jobs = cursor.fetchall()
        
        if not jobs:
            embed = disnake.Embed(
                title="‚ùå –ù–µ—Ç —Ä–∞–±–æ—Ç—ã",
                description="–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/—Ä–∞–±–æ—Ç–∞ –Ω–∞–π—Ç–∏` –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã.",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        
        # If user has multiple jobs, let them choose
        if len(jobs) > 1:
            # Create embed with job options
            embed = disnake.Embed(
                title="üíº –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É",
                description="–£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π —Ä–∞–±–æ—Ç–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É:",
                color=disnake.Color.blue()
            )
            
            # Create view with job selection buttons
            view = disnake.ui.View(timeout=60)
            
            for job in jobs:
                job_id, job_name, hourly_pay = job
                
                # Create button for each job
                job_button = disnake.ui.Button(
                    style=disnake.ButtonStyle.primary,
                    label=f"{job_name} ({hourly_pay}‚ÇΩ/—á)",
                    custom_id=str(job_id)
                )
                
                async def job_button_callback(interaction, selected_job_id=job_id, selected_job_name=job_name):
                    if interaction.author.id != inter.author.id:
                        return await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å–º–µ–Ω–∞!", ephemeral=True)
                    
                    await interaction.response.defer()
                    
                    # Start shift for selected job
                    now = datetime.now()
                    cursor.execute(
                        'INSERT INTO active_shifts (user_id, job_id, start_time) VALUES (?, ?, ?)',
                        (inter.author.id, selected_job_id, now.isoformat())
                    )
                    conn.commit()
                    
                    success_embed = disnake.Embed(
                        title="‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üíº **–†–∞–±–æ—Ç–∞:** {selected_job_name}\n"
                            f"‚è∞ **–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã:** {now.strftime('%d.%m.%Y %H:%M')}\n\n"
                            "–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/—Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å`\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.green()
                    )
                    
                    await interaction.edit_original_response(embed=success_embed, view=None)
                
                job_button.callback = lambda i, jid=job_id, jname=job_name: job_button_callback(i, jid, jname)
                view.add_item(job_button)
            
            return await inter.edit_original_response(embed=embed, view=view)
        
        # If user has only one job, start shift for that job
        job_id, job_name, hourly_pay = jobs[0]
        
        now = datetime.now()
        cursor.execute(
            'INSERT INTO active_shifts (user_id, job_id, start_time) VALUES (?, ?, ?)',
            (inter.author.id, job_id, now.isoformat())
        )
        conn.commit()
        
        embed = disnake.Embed(
            title="‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üíº **–†–∞–±–æ—Ç–∞:** {job_name}\n"
                f"‚è∞ **–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã:** {now.strftime('%d.%m.%Y %H:%M')}\n\n"
                "–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/—Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å`\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green()
        )
        
        await inter.edit_original_response(embed=embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

@job_commands.sub_command(name="—Å—Ç–∞—Ç—É—Å", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ")
async def shift_status(inter: ApplicationCommandInteraction):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π —Å–º–µ–Ω–µ"""
    try:
        await inter.response.defer(ephemeral=True)
        
        # Check if user has an active shift
        cursor.execute('''
            SELECT a.job_id, a.start_time, j.hourly_pay, j.name, j.promotion_role_name, 
                   j.promotion_time_hours, uj.worked_hours
            FROM active_shifts a
            JOIN jobs j ON a.job_id = j.id
            JOIN user_jobs uj ON a.job_id = uj.job_id AND a.user_id = uj.user_id
            WHERE a.user_id = ?
        ''', (inter.author.id,))
        
        shift_data = cursor.fetchone()
        
        if not shift_data:
            embed = disnake.Embed(
                title="‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã",
                description="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/—Ä–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç—å` –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        
        job_id, start_time, hourly_pay, job_name, promotion_role_name, promotion_hours, worked_hours = shift_data
        
        # Calculate current shift duration and earnings
        start_time_dt = datetime.fromisoformat(start_time)
        current_time = datetime.now()
        time_worked = current_time - start_time_dt
        hours_worked = time_worked.total_seconds() / 3600
        current_earnings = int(hours_worked * hourly_pay)
        
        # Create promotion progress information
        promotion_info = ""
        if promotion_role_name and promotion_hours > 0:
            total_hours = worked_hours + hours_worked
            remaining_hours = max(0, promotion_hours - total_hours)
            progress = min(100, int((total_hours / promotion_hours) * 100))
            
            promotion_info = (
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–≤—ã—à–µ–Ω–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üìà **–°–ª–µ–¥—É—é—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:** {promotion_role_name}\n"
                f"‚è≥ **–û—Å—Ç–∞–ª–æ—Å—å —á–∞—Å–æ–≤:** {remaining_hours:.1f}\n"
                f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress}% ({total_hours:.1f}/{promotion_hours})\n\n"
            )
        
        # Create embed with shift information
        embed = disnake.Embed(
            title="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üíº **–†–∞–±–æ—Ç–∞:** {job_name}\n"
                f"‚è∞ **–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã:** {start_time_dt.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚åõ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {int(time_worked.total_seconds() // 3600)}—á {int((time_worked.total_seconds() % 3600) // 60)}–º–∏–Ω\n"
                f"üí∞ **–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —Å–º–µ–Ω—É:** {current_earnings:,}‚ÇΩ\n"
                f"üíµ **–ü–æ—á–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞:** {hourly_pay:,}‚ÇΩ\n\n"
                f"{promotion_info}"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.blue()
        )
        
        await inter.edit_original_response(embed=embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–µ: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

@job_commands.sub_command(name="–∑–∞–≤–µ—Ä—à–∏—Ç—å", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–ø–ª–∞—Ç—É")
async def end_work(inter: ApplicationCommandInteraction):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–ø–ª–∞—Ç—É"""
    try:
        await inter.response.defer(ephemeral=True)
        
        # Check if jobs system is enabled
        if not is_jobs_enabled():
            embed = disnake.Embed(
                title="üö´ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞",
                description="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        
        # Check if user has an active shift
        cursor.execute('''
            SELECT a.job_id, a.start_time, j.hourly_pay, j.name, j.promotion_role_name, 
                   j.promotion_time_hours, j.promotion_role_id, j.role_id, uj.worked_hours
            FROM active_shifts a
            JOIN jobs j ON a.job_id = j.id
            JOIN user_jobs uj ON a.job_id = uj.job_id AND a.user_id = uj.user_id
            WHERE a.user_id = ?
        ''', (inter.author.id,))
        
        shift_data = cursor.fetchone()
        
        if not shift_data:
            embed = disnake.Embed(
                title="‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã",
                description="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/—Ä–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç—å` –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        
        job_id, start_time, hourly_pay, job_name, promotion_role_name, promotion_hours, promotion_role_id, current_role_id, previous_worked_hours = shift_data
        
        # Calculate time worked and payment
        start_time_dt = datetime.fromisoformat(start_time)
        end_time_dt = datetime.now()
        time_worked = end_time_dt - start_time_dt
        hours_worked = time_worked.total_seconds() / 3600
        payment = int(hours_worked * hourly_pay)
        
        # Update user's balance
        bal = unbclient.get_user_bal(1341469479510474813, inter.author.id)
        new_bal = bal['cash'] + payment
        unbclient.set_user_bal(1341469479510474813, inter.author.id, cash=new_bal)
        
        # Update worked hours in user_jobs
        total_worked_hours = previous_worked_hours + hours_worked
        cursor.execute('''
            UPDATE user_jobs 
            SET worked_hours = ? 
            WHERE user_id = ? AND job_id = ?
        ''', (total_worked_hours, inter.author.id, job_id))
        
        # Remove active shift
        cursor.execute('DELETE FROM active_shifts WHERE user_id = ?', (inter.author.id,))
        conn.commit()
        
        # Check for promotion eligibility
        promotion_message = ""
        if promotion_role_name and promotion_hours > 0 and total_worked_hours >= promotion_hours:
            # User is eligible for promotion
            promotion_message = (
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ü–æ–≤—ã—à–µ–Ω–∏–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è!\n"
                f"üìà **–ù–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:** {promotion_role_name}\n\n"
            )
            
            # Update user's job role
            if promotion_role_id:
                # Remove current role(s)
                if current_role_id:
                    current_role_ids = current_role_id.split(',')
                    for role_id in current_role_ids:
                        try:
                            role = inter.guild.get_role(int(role_id.strip()))
                            if role:
                                await inter.author.remove_roles(role)
                        except Exception as e:
                            print(f"Error removing role: {e}")
                
                # Add promotion role(s)
                promotion_role_ids = promotion_role_id.split(',')
                for role_id in promotion_role_ids:
                    try:
                        role = inter.guild.get_role(int(role_id.strip()))
                        if role:
                            await inter.author.add_roles(role)
                    except Exception as e:
                        print(f"Error adding promotion role: {e}")
                
                # Update job record with new role
                cursor.execute('''
                    UPDATE user_jobs 
                    SET worked_hours = 0 
                    WHERE user_id = ? AND job_id = ?
                ''', (inter.author.id, job_id))
                conn.commit()
                
                # Get car for the job
                cursor.execute('''SELECT car FROM addjobs WHERE job_id=?''', (job_id,))
                car_result = cursor.fetchone()
                if car_result:
                    car = car_result[0]
                    # Remove car from server
                    addtoserverpr = await carmanager(inter.author.display_name, "—É–¥–∞–ª–∏—Ç—å", car)
                    if addtoserverpr == False:
                        error_embed = disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description=(
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞\n"
                                "üë®‚Äçüíº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            ),
                            color=disnake.Color.red()
                        )
                        await inter.edit_original_response(embed=error_embed)
                
                # Get the next job in the promotion path
                cursor.execute('''
                    SELECT id FROM jobs 
                    WHERE role_id = ?
                ''', (promotion_role_id,))
                
                next_job = cursor.fetchone()
                
                if next_job:
                    # Update user's job to the promoted position
                    cursor.execute('''
                        UPDATE user_jobs 
                        SET job_id = ? 
                        WHERE user_id = ? AND job_id = ?
                    ''', (next_job[0], inter.author.id, job_id))
                    
                    # Get car for the new job
                    cursor.execute('''SELECT car FROM addjobs WHERE job_id=?''', (next_job[0],))
                    new_car_result = cursor.fetchone()
                    if new_car_result:
                        new_car = new_car_result[0]
                        # Add new car to server
                        addtoserverpo = await carmanager(inter.author.display_name, "–¥–æ–±–∞–≤–∏—Ç—å", new_car)
                        if addtoserverpo == False:
                            error_embed = disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description=(
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                    "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n"
                                    "üë®‚Äçüíº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                                ),
                                color=disnake.Color.red()
                            )
                            await inter.edit_original_response(embed=error_embed)
                
                conn.commit()
                
                # Log the promotion
                logs_channel = bot.get_channel(1351455653197123665)
                promotion_log_embed = disnake.Embed(
                    title="üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ",
                    description=(
                        f"üë§ **–ò–≥—Ä–æ–∫:** {inter.author.mention}\n"
                        f"üíº **–ü—Ä–µ–¥—ã–¥—É—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:** {job_name}\n"
                        f"üìà **–ù–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:** {promotion_role_name}\n"
                        f"‚è∞ **–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤:** {total_worked_hours:.1f}\n"
                        f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                    ),
                    color=disnake.Color.gold()
                )
                await logs_channel.send(embed=promotion_log_embed)
        
        # Create success embed
        embed = disnake.Embed(
            title="‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üíº **–†–∞–±–æ—Ç–∞:** {job_name}\n"
                f"‚è∞ **–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã:** {start_time_dt.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚åõ **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {int(time_worked.total_seconds() // 3600)}—á {int((time_worked.total_seconds() % 3600) // 60)}–º–∏–Ω\n"
                f"üí∞ **–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:** {payment:,}‚ÇΩ\n"
                f"üìä **–í—Å–µ–≥–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤:** {total_worked_hours:.1f}\n\n"
                f"{promotion_message}"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green()
        )
        
        await inter.edit_original_response(embed=embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

@job_commands.sub_command_group(
    name="–∞–¥–º–∏–Ω",
    description="–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç"
)
async def job_admin(inter: ApplicationCommandInteraction):
    """–ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç"""
    pass

@job_admin.sub_command(name="–¥–æ–±–∞–≤–∏—Ç—å", description="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏–≥—Ä–æ–∫—É")
@commands.has_any_role("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–í—ã—Å—à–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
async def add_job_to_player(inter: ApplicationCommandInteraction, 
                           member: disnake.Member = commands.Param(description="–ò–≥—Ä–æ–∫"),
                           job_id: int = commands.Param(description="ID —Ä–∞–±–æ—Ç—ã")):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É"""
    try:
        await inter.response.defer(ephemeral=True)
        
        # Check if job exists
        cursor.execute('SELECT * FROM jobs WHERE id = ?', (job_id,))
        job = cursor.fetchone()
        
        if not job:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–†–∞–±–æ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        
        # Check if user already has this job
        cursor.execute('SELECT * FROM user_jobs WHERE user_id = ? AND job_id = ?', 
                      (member.id, job_id))
        existing_job = cursor.fetchone()
        
        if existing_job:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"{member.mention} —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        
        # Check if user has a job of the same type (government/non-government)
        cursor.execute('''
            SELECT j.name, j.is_government 
            FROM user_jobs uj
            JOIN jobs j ON uj.job_id = j.id
            WHERE uj.user_id = ? AND j.is_government = ?
        ''', (member.id, job[3]))  # job[3] is is_government field
        
        existing_type_job = cursor.fetchone()
        
        if existing_type_job:
            job_type = "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—É—é" if job[3] else "—á–∞—Å—Ç–Ω—É—é"
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=(
                    f"{member.mention} —É–∂–µ –∏–º–µ–µ—Ç {job_type} —Ä–∞–±–æ—Ç—É: **{existing_type_job[0]}**\n"
                    "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≤–æ–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç—ã"
                ),
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        
        # Add job to user
        cursor.execute('''
            INSERT INTO user_jobs (user_id, job_id, start_time)
            VALUES (?, ?, ?)
        ''', (member.id, job_id, datetime.now().isoformat()))
        
        # Assign role if specified
        if job[6]:  # role_id field
            role_ids = job[6].split(',')
            for role_id in role_ids:
                try:
                    role = inter.guild.get_role(int(role_id.strip()))
                    if role:
                        await member.add_roles(role)
                except Exception as e:
                    print(f"Error assigning role: {e}")
        
        conn.commit()
        
        # Create success embed
        embed = disnake.Embed(
            title="‚úÖ –†–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üë§ **–ò–≥—Ä–æ–∫:** {member.mention}\n"
                f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {job[1]}\n"
                f"üí∞ **–û–ø–ª–∞—Ç–∞:** {job[2]:,}‚ÇΩ/—á–∞—Å\n"
                f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green()
        )
        
        await inter.edit_original_response(embed=embed)
        
        # Log the action
        logs_channel = bot.get_channel(1351455653197123665)
        log_embed = disnake.Embed(
            title="üíº –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã",
            description=(
                f"üë§ **–ò–≥—Ä–æ–∫:** {member.mention}\n"
                f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {job[1]}\n"
                f"üëÆ **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {inter.author.mention}\n"
                f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            ),
            color=disnake.Color.blue()
        )
        await logs_channel.send(embed=log_embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

@job_admin.sub_command(name="–∑–∞–≤–µ—Ä—à–∏—Ç—å", description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É –∏–≥—Ä–æ–∫–∞")
@commands.has_any_role('–°–º–æ—Ç—Ä—è—â–∏–π –∑–∞ RolePlay',"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–í—ã—Å—à–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
async def force_end_work(inter: ApplicationCommandInteraction,
                        member: disnake.Member = commands.Param(description="–ò–≥—Ä–æ–∫")):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    try:
        await inter.response.defer(ephemeral=True)
        
        # Check if user has an active shift
        cursor.execute('''
            SELECT a.job_id, a.start_time, j.hourly_pay, j.name
            FROM active_shifts a
            JOIN jobs j ON a.job_id = j.id
            WHERE a.user_id = ?
        ''', (member.id,))
        
        shift_data = cursor.fetchone()
        
        if not shift_data:
            embed = disnake.Embed(
                title="‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã",
                description=f"–£ {member.mention} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        
        job_id, start_time, hourly_pay, job_name = shift_data
        
        # Calculate payment for worked time
        start_time_dt = datetime.fromisoformat(start_time)
        end_time_dt = datetime.now()
        time_worked = end_time_dt - start_time_dt
        hours_worked = time_worked.total_seconds() / 3600
        payment = int(hours_worked * hourly_pay)
        
        # Update user's balance
        bal = unbclient.get_user_bal(1341469479510474813, member.id)
        new_bal = bal['cash'] + payment
        unbclient.set_user_bal(1341469479510474813, member.id, cash=new_bal)
        
        # Update worked hours in user_jobs
        cursor.execute('''
            SELECT worked_hours FROM user_jobs 
            WHERE user_id = ? AND job_id = ?
        ''', (member.id, job_id))
        previous_worked_hours = cursor.fetchone()[0] or 0
        total_worked_hours = previous_worked_hours + hours_worked
        
        cursor.execute('''
            UPDATE user_jobs 
            SET worked_hours = ? 
            WHERE user_id = ? AND job_id = ?
        ''', (total_worked_hours, member.id, job_id))
        
        # Remove active shift
        cursor.execute('DELETE FROM active_shifts WHERE user_id = ?', (member.id,))
        conn.commit()
        
        # Create success embed
        embed = disnake.Embed(
            title="‚úÖ –°–º–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üë§ **–ò–≥—Ä–æ–∫:** {member.mention}\n"
                f"üíº **–†–∞–±–æ—Ç–∞:** {job_name}\n"
                f"‚è∞ **–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã:** {start_time_dt.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚åõ **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {int(time_worked.total_seconds() // 3600)}—á {int((time_worked.total_seconds() % 3600) // 60)}–º–∏–Ω\n"
                f"üí∞ **–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:** {payment:,}‚ÇΩ\n"
                f"üëÆ **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {inter.author.mention}\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green()
        )
        
        await inter.edit_original_response(embed=embed)
        
        # Log the action
        logs_channel = bot.get_channel(1351455653197123665)
        log_embed = disnake.Embed(
            title="‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã",
            description=(
                f"üë§ **–ò–≥—Ä–æ–∫:** {member.mention}\n"
                f"üíº **–†–∞–±–æ—Ç–∞:** {job_name}\n"
                f"‚è∞ **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {int(time_worked.total_seconds() // 3600)}—á {int((time_worked.total_seconds() % 3600) // 60)}–º–∏–Ω\n"
                f"üí∞ **–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:** {payment:,}‚ÇΩ\n"
                f"üëÆ **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {inter.author.mention}\n"
                f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            ),
            color=disnake.Color.orange()
        )
        await logs_channel.send(embed=log_embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

@job_admin.sub_command(name="—É–¥–∞–ª–∏—Ç—å", description="–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É —É –∏–≥—Ä–æ–∫–∞")
@commands.has_any_role("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–í—ã—Å—à–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
async def remove_job_from_player(inter: ApplicationCommandInteraction, 
                                member: disnake.Member = commands.Param(description="–ò–≥—Ä–æ–∫"),
                                job_id: int = commands.Param(description="ID —Ä–∞–±–æ—Ç—ã")):
    """–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É —É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    try:
        await inter.response.defer(ephemeral=True)
        
        # Check if player has an active shift
        cursor.execute('SELECT * FROM active_shifts WHERE user_id = ?', (member.id,))
        active_shift = cursor.fetchone()
        
        if active_shift:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=(
                    f"{member.mention} —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
                    "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/—Ä–∞–±–æ—Ç–∞ –∞–¥–º–∏–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å`"
                ),
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)

        # Check if job exists and player has it
        cursor.execute('''
            SELECT j.name, j.role_id 
            FROM user_jobs uj
            JOIN jobs j ON uj.job_id = j.id
            WHERE uj.user_id = ? AND uj.job_id = ?
        ''', (member.id, job_id))
        
        job = cursor.fetchone()
        
        if not job:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"{member.mention} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                color=disnake.Color.red()
            )
            return await inter.edit_original_response(embed=embed)
        
        job_name, role_ids = job

        # Remove job from user
        cursor.execute('DELETE FROM user_jobs WHERE user_id = ? AND job_id = ?', 
                      (member.id, job_id))
        
        # Remove associated roles if specified
        if role_ids:
            for role_id in role_ids.split(','):
                try:
                    role = inter.guild.get_role(int(role_id.strip()))
                    if role:
                        await member.remove_roles(role)
                except Exception as e:
                    print(f"Error removing role: {e}")
        
        conn.commit()
        
        # Create success embed
        embed = disnake.Embed(
            title="‚úÖ –†–∞–±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üë§ **–ò–≥—Ä–æ–∫:** {member.mention}\n"
                f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {job_name}\n"
                f"üëÆ **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {inter.author.mention}\n"
                f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green()
        )
        
        await inter.edit_original_response(embed=embed)
        
        # Log the action
        logs_channel = bot.get_channel(1351455653197123665)
        log_embed = disnake.Embed(
            title="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã",
            description=(
                f"üë§ **–ò–≥—Ä–æ–∫:** {member.mention}\n"
                f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {job_name}\n"
                f"üëÆ **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {inter.author.mention}\n"
                f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            ),
            color=disnake.Color.red()
        )
        await logs_channel.send(embed=log_embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)


@job_admin.sub_command(name="—Å–º–µ–Ω—ã", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö —Å–º–µ–Ω")
@commands.has_any_role('–°–º–æ—Ç—Ä—è—â–∏–π –∑–∞ RolePlay',"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–í—ã—Å—à–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
async def active_shifts(inter: ApplicationCommandInteraction):
    """Slash command for moderators to view all active work shifts"""
    try:
        await inter.response.defer(ephemeral=True)
        
        # Get all active shifts with detailed information
        cursor.execute('''
            SELECT 
                a.user_id,
                a.job_id,
                a.start_time,
                j.name AS job_name,
                j.hourly_pay,
                u.worked_hours
            FROM active_shifts a
            JOIN jobs j ON a.job_id = j.id
            JOIN user_jobs u ON a.job_id = u.job_id AND a.user_id = u.user_id
            ORDER BY a.start_time ASC
        ''')
        
        active_shifts = cursor.fetchall()
        
        if not active_shifts:
            embed = disnake.Embed(
                title="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã",
                description="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω",
                color=disnake.Color.blue()
            )
            return await inter.edit_original_response(embed=embed)
        
        # Create embed
        embed = disnake.Embed(
            title="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã",
            description=f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω: {len(active_shifts)}",
            color=disnake.Color.blue()
        )
        
        current_time = datetime.now()
        
        # Add field for each active shift
        for shift in active_shifts:
            user_id, job_id, start_time, job_name, hourly_pay, worked_hours = shift
            
            try:
                # Get user object
                user = await bot.fetch_user(user_id)
                user_mention = user.mention
            except:
                user_mention = f"ID: {user_id}"
            
            # Calculate shift duration
            start_time_dt = datetime.fromisoformat(start_time)
            duration = current_time - start_time_dt
            hours = duration.total_seconds() / 3600
            
            # Calculate earnings for this shift
            earnings = int(hours * hourly_pay)
            
            # Format duration
            hours_worked = int(duration.total_seconds() // 3600)
            minutes_worked = int((duration.total_seconds() % 3600) // 60)
            
            embed.add_field(
                name=f"üë§ {user_mention}",
                value=(
                    f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {job_name}\n"
                    f"‚è∞ **–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã:** {start_time_dt.strftime('%H:%M')}\n"
                    f"‚åõ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {hours_worked}—á {minutes_worked}–º–∏–Ω\n"
                    f"üí∞ **–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:** {earnings:,}‚ÇΩ\n"
                    f"üìä **–í—Å–µ–≥–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ:** {(worked_hours + hours):.1f}—á"
                ),
                inline=False
            )
        
        embed.set_footer(text=f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {current_time.strftime('%d.%m.%Y %H:%M')}")
        
        # Send embed
        await inter.edit_original_response(embed=embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–∞—Ö: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)

@bot.command()
async def players(ctx):
    processing_msg = await ctx.send(
        embed=disnake.Embed(
            title="‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...",
            description="–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞...",
            color=disnake.Color.blue()
        )
    )
    
    try:
        download_file_from_server()
        

        script_dir = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(script_dir, 'latest_players.json')
        

        cars_file_path = os.path.join(script_dir, 'cars.json')
        car_names = {}
        try:
            with open(cars_file_path, 'r', encoding='utf-8') as f:
                car_names = json.load(f)
        except Exception as e:
            print(f"Error loading cars.json: {e}")

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                player_data = json.load(f)
                

            embed = disnake.Embed(
                title="üéÆ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–∞—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                color=disnake.Color.green()
            )
            

            if isinstance(player_data, dict) and "playerCount" in player_data and "players" in player_data:
                total_players = player_data["playerCount"]
                players_dict = player_data["players"]
                
                embed.description = f"–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: **{total_players}**"
                
                if not players_dict:
                    embed.add_field(
                        name="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                        value="–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
                        inline=False
                    )
                else:

                    for player_id, player_info in players_dict.items():
                        player_name = player_info.get("name", f"Player {player_id}")
                        vehicles = player_info.get("vehicles", [])
                        

                        field_value = f"üÜî **ID:** {player_id}\n"
                        

                        if vehicles:
                            vehicle_count = len(vehicles)
                            field_value += f"üöó **–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:** {vehicle_count} —à—Ç.\n"
                            

                            field_value += "```\n"
                            for i, vehicle in enumerate(vehicles[:5], 1):
                                parts = vehicle.split('/')
                                base_vehicle = parts[1] if len(parts) > 1 else vehicle
                                

                                proper_name = car_names.get(base_vehicle, base_vehicle)
                                

                                field_value += f"{i}. {proper_name}\n"

                            if len(vehicles) > 5:
                                field_value += f"...–∏ –µ—â–µ {len(vehicles) - 5} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n"
                                
                            field_value += "```"
                        
                        embed.add_field(
                            name=f"üë§ {player_name}",
                            value=field_value,
                            inline=False
                        )

            elif isinstance(player_data, list):
                total_players = len(player_data)
                embed.description = f"–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: **{total_players}**"
                
                for i, player in enumerate(player_data):

                    if isinstance(player, dict):
                        player_name = player.get('name', f"Player {i+1}")
                        vehicles = player.get('vehicles', [])
                    else:
                        player_name = player if isinstance(player, str) else f"Player {i+1}"
                        vehicles = []
                    

                    field_value = f"üÜî **ID:** {i+1}\n"
                    

                    if vehicles:
                        vehicle_count = len(vehicles)
                        field_value += f"üöó **–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:** {vehicle_count} —à—Ç.\n"
                        

                        field_value += "```\n"
                        for j, vehicle in enumerate(vehicles[:5], 1):
                            parts = vehicle.split('/')
                            base_vehicle = parts[1] if len(parts) > 1 else vehicle
                            

                            proper_name = car_names.get(base_vehicle, base_vehicle)
                            

                            field_value += f"{j}. {proper_name}\n"

                        if len(vehicles) > 5:
                            field_value += f"...–∏ –µ—â–µ {len(vehicles) - 5} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n"
                            
                        field_value += "```"
                    
                    embed.add_field(
                        name=f"üë§ {player_name}",
                        value=field_value,
                        inline=False
                    )
            else:
                embed.add_field(
                    name="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    value="–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª players.json.",
                    inline=False
                )
            

            if len(embed.fields) == 0:
                embed.add_field(
                    name="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    value="–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
                    inline=False
                )
            
            embed.set_footer(text=f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
            
            await processing_msg.edit(embed=embed)
            
        except FileNotFoundError:
            await processing_msg.edit(
                embed=disnake.Embed(
                    title="‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    description=f"–§–∞–π–ª players.json –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {file_path}",
                    color=disnake.Color.red()
                )
            )
        except json.JSONDecodeError:
            await processing_msg.edit(
                embed=disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞",
                    description="–§–∞–π–ª players.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç.",
                    color=disnake.Color.red()
                )
            )
        except Exception as e:
            print(f"Error parsing player data: {e}")
            await processing_msg.edit(
                embed=disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                    description=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤: {str(e)}",
                    color=disnake.Color.red()
                )
            )
        
    except Exception as e:
        # Handle any errors
        await processing_msg.edit(
            embed=disnake.Embed(
                title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                description=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤: {str(e)}",
                color=disnake.Color.red()
            )
        )





@bot.slash_command(
    name="—Å—Ç–æ",
    description="–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –°–¢–û –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", guild=1341469479510474813    
)
async def —Å—Ç–æ(inter: disnake.ApplicationCommandInteraction):
    """Slash command to create a car service request"""
    try:
        # Create modal for car service request
        class CarServiceModal(disnake.ui.Modal):
            def __init__(self):
                components = [
                    disnake.ui.TextInput(
                        label="ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                        custom_id="car_id",
                        style=disnake.TextInputStyle.short,
                        required=True
                    ),
                    disnake.ui.TextInput(
                        label="–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π",
                        placeholder="–û–ø–∏—à–∏—Ç–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)",
                        custom_id="damage_description",
                        style=disnake.TextInputStyle.paragraph,
                        required=False,
                        max_length=1000
                    )
                ]
                
                super().__init__(
                    title="–ó–∞—è–≤–∫–∞ –Ω–∞ –°–¢–û",
                    components=components,
                    custom_id="car_service_modal"
                )
            
            async def callback(self, inter: disnake.ModalInteraction):
                await inter.response.defer(ephemeral=True)
                
                try:
                    car_id = inter.text_values["car_id"]
                    damage_description = inter.text_values["damage_description"] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    
                    # Verify car ownership
                    cursor.execute('SELECT brand, model, config FROM purchased_cars WHERE id = ? AND buyer_id = ?', 
                                  (car_id, inter.author.id))
                    car_info = cursor.fetchone()
                    
                    if not car_info:
                        return await inter.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
                                color=disnake.Color.red()
                            )
                        )
                    
                    brand, model, config = car_info
                    
                    # Store request in database
                    cursor.execute('''
                        INSERT INTO car_service_requests 
                        (user_id, car_id, brand, model, config, damage_description, status, created_at)
                        VALUES (?, ?, ?, ?, ?, ?, 'pending', ?)
                    ''', (
                        inter.author.id, car_id, brand, model, config, 
                        damage_description, datetime.now().isoformat()
                    ))
                    conn.commit()
                    
                    # Get request ID
                    request_id = cursor.lastrowid
                    
                    # Send instructions to user's DM
                    dm_embed = disnake.Embed(
                        title="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –°–¢–û",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –°–¢–û –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è **{brand} {model}** (ID: {car_id}) –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **4 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏** –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n"
                            "1Ô∏è‚É£ –§–æ—Ç–æ —Å–ø–µ—Ä–µ–¥–∏\n"
                            "2Ô∏è‚É£ –§–æ—Ç–æ —Å–∑–∞–¥–∏\n"
                            "3Ô∏è‚É£ –§–æ—Ç–æ —Å–ª–µ–≤–∞\n"
                            "4Ô∏è‚É£ –§–æ—Ç–æ —Å–ø—Ä–∞–≤–∞\n\n"
                            f"**–í–∞–∂–Ω–æ:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —ç—Ç–æ—Ç –ª–∏—á–Ω—ã–π —á–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.\n"
                            f"**ID –∑–∞—è–≤–∫–∏:** {request_id}\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.blue()
                    )
                    
                    try:
                        await inter.author.send(embed=dm_embed)
                        
                        # Set up collector for photos
                        def check(m):
                            return m.author.id == inter.author.id and m.guild is None and len(m.attachments) > 0
                        
                        photos = []
                        for i in range(4):
                            try:
                                message = await bot.wait_for('message', check=check, timeout=600)  # 10 minutes timeout
                                photos.append(message.attachments[0].url)
                            except asyncio.TimeoutError:
                                await inter.author.send(
                                    embed=disnake.Embed(
                                        title="‚è±Ô∏è –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ",
                                        description="–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
                                        color=disnake.Color.red()
                                    )
                                )
                                # Update request status to expired
                                cursor.execute('UPDATE car_service_requests SET status = "expired" WHERE id = ?', (request_id,))
                                conn.commit()
                                return
                        
                        # Update request with photo URLs
                        cursor.execute('''
                            UPDATE car_service_requests 
                            SET photo_front = ?, photo_back = ?, photo_left = ?, photo_right = ?, status = "submitted"
                            WHERE id = ?
                        ''', (photos[0], photos[1], photos[2], photos[3], request_id))
                        conn.commit()
                        
                        # Send confirmation to user
                        await inter.author.send(
                            embed=disnake.Embed(
                                title="‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã",
                                description="–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –°–¢–û.",
                                color=disnake.Color.green()
                            )
                        )
                        
                        # Create forum post in the service channel
                        service_forum = bot.get_channel(1345079715307716790)  # Replace with actual forum channel ID
                        
                        if service_forum and isinstance(service_forum, disnake.ForumChannel):
                            # Create thread in forum
                            forum_embed = disnake.Embed(
                                title=f"üîß –ó–∞—è–≤–∫–∞ –°–¢–û #{request_id}",
                                description=(
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                    f"üë§ **–ö–ª–∏–µ–Ω—Ç:** {inter.author.mention}\n"
                                    f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {brand} {model} {config}\n"
                                    f"üî¢ **ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** {car_id}\n"
                                    f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π:** {damage_description}\n\n"
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                ),
                                color=disnake.Color.gold()
                            )
                            
                            # Add photo URLs as fields
                            forum_embed.add_field(name="üì∏ –§–æ—Ç–æ —Å–ø–µ—Ä–µ–¥–∏", value="[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å](" + photos[0] + ")", inline=True)
                            forum_embed.add_field(name="üì∏ –§–æ—Ç–æ —Å–∑–∞–¥–∏", value="[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å](" + photos[1] + ")", inline=True)
                            forum_embed.add_field(name="üì∏ –§–æ—Ç–æ —Å–ª–µ–≤–∞", value="[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å](" + photos[2] + ")", inline=True)
                            forum_embed.add_field(name="üì∏ –§–æ—Ç–æ —Å–ø—Ä–∞–≤–∞", value="[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å](" + photos[3] + ")", inline=True)
                            
                            # Set first photo as thumbnail
                            forum_embed.set_thumbnail(url=photos[0])
                            
                            # Create thread with tags
                            thread = await service_forum.create_thread(
                                name=f"–°–¢–û #{request_id} - {brand} {model}",
                                embed=forum_embed,
                                content=f""  
                            )
                            

                            cursor.execute('UPDATE car_service_requests SET thread_id = ? WHERE id = ?', 
                                          (thread.thread.id, request_id))
                            conn.commit()
                        else:
   
                            print(f"Error: Forum channel not found or is not a forum channel")
                    
                    except disnake.Forbidden:
                        await inter.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞.",
                                color=disnake.Color.red()
                            )
                        )
                    

                    await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –°–¢–û —Å–æ–∑–¥–∞–Ω–∞",
                            description=(
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {brand} {model}\n"
                                f"üî¢ **ID –∑–∞—è–≤–∫–∏:** {request_id}\n\n"
                                "üì± **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.\n\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            ),
                            color=disnake.Color.green()
                        )
                    )
                    
                except Exception as e:
                    await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}",
                            color=disnake.Color.red()
                        )
                    )
        

        await inter.response.send_modal(CarServiceModal())
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –°–¢–û: {str(e)}",
            color=disnake.Color.red()
        )
        await ctx.send(embed=error_embed)




@bot.slash_command(
    name="—Ç—é–Ω–∏–Ω–≥",
    description="–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ç—é–Ω–∏–Ω–≥ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", 
    guild=1341469479510474813    
)
async def —Ç—é–Ω–∏–Ω–≥(inter: disnake.ApplicationCommandInteraction):
    """Slash command to create a car tuning request"""
    try:

        class CarTuningModal(disnake.ui.Modal):
            def __init__(self):
                components = [
                    disnake.ui.TextInput(
                        label="ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                        custom_id="car_id",
                        style=disnake.TextInputStyle.short,
                        required=True
                    ),
                    disnake.ui.TextInput(
                        label="–ñ–µ–ª–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                        placeholder="–û–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π —Ç—é–Ω–∏–Ω–≥ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å",
                        custom_id="tuning_description",
                        style=disnake.TextInputStyle.paragraph,
                        required=True,
                        max_length=1000
                    )
                ]
                
                super().__init__(
                    title="–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—é–Ω–∏–Ω–≥",
                    components=components,
                    custom_id="car_tuning_modal"
                )
            
            async def callback(self, inter: disnake.ModalInteraction):
                await inter.response.defer(ephemeral=True)
                
                try:
                    car_id = inter.text_values["car_id"]
                    tuning_description = inter.text_values["tuning_description"]
                    

                    cursor.execute('SELECT brand, model, config FROM purchased_cars WHERE id = ? AND buyer_id = ?', 
                                  (car_id, inter.author.id))
                    car_info = cursor.fetchone()
                    
                    if not car_info:
                        return await inter.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
                                color=disnake.Color.red()
                            )
                        )
                    
                    brand, model, config = car_info

                    cursor.execute('''
                        INSERT INTO car_tuning_requests 
                        (user_id, car_id, brand, model, config, tuning_description, status, created_at)
                        VALUES (?, ?, ?, ?, ?, ?, 'pending', ?)
                    ''', (
                        inter.author.id, car_id, brand, model, config, 
                        tuning_description, datetime.now().isoformat()
                    ))
                    conn.commit()
                    

                    request_id = cursor.lastrowid

                    dm_embed = disnake.Embed(
                        title="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Ç—é–Ω–∏–Ω–≥ –∞—Ç–µ–ª—å–µ",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—é–Ω–∏–Ω–≥ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è **{brand} {model}** (ID: {car_id}) –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **4 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏** –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n"
                            "1Ô∏è‚É£ –§–æ—Ç–æ —Å–ø–µ—Ä–µ–¥–∏\n"
                            "2Ô∏è‚É£ –§–æ—Ç–æ —Å–∑–∞–¥–∏\n"
                            "3Ô∏è‚É£ –§–æ—Ç–æ —Å–ª–µ–≤–∞\n"
                            "4Ô∏è‚É£ –§–æ—Ç–æ —Å–ø—Ä–∞–≤–∞\n\n"
                            f"**–í–∞–∂–Ω–æ:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —ç—Ç–æ—Ç –ª–∏—á–Ω—ã–π —á–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.\n"
                            f"**ID –∑–∞—è–≤–∫–∏:** {request_id}\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.blue()
                    )
                    
                    try:
                        await inter.author.send(embed=dm_embed)
                        

                        def check(m):
                            return m.author.id == inter.author.id and m.guild is None and len(m.attachments) > 0
                        
                        photos = []
                        for i in range(4):
                            try:
                                message = await bot.wait_for('message', check=check, timeout=600)  
                                photos.append(message.attachments[0].url)
                            except asyncio.TimeoutError:
                                await inter.author.send(
                                    embed=disnake.Embed(
                                        title="‚è±Ô∏è –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ",
                                        description="–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
                                        color=disnake.Color.red()
                                    )
                                )

                                cursor.execute('UPDATE car_tuning_requests SET status = "expired" WHERE id = ?', (request_id,))
                                conn.commit()
                                return
                        

                        cursor.execute('''
                            UPDATE car_tuning_requests 
                            SET photo_front = ?, photo_back = ?, photo_left = ?, photo_right = ?, status = "submitted"
                            WHERE id = ?
                        ''', (photos[0], photos[1], photos[2], photos[3], request_id))
                        conn.commit()
                        

                        await inter.author.send(
                            embed=disnake.Embed(
                                title="‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã",
                                description="–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Ç—é–Ω–∏–Ω–≥ –∞—Ç–µ–ª—å–µ.",
                                color=disnake.Color.green()
                            )
                        )
                        

                        tuning_forum = bot.get_channel(1345143292504834059)  
                        
                        if tuning_forum and isinstance(tuning_forum, disnake.ForumChannel):
                            # Create thread in forum
                            forum_embed = disnake.Embed(
                                title=f"üîß –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—é–Ω–∏–Ω–≥ #{request_id}",
                                description=(
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                    f"üë§ **–ö–ª–∏–µ–Ω—Ç:** {inter.author.mention}\n"
                                    f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {brand} {model} {config}\n"
                                    f"üî¢ **ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** {car_id}\n"
                                    f"üìù **–ñ–µ–ª–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:** {tuning_description}\n\n"
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                ),
                                color=disnake.Color.purple()
                            )
                            

                            forum_embed.add_field(name="üì∏ –§–æ—Ç–æ —Å–ø–µ—Ä–µ–¥–∏", value="[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å](" + photos[0] + ")", inline=True)
                            forum_embed.add_field(name="üì∏ –§–æ—Ç–æ —Å–∑–∞–¥–∏", value="[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å](" + photos[1] + ")", inline=True)
                            forum_embed.add_field(name="üì∏ –§–æ—Ç–æ —Å–ª–µ–≤–∞", value="[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å](" + photos[2] + ")", inline=True)
                            forum_embed.add_field(name="üì∏ –§–æ—Ç–æ —Å–ø—Ä–∞–≤–∞", value="[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å](" + photos[3] + ")", inline=True)
                            
     
                            forum_embed.set_thumbnail(url=photos[0])
                            
        
                            thread = await tuning_forum.create_thread(
                                name=f"–¢—é–Ω–∏–Ω–≥ #{request_id} - {brand} {model}",
                                embed=forum_embed,
                                content=f""  
                            )
                            

                            cursor.execute('UPDATE car_tuning_requests SET thread_id = ? WHERE id = ?', 
                                          (thread.thread.id, request_id))
                            conn.commit()
                        else:
                            print(f"Error: Forum channel not found or is not a forum channel")
                    
                    except disnake.Forbidden:
                        await inter.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞.",
                                color=disnake.Color.red()
                            )
                        )
                    
                    # Send confirmation to channel
                    await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—é–Ω–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω–∞",
                            description=(
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {brand} {model}\n"
                                f"üî¢ **ID –∑–∞—è–≤–∫–∏:** {request_id}\n\n"
                                "üì± **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.\n\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            ),
                            color=disnake.Color.green()
                        )
                    )
                    
                except Exception as e:
                    await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}",
                            color=disnake.Color.red()
                        )
                    )
        

        await inter.response.send_modal(CarTuningModal())
        
    except Exception as e:
        await inter.response.send_message(
            embed=disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—é–Ω–∏–Ω–≥: {str(e)}",
                color=disnake.Color.red()
            ),
            ephemeral=True
        )



@bot.slash_command(
    name="—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂",
    description="–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", 
    guild=1341469479510474813    
)
async def —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂(inter: disnake.ApplicationCommandInteraction):
    """Slash command to create a tire service request"""
    try:
        # Create modal for tire service request
        class TireServiceModal(disnake.ui.Modal):
            def __init__(self):
                components = [
                    disnake.ui.TextInput(
                        label="ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                        custom_id="car_id",
                        style=disnake.TextInputStyle.short,
                        required=True
                    ),
                    disnake.ui.TextInput(
                        label="–¢–∏–ø —É—Å–ª—É–≥–∏",
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–º–µ–Ω–∞ —à–∏–Ω, –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞, —Ä–µ–º–æ–Ω—Ç",
                        custom_id="service_type",
                        style=disnake.TextInputStyle.short,
                        required=True
                    ),
                    disnake.ui.TextInput(
                        label="–û–ø–∏—Å–∞–Ω–∏–µ",
                        placeholder="–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å",
                        custom_id="service_description",
                        style=disnake.TextInputStyle.paragraph,
                        required=True,
                        max_length=1000
                    )
                ]
                
                super().__init__(
                    title="–ó–∞—è–≤–∫–∞ –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂",
                    components=components,
                    custom_id="tire_service_modal"
                )
            
            async def callback(self, inter: disnake.ModalInteraction):
                await inter.response.defer(ephemeral=True)
                
                try:
                    car_id = inter.text_values["car_id"]
                    service_type = inter.text_values["service_type"]
                    service_description = inter.text_values["service_description"]
                    

                    cursor.execute('SELECT brand, model, config FROM purchased_cars WHERE id = ? AND buyer_id = ?', 
                                  (car_id, inter.author.id))
                    car_info = cursor.fetchone()
                    
                    if not car_info:
                        return await inter.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
                                color=disnake.Color.red()
                            )
                        )
                    
                    brand, model, config = car_info
                    

                    cursor.execute('''
                        INSERT INTO tire_service_requests 
                        (user_id, car_id, brand, model, config, service_type, service_description, status, created_at)
                        VALUES (?, ?, ?, ?, ?, ?, ?, 'pending', ?)
                    ''', (
                        inter.author.id, car_id, brand, model, config, 
                        service_type, service_description, datetime.now().isoformat()
                    ))
                    conn.commit()
                    
                    # Get request ID
                    request_id = cursor.lastrowid
                    

                    dm_embed = disnake.Embed(
                        title="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è **{brand} {model}** (ID: {car_id}) –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏**:\n"
                            "1Ô∏è‚É£ –§–æ—Ç–æ –¥–∏—Å–∫–æ–≤\n"
                            "2Ô∏è‚É£ –§–æ—Ç–æ —à–∏–Ω\n\n"
                            f"**–í–∞–∂–Ω–æ:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —ç—Ç–æ—Ç –ª–∏—á–Ω—ã–π —á–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.\n"
                            f"**ID –∑–∞—è–≤–∫–∏:** {request_id}\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.blue()
                    )
                    
                    try:
                        await inter.author.send(embed=dm_embed)
                        

                        def check(m):
                            return m.author.id == inter.author.id and m.guild is None and len(m.attachments) > 0
                        
                        photos = []
                        for i in range(2): 
                            try:
                                message = await bot.wait_for('message', check=check, timeout=600)  
                                photos.append(message.attachments[0].url)
                            except asyncio.TimeoutError:
                                await inter.author.send(
                                    embed=disnake.Embed(
                                        title="‚è±Ô∏è –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ",
                                        description="–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
                                        color=disnake.Color.red()
                                    )
                                )

                                cursor.execute('UPDATE tire_service_requests SET status = "expired" WHERE id = ?', (request_id,))
                                conn.commit()
                                return
                        

                        cursor.execute('''
                            UPDATE tire_service_requests 
                            SET photo_wheels = ?, photo_tires = ?, status = "submitted"
                            WHERE id = ?
                        ''', (photos[0], photos[1], request_id))
                        conn.commit()

                        await inter.author.send(
                            embed=disnake.Embed(
                                title="‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã",
                                description="–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞.",
                                color=disnake.Color.green()
                            )
                        )
                        

                        tire_forum = bot.get_channel(1345075265159696394)  
                        
                        if tire_forum and isinstance(tire_forum, disnake.ForumChannel):
                            # Create thread in forum
                            forum_embed = disnake.Embed(
                                title=f"üîß –ó–∞—è–≤–∫–∞ –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂ #{request_id}",
                                description=(
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                    f"üë§ **–ö–ª–∏–µ–Ω—Ç:** {inter.author.mention}\n"
                                    f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {brand} {model} {config}\n"
                                    f"üî¢ **ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** {car_id}\n"
                                    f"üîß **–¢–∏–ø —É—Å–ª—É–≥–∏:** {service_type}\n"
                                    f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {service_description}\n\n"
                                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                ),
                                color=disnake.Color.orange()
                            )
                            
                            # Add photo URLs as fields
                            forum_embed.add_field(name="üì∏ –§–æ—Ç–æ –¥–∏—Å–∫–æ–≤", value="[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å](" + photos[0] + ")", inline=True)
                            forum_embed.add_field(name="üì∏ –§–æ—Ç–æ —à–∏–Ω", value="[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å](" + photos[1] + ")", inline=True)
                            
                            # Set first photo as thumbnail
                            forum_embed.set_thumbnail(url=photos[0])
                            
                            # Create thread with tags
                            thread = await tire_forum.create_thread(
                                name=f"–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂ #{request_id} - {brand} {model}",
                                embed=forum_embed,
                                content=f""  
                            )
                            

                            cursor.execute('UPDATE tire_service_requests SET thread_id = ? WHERE id = ?', 
                                          (thread.thread.id, request_id))
                            conn.commit()
                        else:
                            print(f"Error: Forum channel not found or is not a forum channel")
                    
                    except disnake.Forbidden:
                        await inter.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞.",
                                color=disnake.Color.red()
                            )
                        )
                    
                    # Send confirmation to channel
                    await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂ —Å–æ–∑–¥–∞–Ω–∞",
                            description=(
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {brand} {model}\n"
                                f"üî¢ **ID –∑–∞—è–≤–∫–∏:** {request_id}\n\n"
                                "üì± **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.\n\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            ),
                            color=disnake.Color.green()
                        )
                    )
                    
                except Exception as e:
                    await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}",
                            color=disnake.Color.red()
                        )
                    )
        
        # Send the modal
        await inter.response.send_modal(TireServiceModal())
        
    except Exception as e:
        # Handle any errors
        await inter.response.send_message(
            embed=disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂: {str(e)}",
                color=disnake.Color.red()
            ),
            ephemeral=True
        )




@bot.slash_command(
    name="–≤—ã—Å—Ç–∞–≤–∏—Ç—å_—Å—á—ë—Ç",
    description="–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç –∑–∞ —É—Å–ª—É–≥–∏",
    guild_ids=[1341469479510474813]
)
@commands.has_any_role("–†–∞–±–æ—Ç–Ω–∏–∫ –°–¢–û", "–†–∞–±–æ—Ç–Ω–∏–∫ –¢—é–Ω–∏–Ω–≥ –ê—Ç–µ–ª—å–µ", "–†–∞–±–æ—Ç–Ω–∏–∫ –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∫–∏")
async def –≤—ã—Å—Ç–∞–≤–∏—Ç—å_—Å—á—ë—Ç(inter: disnake.ApplicationCommandInteraction):
    """Slash command to issue an invoice for services"""
    
    # Create modal for invoice creation
    class InvoiceModal(disnake.ui.Modal):
        def __init__(self):
            components = [
                disnake.ui.TextInput(
                    label="–¢–∏–ø —É—Å–ª—É–≥–∏",
                    placeholder="—Å—Ç–æ, –∞—Ç–µ–ª—å–µ –∏–ª–∏ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂",
                    custom_id="service_type",
                    style=disnake.TextInputStyle.short,
                    required=True
                ),
                disnake.ui.TextInput(
                    label="ID –∑–∞—è–≤–∫–∏",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏",
                    custom_id="request_id",
                    style=disnake.TextInputStyle.short,
                    required=True
                ),
                disnake.ui.TextInput(
                    label="–°—É–º–º–∞",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ ‚ÇΩ",
                    custom_id="amount",
                    style=disnake.TextInputStyle.short,
                    required=True
                )
            ]
            
            super().__init__(
                title="–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞",
                components=components,
                custom_id="invoice_modal"
            )
        
        async def callback(self, inter: disnake.ModalInteraction):
            await inter.response.defer(ephemeral=True)
            
            try:
                service_type = inter.text_values["service_type"].lower()
                request_id = int(inter.text_values["request_id"])
                amount = int(inter.text_values["amount"])
                
                if amount < 1:
                    return await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
                            color=disnake.Color.red()
                        )
                    )
                    
                valid_services = {
                    "—Å—Ç–æ": "car_service_requests",
                    "–∞—Ç–µ–ª—å–µ": "car_tuning_requests",
                    "—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂": "tire_service_requests"
                }
                
                # Map roles to allowed service types
                role_service_map = {
                    "–†–∞–±–æ—Ç–Ω–∏–∫ –°–¢–û": ["—Å—Ç–æ"],
                    "–†–∞–±–æ—Ç–Ω–∏–∫ –¢—é–Ω–∏–Ω–≥ –ê—Ç–µ–ª—å–µ": ["–∞—Ç–µ–ª—å–µ"],
                    "–†–∞–±–æ—Ç–Ω–∏–∫ –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∫–∏": ["—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂"]
                }
                
                # Check if user has permission for the requested service type
                has_permission = False
                for role in inter.author.roles:
                    if role.name in role_service_map and service_type in role_service_map[role.name]:
                        has_permission = True
                        break
                
                if not has_permission:
                    return await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
                            description=f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤ –∑–∞ —É—Å–ª—É–≥–∏ —Ç–∏–ø–∞ '{service_type}'",
                            color=disnake.Color.red()
                        )
                    )
                
                if service_type not in valid_services:
                    return await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —É—Å–ª—É–≥–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—Ç–æ, –∞—Ç–µ–ª—å–µ –∏–ª–∏ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂",
                            color=disnake.Color.red()
                        )
                    )
                
                # Get the table name for the service type
                table_name = valid_services[service_type]
                
                # Check if request exists and get user_id
                cursor.execute(f'SELECT user_id, brand, model, thread_id FROM {table_name} WHERE id = ?', (request_id,))
                request_info = cursor.fetchone()
                
                if not request_info:
                    return await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description=f"–ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏",
                            color=disnake.Color.red()
                        )
                    )
                
                user_id, brand, model, thread_id = request_info
                

                try:
                    user = await bot.fetch_user(user_id)
                except disnake.NotFound:
                    return await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —ç—Ç–æ–π –∑–∞—è–≤–∫–æ–π",
                            color=disnake.Color.red()
                        )
                    )
                

                service_names = {
                    "—Å—Ç–æ": "–°–¢–û",
                    "–∞—Ç–µ–ª—å–µ": "–¢—é–Ω–∏–Ω–≥ –ê—Ç–µ–ª—å–µ",
                    "—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂": "–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂"
                }
                
                invoice_embed = disnake.Embed(
                    title=f"üí∞ –°—á—ë—Ç –∑–∞ —É—Å–ª—É–≥–∏ {service_names[service_type]}",
                    description=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á—ë—Ç–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {brand} {model}\n"
                        f"üî¢ **ID –∑–∞—è–≤–∫–∏:** {request_id}\n"
                        f"üíµ **–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:** {amount}‚ÇΩ\n\n"
                        "–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                        f"`/–æ–ø–ª–∞—Ç–∏—Ç—å_—Å—á—ë—Ç {service_type} {request_id}`\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    color=disnake.Color.gold()
                )
                
                invoice_embed.set_footer(text=f"–°—á—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω: {inter.author.display_name}")
                invoice_embed.timestamp = datetime.now()

                try:
                    await user.send(embed=invoice_embed)
                except disnake.Forbidden:
                    return await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                            color=disnake.Color.red()
                        )
                    )

                # Store invoice in database
                cursor.execute('''
                    INSERT INTO service_invoices 
                    (service_type, request_id, user_id, amount, issued_by, issued_at)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (
                    service_type, request_id, user_id, amount, 
                    inter.author.id, datetime.now().isoformat()
                ))
                conn.commit()
                
                # Get invoice ID
                invoice_id = cursor.lastrowid
                
                # Send confirmation
                confirm_embed = disnake.Embed(
                    title="‚úÖ –°—á—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω",
                    description=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á—ë—Ç–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üí∞ **–°—É–º–º–∞:** {amount:,}‚ÇΩ\n"
                        f"üë§ **–ö–ª–∏–µ–Ω—Ç:** {user.mention}\n"
                        f"üî¢ **ID —Å—á—ë—Ç–∞:** {invoice_id}\n"
                        f"üîß **–¢–∏–ø —É—Å–ª—É–≥–∏:** {service_names[service_type]}\n"
                        f"üìù **ID –∑–∞—è–≤–∫–∏:** {request_id}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    color=disnake.Color.green()
                )
                await inter.edit_original_response(embed=confirm_embed)
                
                # If thread_id exists, post in the thread
                if thread_id:
                    try:
                        thread = await bot.fetch_channel(thread_id)
                        thread_embed = disnake.Embed(
                            title="üí∞ –í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á—ë—Ç",
                            description=(
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á—ë—Ç–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                f"üë§ **–ö–ª–∏–µ–Ω—Ç:** {user.mention}\n"
                                f"üíµ **–°—É–º–º–∞:** {amount:,}‚ÇΩ\n"
                                f"üî¢ **ID —Å—á—ë—Ç–∞:** {invoice_id}\n\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            ),
                            color=disnake.Color.gold()
                        )
                        thread_embed.set_footer(text=f"–í—ã—Å—Ç–∞–≤–∏–ª: {inter.author.display_name}")
                        await thread.send(embed=thread_embed)
                    except Exception as e:
                        print(f"Error posting to thread: {e}")
                
            except ValueError:
                await inter.edit_original_response(
                    embed=disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description="ID –∑–∞—è–≤–∫–∏ –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏",
                        color=disnake.Color.red()
                    )
                )
            except Exception as e:
                await inter.edit_original_response(
                    embed=disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞: {str(e)}",
                        color=disnake.Color.red()
                    )
                )
    
    # Send the modal
    await inter.response.send_modal(InvoiceModal())

@bot.slash_command(
    name="–æ–ø–ª–∞—Ç–∏—Ç—å_—Å—á—ë—Ç",
    description="–û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç –∑–∞ —É—Å–ª—É–≥–∏",
    guild_ids=[1341469479510474813]
)
async def pay_invoice(inter: disnake.ApplicationCommandInteraction):
    """–ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç–æ–≤ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª—É–≥–∏"""
    pass

@pay_invoice.sub_command(
    name="—Å—Ç–æ",
    description="–û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç –∑–∞ —É—Å–ª—É–≥–∏ –°–¢–û"
)
async def pay_car_service(
    inter: disnake.ApplicationCommandInteraction,
    request_id: int = commands.Param(description="ID –∑–∞—è–≤–∫–∏")
):
    """–û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç –∑–∞ —É—Å–ª—É–≥–∏ –°–¢–û"""
    await process_invoice_payment(inter, "—Å—Ç–æ", request_id)

@pay_invoice.sub_command(
    name="–∞—Ç–µ–ª—å–µ",
    description="–û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç –∑–∞ —É—Å–ª—É–≥–∏ —Ç—é–Ω–∏–Ω–≥ –∞—Ç–µ–ª—å–µ"
)
async def pay_tuning_service(
    inter: disnake.ApplicationCommandInteraction,
    request_id: int = commands.Param(description="ID –∑–∞—è–≤–∫–∏")
):
    """–û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç –∑–∞ —É—Å–ª—É–≥–∏ —Ç—é–Ω–∏–Ω–≥ –∞—Ç–µ–ª—å–µ"""
    await process_invoice_payment(inter, "–∞—Ç–µ–ª—å–µ", request_id)

@pay_invoice.sub_command(
    name="—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂",
    description="–û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç –∑–∞ —É—Å–ª—É–≥–∏ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞"
)
async def pay_tire_service(
    inter: disnake.ApplicationCommandInteraction,
    request_id: int = commands.Param(description="ID –∑–∞—è–≤–∫–∏")
):
    """–û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç –∑–∞ —É—Å–ª—É–≥–∏ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞"""
    await process_invoice_payment(inter, "—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", request_id)

# Helper function to process payments for all service types
async def process_invoice_payment(inter: disnake.ApplicationCommandInteraction, service_type: str, request_id: int):
    """Process payment for a service invoice"""
    try:
        await inter.response.defer(ephemeral=True)
        
        # Validate service type and get table name
        valid_services = {
            "—Å—Ç–æ": "car_service_requests",
            "–∞—Ç–µ–ª—å–µ": "car_tuning_requests",
            "—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂": "tire_service_requests"
        }
        
        table_name = valid_services[service_type]
        
        # Check if invoice exists
        cursor.execute('''
            SELECT id, amount, status, user_id 
            FROM service_invoices 
            WHERE service_type = ? AND request_id = ? AND status = 'pending'
        ''', (service_type, request_id))
        
        invoice = cursor.fetchone()
        
        if not invoice:
            return await inter.edit_original_response(
                embed=disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω",
                    color=disnake.Color.red()
                )
            )
        
        invoice_id, amount, status, user_id = invoice
        
        # Verify user is the invoice owner
        if int(user_id) != inter.author.id:
            return await inter.edit_original_response(
                embed=disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–≠—Ç–æ—Ç —Å—á—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    color=disnake.Color.red()
                )
            )
        
        # Check user balance
        bal = unbclient.get_user_bal(1341469479510474813, inter.author.id)
        if bal['cash'] < amount:
            return await inter.edit_original_response(
                embed=disnake.Embed(
                    title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                    description=f"–î–ª—è –æ–ø–ª–∞—Ç—ã —Å—á—ë—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è {amount}‚ÇΩ. –£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É {bal['cash']}‚ÇΩ",
                    color=disnake.Color.red()
                )
            )
        
        # Process payment
        new_balance = bal['cash'] - amount
        unbclient.set_user_bal(1341469479510474813, inter.author.id, cash=new_balance)
        
        # Update invoice status
        cursor.execute('''
            UPDATE service_invoices 
            SET status = 'paid', paid_at = ? 
            WHERE id = ?
        ''', (datetime.now().isoformat(), invoice_id))
        
        # Update request status
        cursor.execute(f'''
            UPDATE {table_name}
            SET status = 'paid'
            WHERE id = ?
        ''', (request_id,))
        
        conn.commit()
        
        # Send confirmation to user
        payment_embed = disnake.Embed(
            title="‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üí∞ **–°—É–º–º–∞:** {amount}‚ÇΩ\n"
                f"üßæ **ID —Å—á—ë—Ç–∞:** {invoice_id}\n"
                f"üî¢ **ID –∑–∞—è–≤–∫–∏:** {request_id}\n"
                f"üíµ **–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—á–µ—Ç—É:** {new_balance}‚ÇΩ\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green()
        )
        payment_embed.timestamp = datetime.now()
        await inter.edit_original_response(embed=payment_embed)
        
        # Get thread_id to notify in the thread
        cursor.execute(f'SELECT thread_id FROM {table_name} WHERE id = ?', (request_id,))
        thread_result = cursor.fetchone()
        
        if thread_result and thread_result[0]:
            try:
                thread = await bot.fetch_channel(thread_result[0])
                thread_embed = disnake.Embed(
                    title="üíµ –°—á—ë—Ç –æ–ø–ª–∞—á–µ–Ω",
                    description=(
                        f"–ö–ª–∏–µ–Ω—Ç {inter.author.mention} –æ–ø–ª–∞—Ç–∏–ª —Å—á—ë—Ç –Ω–∞ —Å—É–º–º—É **{amount}‚ÇΩ**\n"
                        f"**ID —Å—á—ë—Ç–∞:** {invoice_id}"
                    ),
                    color=disnake.Color.green()
                )
                await thread.send(embed=thread_embed)
            except Exception as e:
                print(f"Error posting to thread: {e}")
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å—á—ë—Ç–∞: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)



@bot.slash_command(
    name="–≤—ã–ø–∏—Å–∞—Ç—å_–ø—Ä–æ—Ç–æ–∫–æ–ª",
    description="–í—ã–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ü–î–î",
    guild_ids=[1341469479510474813]
)
@commands.has_role("–ì–ò–ë–î–î")
async def –≤—ã–ø–∏—Å–∞—Ç—å_–ø—Ä–æ—Ç–æ–∫–æ–ª(inter: disnake.ApplicationCommandInteraction):
    """Slash command to issue a traffic violation protocol"""
    
    # Create modal for protocol creation
    class TrafficViolationModal(disnake.ui.Modal):
        def __init__(self):
            components = [
                disnake.ui.TextInput(
                    label="–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –Ω–∏–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è –≤ Discord",
                    custom_id="violator_name",
                    style=disnake.TextInputStyle.short,
                    required=True
                ),
                disnake.ui.TextInput(
                    label="–î–µ—Ç–∞–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è",
                    placeholder="–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—å–∏ –ü–î–î –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏",
                    custom_id="violation_details",
                    style=disnake.TextInputStyle.paragraph,
                    required=True,
                    max_length=1000
                ),
                disnake.ui.TextInput(
                    label="–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞ (‚ÇΩ)",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞ –≤ —Ä—É–±–ª—è—Ö",
                    custom_id="fine_amount",
                    style=disnake.TextInputStyle.short,
                    required=True
                ),
                disnake.ui.TextInput(
                    label="ID –º–∞—à–∏–Ω—ã –Ω–∞ —à—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)",
                    placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –º–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞ —à—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–µ",
                    custom_id="impounded_car_id",
                    style=disnake.TextInputStyle.short,
                    required=False
                ),
                disnake.ui.TextInput(
                    label="–õ–∏—à–∞—Ç—å –ø—Ä–∞–≤? (–î–∞/–ù–µ—Ç)",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'",
                    custom_id="revoke_license",
                    style=disnake.TextInputStyle.short,
                    required=True
                )
            ]
            
            super().__init__(
                title="–ü—Ä–æ—Ç–æ–∫–æ–ª –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ü–î–î",
                components=components,
                custom_id="traffic_violation_modal"
            )
        
        async def callback(self, inter: disnake.ModalInteraction):
            await inter.response.defer(ephemeral=True)
            
            try:
                violator_name = inter.text_values["violator_name"]
                violation_details = inter.text_values["violation_details"]
                fine_amount = inter.text_values["fine_amount"]
                impounded_car_id = inter.text_values["impounded_car_id"]
                revoke_license = inter.text_values["revoke_license"].lower() == "–¥–∞"
                
                # Validate fine amount
                try:
                    fine_amount = int(fine_amount)
                    if fine_amount < 0:
                        raise ValueError("–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
                except ValueError:
                    return await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description="–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
                            color=disnake.Color.red()
                        )
                    )
                

                violator = None
                guild = inter.guild
                
                for member in guild.members:
                    if member.display_name.lower() == violator_name.lower():
                        violator = member
                        break
                    
                    if '[' in member.display_name:
                        name_part = member.display_name.split('[')[0].strip().lower()
                        if name_part == violator_name.lower():
                            violator = member
                            break
                
                if not violator:
                    return await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{violator_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                            color=disnake.Color.red()
                        )
                    )
                
                cursor.execute('SELECT MAX(id) FROM traffic_violations')
                result = cursor.fetchone()
                protocol_id = 1 if result[0] is None else result[0] + 1
                
                cursor.execute('''
                    INSERT INTO traffic_violations 
                    (id, violator_id, officer_id, violation_details, 
                     impounded_car_id, license_revoked, fine_amount, issued_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    protocol_id, violator.id, inter.author.id, violation_details, 
                    impounded_car_id if impounded_car_id else None, 
                    revoke_license, fine_amount, datetime.now().isoformat()
                ))
                conn.commit()
                
                # Create protocol embed
                protocol_embed = disnake.Embed(
                    title=f"üö® –ü—Ä–æ—Ç–æ–∫–æ–ª –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ü–î–î #{protocol_id}",
                    description=(
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üë§ **–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:** {violator.mention}\n"
                        f"üëÆ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫:** {inter.author.mention}\n"
                        f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                        f"üí∞ **–®—Ç—Ä–∞—Ñ:** {fine_amount:,}‚ÇΩ\n\n"
                        f"üìÑ **–î–µ—Ç–∞–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è:**\n{violation_details}\n\n"
                    ),
                    color=disnake.Color.red()
                )
                
                if impounded_car_id:
                    cursor.execute('SELECT brand, model, config FROM purchased_cars WHERE id = ?', (impounded_car_id,))
                    car_info = cursor.fetchone()
                    
                    if car_info:
                        brand, model, config = car_info
                        protocol_embed.add_field(
                            name="üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ —à—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–µ",
                            value=f"**ID:** {impounded_car_id}\n**–ú–∞—Ä–∫–∞:** {brand}\n**–ú–æ–¥–µ–ª—å:** {model}\n**–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:** {config}",
                            inline=False
                        )
                    else:
                        protocol_embed.add_field(
                            name="üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ —à—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–µ",
                            value=f"**ID:** {impounded_car_id}\n**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                            inline=False
                        )
                
                if revoke_license:
                    protocol_embed.add_field(
                        name="üö´ –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
                        value="**–°—Ç–∞—Ç—É—Å:** –ò–∑—ä—è—Ç–æ",
                        inline=False
                    )
                    
                    cursor.execute('UPDATE licenses SET status = "revoked" WHERE user_id = ?', (str(violator.id),))
                    conn.commit()
                protocol_embed.add_field(
                    name="‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                    value=(
                        "**!–æ–ø–ª–∞—Ç–∏—Ç—å_—à—Ç—Ä–∞—Ñ** - –æ–ø–ª–∞—Ç–∏—Ç—å —à—Ç—Ä–∞—Ñ\n"
                        "**/–∞–ø–µ–ª–ª—è—Ü–∏—è** - –ø–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é –≤ —Å—É–¥"
                    ),
                    inline=False
                )
                

                violations_forum = bot.get_channel(1346440724903759904)  
                
                if violations_forum and isinstance(violations_forum, disnake.ForumChannel):
                    thread = await violations_forum.create_thread(
                        name=f"–ü—Ä–æ—Ç–æ–∫–æ–ª #{protocol_id} - {violator.display_name}",
                        embed=protocol_embed,
                        content=f"" 
                    )
                    
                    cursor.execute('UPDATE traffic_violations SET thread_id = ? WHERE id = ?', 
                                  (thread.thread.id, protocol_id))
                    conn.commit()
                else:

                    print(f"Error: Forum channel not found or is not a forum channel")
                

                try:
                    dm_embed = disnake.Embed(
                        title="üö® –í–∞–º –≤—ã–ø–∏—Å–∞–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ü–î–î",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üëÆ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫:** {inter.author.mention}\n"
                            f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                            f"üí∞ **–®—Ç—Ä–∞—Ñ:** {fine_amount:,}‚ÇΩ\n\n"
                            f"üìÑ **–î–µ—Ç–∞–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è:**\n{violation_details}\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.red()
                    )
                    

                    if impounded_car_id and car_info:
                        dm_embed.add_field(
                            name="üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ —à—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–µ",
                            value=f"**ID:** {impounded_car_id}\n**–ú–∞—Ä–∫–∞:** {brand}\n**–ú–æ–¥–µ–ª—å:** {model}\n**–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:** {config}",
                            inline=False
                        )
                    

                    if revoke_license:
                        dm_embed.add_field(
                            name="üö´ –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
                            value="**–°—Ç–∞—Ç—É—Å:** –ò–∑—ä—è—Ç–æ\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è.",
                            inline=False
                        )
                    

                    dm_embed.add_field(
                        name="üí≥ –û–ø–ª–∞—Ç–∞ —à—Ç—Ä–∞—Ñ–∞",
                        value="–î–ª—è –æ–ø–ª–∞—Ç—ã —à—Ç—Ä–∞—Ñ–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `!–æ–ø–ª–∞—Ç–∏—Ç—å_—à—Ç—Ä–∞—Ñ` –≤ –∫–∞–Ω–∞–ª–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤!",
                        inline=False
                    )
                    
                    await violator.send(embed=dm_embed)
                except disnake.Forbidden:
                    await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                            description=f"–ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                            color=disnake.Color.orange()
                        )
                    )

                await inter.edit_original_response(
                    embed=disnake.Embed(
                        title="‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—ã–ø–∏—Å–∞–Ω",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üî¢ **ID –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:** {protocol_id}\n"
                            f"üë§ **–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:** {violator.mention}\n"
                            f"üí∞ **–®—Ç—Ä–∞—Ñ:** {fine_amount:,}‚ÇΩ\n\n"
                            "–ü—Ä–æ—Ç–æ–∫–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—Ä—É—à–∏—Ç–µ–ª—é.\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.green()
                    )
                )
                
            except Exception as e:
                await inter.edit_original_response(
                    embed=disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}",
                        color=disnake.Color.red()
                    )
                )
    

    await inter.response.send_modal(TrafficViolationModal())


@bot.slash_command(
    name="–æ–ø–ª–∞—Ç–∏—Ç—å_—à—Ç—Ä–∞—Ñ",
    description="–û–ø–ª–∞—Ç–∏—Ç—å —à—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ü–î–î",
    guild_ids=[1341469479510474813]
)
async def pay_fine_slash(inter: disnake.ApplicationCommandInteraction):
    """Slash command to pay a traffic violation fine"""
    try:
        await inter.response.defer(ephemeral=True)
        
        # Check if the command is used in a thread
        if not isinstance(inter.channel, disnake.Thread):
            return await inter.edit_original_response(content="‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç—Ä–µ–¥–µ —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏.")
        
        # Get the thread ID
        thread_id = inter.channel.id
        
        # Find the violation by thread ID
        cursor.execute('''
            SELECT id, violator_id, fine_amount, status
            FROM traffic_violations
            WHERE thread_id = ?
        ''', (thread_id,))
        
        violation = cursor.fetchone()
        
        if not violation:
            return await inter.edit_original_response(content="‚ùå –ü—Ä–æ—Ç–æ–∫–æ–ª –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–¥–∞.")
        
        protocol_id, violator_id, fine_amount, status = violation
        
        # Check if the user is the violator
        if inter.author.id != violator_id:
            return await inter.edit_original_response(content="‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —ç—Ç–æ—Ç —à—Ç—Ä–∞—Ñ.")
        
        # Check if the fine is already paid
        if status != "active":
            return await inter.edit_original_response(content="‚ÑπÔ∏è –≠—Ç–æ—Ç —à—Ç—Ä–∞—Ñ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.")
        
        # Check if the user has enough money
        user_balance = unbclient.get_user_bal(1341469479510474813, inter.author.id)
        if user_balance['cash'] < fine_amount:
            return await inter.edit_original_response(content=f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã —à—Ç—Ä–∞—Ñ–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {fine_amount:,}‚ÇΩ")
        
        # Process payment
        # Deduct money from user
        new_balance = user_balance['cash'] - fine_amount
        unbclient.set_user_bal(1341469479510474813, inter.author.id, cash=new_balance)
        
        # Update violation status
        cursor.execute('''
            UPDATE traffic_violations
            SET status = 'paid'
            WHERE id = ?
        ''', (protocol_id,))
        conn.commit()

        # Create a payment confirmation embed for the thread
        thread_embed = disnake.Embed(
            title="üí∞ –®—Ç—Ä–∞—Ñ –æ–ø–ª–∞—á–µ–Ω",
            description=(
                f"–ü—Ä–æ—Ç–æ–∫–æ–ª ‚Ññ{protocol_id} –±—ã–ª –æ–ø–ª–∞—á–µ–Ω {inter.author.mention}.\n"
                f"–°—É–º–º–∞: {fine_amount:,}‚ÇΩ\n"
                f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            ),
            color=disnake.Color.green()
        )
        await inter.channel.send(embed=thread_embed)
        
        # Send confirmation to user
        success_embed = disnake.Embed(
            title="‚úÖ –®—Ç—Ä–∞—Ñ –æ–ø–ª–∞—á–µ–Ω",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üî¢ **ID –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:** {protocol_id}\n"
                f"üí∞ **–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞:** {fine_amount:,}‚ÇΩ\n"
                f"üíµ **–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—á–µ—Ç—É:** {new_balance:,}‚ÇΩ\n\n"
                "–®—Ç—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—É—é –æ–ø–ª–∞—Ç—É!\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green()
        )
        await inter.edit_original_response(embed=success_embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —à—Ç—Ä–∞—Ñ–∞: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.edit_original_response(embed=error_embed)


@bot.slash_command(
    name="–∞–ø–µ–ª–ª—è—Ü–∏—è",
    description="–ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é –Ω–∞ —à—Ç—Ä–∞—Ñ",
    guild_ids=[1341469479510474813]
)
async def appeal_slash(inter: disnake.ApplicationCommandInteraction):
    """Slash command to appeal a traffic violation fine"""
    try:
        # Check if the command is used in a thread
        if not isinstance(inter.channel, disnake.Thread):
            return await inter.response.send_message("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç—Ä–µ–¥–µ —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏.", ephemeral=True)
        
        # Get the thread ID
        thread_id = inter.channel.id
        
        # Find the violation by thread ID
        cursor.execute('''
            SELECT id, violator_id, officer_id, fine_amount, status
            FROM traffic_violations
            WHERE thread_id = ?
        ''', (thread_id,))
        
        violation = cursor.fetchone()
        
        if not violation:
            return await inter.response.send_message("‚ùå –ü—Ä–æ—Ç–æ–∫–æ–ª –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–¥–∞.", ephemeral=True)
        
        protocol_id, violator_id, officer_id, fine_amount, status = violation
        
        # Check if the user is the violator
        if inter.author.id != violator_id:
            return await inter.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é –Ω–∞ —ç—Ç–æ—Ç —à—Ç—Ä–∞—Ñ.", ephemeral=True)
        
        # Check if the fine is already paid
        if status != "active":
            return await inter.response.send_message("‚ÑπÔ∏è –≠—Ç–æ—Ç —à—Ç—Ä–∞—Ñ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω, –∞–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", ephemeral=True)
        
        # Get officer information
        officer = await bot.fetch_user(officer_id)
        officer_name = officer.display_name if officer else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
        
        # Create modal for appeal
        class AppealModal(disnake.ui.Modal):
            def __init__(self):
                components = [
                    disnake.ui.TextInput(
                        label="–°—É—Ç—å –¥–µ–ª–∞",
                        placeholder="–ö—Ä–∞—Ç–∫–æ –∏–∑–ª–æ–∂–∏—Ç–µ —Å—É—Ç—å –≤–∞—à–µ–≥–æ –¥–µ–ª–∞. –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –∫–æ–≥–¥–∞ –∏ –≥–¥–µ.",
                        custom_id="case_details",
                        style=disnake.TextInputStyle.paragraph,
                        required=True,
                        max_length=1000
                    ),
                    disnake.ui.TextInput(
                        label="–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                        placeholder="–ß–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—É–¥—É.",
                        custom_id="demands",
                        style=disnake.TextInputStyle.paragraph,
                        required=True,
                        max_length=500
                    ),
                    disnake.ui.TextInput(
                        label="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
                        placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.",
                        custom_id="evidence",
                        style=disnake.TextInputStyle.paragraph,
                        required=True,
                        max_length=500
                    ),
                    disnake.ui.TextInput(
                        label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è",
                        placeholder="–ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è, —É–∫–∞–∂–∏—Ç–µ –∏—Ö –∑–¥–µ—Å—å.",
                        custom_id="additional_info",
                        style=disnake.TextInputStyle.paragraph,
                        required=False,
                        max_length=500
                    )
                ]
                
                super().__init__(
                    title="–ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–∞ —à—Ç—Ä–∞—Ñ",
                    components=components,
                    custom_id="appeal_modal"
                )
            
            async def callback(self, inter: disnake.ModalInteraction):
                await inter.response.defer(ephemeral=True)
                
                try:
                    case_details = inter.text_values["case_details"]
                    demands = inter.text_values["demands"]
                    evidence = inter.text_values["evidence"]
                    additional_info = inter.text_values["additional_info"]
                    
                    # Format the appeal template
                    appeal_template = (
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        "üìú **–ì–û–†–û–î–°–ö–û–ô –°–£–î –ì–û–†–û–î–ê –ú–ê–ö–°–ò–¢–ê–£–ù**\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        "üèõÔ∏è **–ê–¥—Ä–µ—Å —Å—É–¥–∞:**\n"
                        "   —É–ª. –ö–æ–º–º—É–Ω–∞—Ä–Ω–∞—è –¥.4\n"
                        "   –≥.–ú–∞–∫—Å–∏—Ç–∞—É–Ω, –ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª., 240010\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ—Ä–æ–Ω–∞—Ö ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üë§ **–ó–∞—è–≤–∏—Ç–µ–ª—å:**\n"
                        f"   {inter.author.mention}\n\n"
                        f"‚öñÔ∏è **–û—Ç–≤–µ—Ç—á–∏–∫:**\n"
                        f"   {officer.mention}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ó–ê–Ø–í–õ–ï–ù–ò–ï ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"–Ø, {inter.author.display_name}, –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–π –≤ –≥–æ—Ä–æ–¥–µ –ú–∞–∫—Å–∏—Ç–∞—É–Ω,\n"
                        "–æ–±—Ä–∞—â–∞—é—Å—å –≤ —Å—É–¥ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º –∑–∞—è–≤–ª–µ–Ω–∏–µ–º –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–µ–ª—É:\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"1Ô∏è‚É£ **–°—É—Ç—å –¥–µ–ª–∞:**\n"
                        f"   {case_details}\n\n"
                        f"2Ô∏è‚É£ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
                        f"   {demands}\n\n"
                        f"3Ô∏è‚É£ **–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:**\n"
                        f"   {evidence}\n\n"
                        f"4Ô∏è‚É£ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è:**\n"
                        f"   {additional_info if additional_info else '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.'}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –î–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    )
                    
                    # Create appeal embed for the court forum
                    appeal_embed = disnake.Embed(
                        title=f"üìú –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–∞ —à—Ç—Ä–∞—Ñ #{protocol_id}",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üë§ **–ó–∞—è–≤–∏—Ç–µ–ª—å:** {inter.author.mention}\n"
                            f"üëÆ **–û—Ç–≤–µ—Ç—á–∏–∫:** {officer.mention if officer else officer_name}\n"
                            f"üí∞ **–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞:** {fine_amount:,}‚ÇΩ\n"
                            f"üìÖ **–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.blue()
                    )
                    
                    # Create thread in court forum
                    court_forum = bot.get_channel(1343172657742352434)  # Court forum channel ID
                    
                    if court_forum and isinstance(court_forum, disnake.ForumChannel):
                        # Create thread in court forum
                        court_thread = await court_forum.create_thread(
                            name=f"–ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–∞ —à—Ç—Ä–∞—Ñ #{protocol_id} - {inter.author.display_name}",
                            embed=appeal_embed,
                            content=f"{appeal_template}"  # Mention relevant roles
                        )
                        
                        # Update violation status to "appealed"
                        cursor.execute('''
                            UPDATE traffic_violations
                            SET status = 'appealed'
                            WHERE id = ?
                        ''', (protocol_id,))
                        conn.commit()
                        
                        # Send confirmation to the original thread
                        original_thread_embed = disnake.Embed(
                            title="‚öñÔ∏è –ü–æ–¥–∞–Ω–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è",
                            description=(
                                f"–ù–∞—Ä—É—à–∏—Ç–µ–ª—å {inter.author.mention} –ø–æ–¥–∞–ª –∞–ø–µ–ª–ª—è—Ü–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ.\n"
                                f"–î–µ–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å—É–¥ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.\n"
                                f"–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ–ª–æ –≤ —Å—É–¥–µ: {court_thread.thread.jump_url}"
                            ),
                            color=disnake.Color.gold()
                        )
                        await inter.channel.send(embed=original_thread_embed)
                        
                        # Send confirmation to user
                        success_embed = disnake.Embed(
                            title="‚úÖ –ê–ø–µ–ª–ª—è—Ü–∏—è –ø–æ–¥–∞–Ω–∞",
                            description=(
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                f"üî¢ **ID –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:** {protocol_id}\n"
                                f"‚öñÔ∏è **–°—Ç–∞—Ç—É—Å:** –ü–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å—É–¥\n\n"
                                f"–í–∞—à–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞ –≤ —Å—É–¥ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                                f"–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ–ª–æ –≤ —Å—É–¥–µ: {court_thread.thread.jump_url}\n\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            ),
                            color=disnake.Color.green()
                        )
                        await inter.edit_original_response(embed=success_embed)
                    else:
                        # Log error if forum channel not found
                        print(f"Error: Court forum channel not found or is not a forum channel")
                        await inter.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª —Å—É–¥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                                color=disnake.Color.red()
                            )
                        )
                
                except Exception as e:
                    await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∞–ø–µ–ª–ª—è—Ü–∏–∏: {str(e)}",
                            color=disnake.Color.red()
                        )
                    )
        
        # Send the modal
        await inter.response.send_modal(AppealModal())
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞–ø–µ–ª–ª—è—Ü–∏–∏: {str(e)}",
            color=disnake.Color.red()
        )
        await ctx.send(embed=error_embed)






@bot.slash_command(
    name="–Ω–∞–∑–Ω–∞—á–∏—Ç—å_–∑–∞—Å–µ–¥–∞–Ω–∏–µ",
    description="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞—Å–µ–¥–∞–Ω–∏–µ —Å—É–¥–∞ –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏",
    guild_ids=[1341469479510474813]
)
async def schedule_hearing(inter: disnake.ApplicationCommandInteraction):
    """Slash command to schedule a court hearing"""
    try:
        # Check if the command is used in a thread in the court forum
        if not isinstance(inter.channel, disnake.Thread):
            return await inter.response.send_message("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç—Ä–µ–¥–µ —Å –∞–ø–µ–ª–ª—è—Ü–∏–µ–π.", ephemeral=True)
        
        # Check if user has judge role
        judge_role = disnake.utils.get(inter.guild.roles, name="–°—É–¥—å—è")
        if not judge_role or judge_role not in inter.author.roles:
            return await inter.response.send_message("‚ùå –¢–æ–ª—å–∫–æ —Å—É–¥—å–∏ –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞—Å–µ–¥–∞–Ω–∏—è —Å—É–¥–∞.", ephemeral=True)
        
        # Create modal for scheduling
        class HearingScheduleModal(disnake.ui.Modal):
            def __init__(self):
                components = [
                    disnake.ui.TextInput(
                        label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ",
                        placeholder="–£–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–∞ –∏ —Ñ–∞–º–∏–ª–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤, –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤)",
                        custom_id="additional_participants",
                        style=disnake.TextInputStyle.paragraph,
                        required=False,
                        max_length=1000
                    ),
                    disnake.ui.TextInput(
                        label="–î–∞—Ç–∞ –∑–∞—Å–µ–¥–∞–Ω–∏—è (–î–î.–ú–ú)",
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 29.03",
                        custom_id="hearing_date",
                        style=disnake.TextInputStyle.short,
                        required=True,
                        max_length=5
                    ),
                    disnake.ui.TextInput(
                        label="–í—Ä–µ–º—è –∑–∞—Å–µ–¥–∞–Ω–∏—è (–ß–ß:–ú–ú)",
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 18:30",
                        custom_id="hearing_time",
                        style=disnake.TextInputStyle.short,
                        required=True,
                        max_length=5
                    ),
                    disnake.ui.TextInput(
                        label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—Å–µ–¥–∞–Ω–∏—é",
                        placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏",
                        custom_id="hearing_notes",
                        style=disnake.TextInputStyle.paragraph,
                        required=False,
                        max_length=500
                    )
                ]
                
                super().__init__(
                    title="–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–¥–µ–±–Ω–æ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è",
                    components=components,
                    custom_id="hearing_schedule_modal"
                )
            
            async def callback(self, inter: disnake.ModalInteraction):
                await inter.response.defer(ephemeral=True)
                
                try:
                    additional_participants = inter.text_values["additional_participants"]
                    hearing_date = inter.text_values["hearing_date"]
                    hearing_time = inter.text_values["hearing_time"]
                    hearing_notes = inter.text_values["hearing_notes"]
                    
                    # Validate date format
                    try:
                        day, month = hearing_date.split('.')
                        day = int(day)
                        month = int(month)
                        if day < 1 or day > 31 or month < 1 or month > 12:
                            raise ValueError("Invalid date")
                    except:
                        return await inter.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 29.03)",
                                color=disnake.Color.red()
                            )
                        )
                    
                    # Validate time format
                    try:
                        hour, minute = hearing_time.split(':')
                        hour = int(hour)
                        minute = int(minute)
                        if hour < 0 or hour > 23 or minute < 0 or minute > 59:
                            raise ValueError("Invalid time")
                    except:
                        return await inter.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:30)",
                                color=disnake.Color.red()
                            )
                        )
                    
                    # Get thread title to extract information
                    thread_title = inter.channel.name
                    
                    # Extract protocol ID and appellant name from thread title
                    # Format: "–ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–∞ —à—Ç—Ä–∞—Ñ #123 - –ò–º—è –§–∞–º–∏–ª–∏—è"
                    protocol_id = None
                    appellant_name = None
                    
                    try:
                        if "–ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–∞ —à—Ç—Ä–∞—Ñ #" in thread_title:
                            parts = thread_title.split(" - ")
                            if len(parts) >= 2:
                                protocol_part = parts[0]
                                appellant_name = parts[1]
                                protocol_id = protocol_part.split("#")[1]
                    except:
                        pass
                    
                    # Get appellant and defendant from the database
                    appellant_id = None
                    defendant_id = None
                    
                    if protocol_id:
                        cursor.execute('''
                            SELECT violator_id, officer_id
                            FROM traffic_violations
                            WHERE id = ?
                        ''', (protocol_id,))
                        
                        violation_data = cursor.fetchone()
                        if violation_data:
                            appellant_id, defendant_id = violation_data
                    
                    # Get appellant and defendant users
                    appellant = None
                    defendant = None
                    
                    if appellant_id:
                        try:
                            appellant = await bot.fetch_user(appellant_id)
                        except:
                            pass
                    
                    if defendant_id:
                        try:
                            defendant = await bot.fetch_user(defendant_id)
                        except:
                            pass
                    
                    # Parse additional participants by name and find their Discord users
                    additional_users = []
                    additional_names = []
                    not_found_names = []
                    
                    if additional_participants:
                        # Split by commas
                        for participant_name in additional_participants.split(','):
                            participant_name = participant_name.strip()
                            if not participant_name:
                                continue
                                
                            additional_names.append(participant_name)
                            
                            # Find user by display name
                            found_user = None
                            for member in inter.guild.members:
                                # Check if the member's display name matches the participant name
                                if member.display_name.lower() == participant_name.lower():
                                    found_user = member
                                    break
                                    
                                # Also check if the name is in the format "Name Surname [tag]"
                                # Extract just the Name Surname part for comparison
                                if '[' in member.display_name:
                                    name_part = member.display_name.split('[')[0].strip()
                                    if name_part.lower() == participant_name.lower():
                                        found_user = member
                                        break
                            
                            if found_user:
                                additional_users.append(found_user)
                            else:
                                not_found_names.append(participant_name)
                    
                    # Create hearing embed
                    hearing_embed = disnake.Embed(
                        title="‚öñÔ∏è –ù–∞–∑–Ω–∞—á–µ–Ω–æ —Å—É–¥–µ–±–Ω–æ–µ –∑–∞—Å–µ–¥–∞–Ω–∏–µ",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üìÖ **–î–∞—Ç–∞:** {hearing_date}.{datetime.now().year}\n"
                            f"‚è∞ **–í—Ä–µ–º—è:** {hearing_time}\n"
                            f"üë®‚Äç‚öñÔ∏è **–°—É–¥—å—è:** {inter.author.mention}\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        ),
                        color=disnake.Color.blue()
                    )
                    
                    # Add participants to description
                    participants_text = ""
                    if appellant:
                        participants_text += f"üë§ **–ò—Å—Ç–µ—Ü:** {appellant.mention}\n"
                    
                    if defendant:
                        participants_text += f"üë§ **–û—Ç–≤–µ—Ç—á–∏–∫:** {defendant.mention}\n"
                    
                    if additional_users or not_found_names:
                        participants_text += f"üë• **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:**\n"
                        
                        for user in additional_users:
                            participants_text += f"‚Ä¢ {user.mention}\n"
                        
                        for name in not_found_names:
                            participants_text += f"‚Ä¢ {name} (–Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)\n"
                    
                    hearing_embed.description += participants_text + "\n"
                    
                    # Add notes if provided
                    if hearing_notes:
                        hearing_embed.add_field(
                            name="üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                            value=hearing_notes,
                            inline=False
                        )
                    
                    # Add footer
                    hearing_embed.set_footer(text=f"–î–µ–ª–æ ‚Ññ{protocol_id if protocol_id else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ‚Ä¢ –ì–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥ –ú–∞–∫—Å–∏—Ç–∞—É–Ω–∞")
                    
                    # Create mentions string for notification
                    mentions = []
                    if appellant:
                        mentions.append(appellant.mention)
                    if defendant:
                        mentions.append(defendant.mention)
                    for user in additional_users:
                        mentions.append(user.mention)
                    
                    mentions_text = " ".join(mentions) if mentions else ""
                    
                    # Send hearing announcement to the thread
                    await inter.channel.send(
                        embed=hearing_embed
                    )
                    
                    # Send confirmation to the judge
                    success_embed = disnake.Embed(
                        title="‚úÖ –ó–∞—Å–µ–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üìÖ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {hearing_date}.{datetime.now().year} –≤ {hearing_time}\n"
                            f"üë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(additional_names) + (1 if appellant else 0) + (1 if defendant else 0)}\n"
                            f"üîç **–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(additional_users) + (1 if appellant else 0) + (1 if defendant else 0)}\n"
                            f"‚ö†Ô∏è **–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(not_found_names)}\n\n"
                            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤ —Ç—Ä–µ–¥–µ.\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.green()
                    )
                    await inter.edit_original_response(embed=success_embed)
                    
                    # Try to send DM notifications to participants
                    notification_embed = disnake.Embed(
                        title="‚öñÔ∏è –í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ —Å—É–¥–µ–±–Ω–æ–µ –∑–∞—Å–µ–¥–∞–Ω–∏–µ",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üìÖ **–î–∞—Ç–∞:** {hearing_date}.{datetime.now().year}\n"
                            f"‚è∞ **–í—Ä–µ–º—è:** {hearing_time}\n"
                            f"üë®‚Äç‚öñÔ∏è **–°—É–¥—å—è:** {inter.author.display_name}\n"
                            f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ–ª–æ:** {inter.channel.jump_url}\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–æ–≤—Ä–µ–º—è. –ù–µ—è–≤–∫–∞ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞.\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.blue()
                    )
                    
                    # Send DMs to all participants
                    all_participants = []
                    if appellant:
                        all_participants.append(appellant)
                    if defendant:
                        all_participants.append(defendant)
                    all_participants.extend(additional_users)
                    
                    for participant in all_participants:
                        try:
                            await participant.send(embed=notification_embed)
                        except:
                            # Ignore errors if DM can't be sent
                            pass
                
                except Exception as e:
                    await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞—Å–µ–¥–∞–Ω–∏—è: {str(e)}",
                            color=disnake.Color.red()
                        )
                    )
        
        # Send the modal
        await inter.response.send_modal(HearingScheduleModal())
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–æ—Ä–º—ã: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.response.send_message(embed=error_embed, ephemeral=True)

@bot.slash_command(
    name="–≤—ã–Ω–µ—Å—Ç–∏_–≤–µ—Ä–¥–∏–∫—Ç",
    description="–í—ã–Ω–µ—Å—Ç–∏ —Å—É–¥–µ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏",
    guild_ids=[1341469479510474813]
)
async def issue_verdict(inter: disnake.ApplicationCommandInteraction):
    """Slash command to issue a court verdict"""
    try:
        # Check if the command is used in a thread in the court forum
        if not isinstance(inter.channel, disnake.Thread):
            return await inter.response.send_message("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç—Ä–µ–¥–µ —Å –∞–ø–µ–ª–ª—è—Ü–∏–µ–π.", ephemeral=True)
        
        # Check if user has judge role
        judge_role = disnake.utils.get(inter.guild.roles, name="–°—É–¥—å—è")
        if not judge_role or judge_role not in inter.author.roles:
            return await inter.response.send_message("‚ùå –¢–æ–ª—å–∫–æ —Å—É–¥—å–∏ –º–æ–≥—É—Ç –≤—ã–Ω–æ—Å–∏—Ç—å —Å—É–¥–µ–±–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.", ephemeral=True)
        
        # Get thread title to extract information
        thread_title = inter.channel.name
        
        # Extract protocol ID and appellant name from thread title
        # Format: "–ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–∞ —à—Ç—Ä–∞—Ñ #123 - –ò–º—è –§–∞–º–∏–ª–∏—è"
        protocol_id = None
        appellant_name = None
        
        try:
            if "–ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–∞ —à—Ç—Ä–∞—Ñ #" in thread_title:
                parts = thread_title.split(" - ")
                if len(parts) >= 2:
                    protocol_part = parts[0]
                    appellant_name = parts[1]
                    protocol_id = protocol_part.split("#")[1]
        except:
            pass
        
        if not protocol_id:
            return await inter.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–¥–∞.", ephemeral=True)
        
        # Get violation details from database
        cursor.execute('''
            SELECT violator_id, officer_id, fine_amount, status
            FROM traffic_violations
            WHERE id = ?
        ''', (protocol_id,))
        
        violation = cursor.fetchone()
        
        if not violation:
            return await inter.response.send_message("‚ùå –ü—Ä–æ—Ç–æ–∫–æ–ª –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", ephemeral=True)
        
        violator_id, officer_id, fine_amount, status = violation
        
        # Check if the violation is in appealed status
        if status != "appealed":
            return await inter.response.send_message("‚ùå –≠—Ç–æ—Ç —à—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –≤ —Å—É–¥–µ.", ephemeral=True)
        
        # Create modal for verdict
        class VerdictModal(disnake.ui.Modal):
            def __init__(self):
                components = [
                    disnake.ui.TextInput(
                        label="–†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞",
                        placeholder="–í–∏–Ω–æ–≤–µ–Ω / –ù–µ –≤–∏–Ω–æ–≤–µ–Ω / –í–∏–Ω–æ–≤–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ",
                        custom_id="verdict_decision",
                        style=disnake.TextInputStyle.short,
                        required=True,
                        max_length=50
                    ),
                    disnake.ui.TextInput(
                        label="–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞ (‚ÇΩ)",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ –∏–ª–∏ 0, –µ—Å–ª–∏ —à—Ç—Ä–∞—Ñ –æ—Ç–º–µ–Ω–µ–Ω",
                        custom_id="fine_amount",
                        style=disnake.TextInputStyle.short,
                        required=True,
                        max_length=10
                    ),
                    disnake.ui.TextInput(
                        label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏",
                        placeholder="–£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ª–∏—à–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)",
                        custom_id="additional_sanctions",
                        style=disnake.TextInputStyle.paragraph,
                        required=False,
                        max_length=500
                    ),
                    disnake.ui.TextInput(
                        label="–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
                        placeholder="–£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è",
                        custom_id="verdict_reasoning",
                        style=disnake.TextInputStyle.paragraph,
                        required=True,
                        max_length=1000
                    )
                ]
                
                super().__init__(
                    title="–í—ã–Ω–µ—Å–µ–Ω–∏–µ —Å—É–¥–µ–±–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è",
                    components=components,
                    custom_id="verdict_modal"
                )
            
            async def callback(self, inter: disnake.ModalInteraction):
                await inter.response.defer(ephemeral=True)
                
                try:
                    verdict_decision = inter.text_values["verdict_decision"].strip()
                    fine_amount_text = inter.text_values["fine_amount"].strip()
                    additional_sanctions = inter.text_values["additional_sanctions"]
                    verdict_reasoning = inter.text_values["verdict_reasoning"]
                    
                    # Validate verdict decision
                    valid_decisions = ["–≤–∏–Ω–æ–≤–µ–Ω", "–Ω–µ –≤–∏–Ω–æ–≤–µ–Ω", "–≤–∏–Ω–æ–≤–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ"]
                    if verdict_decision.lower() not in valid_decisions:
                        return await inter.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: –í–∏–Ω–æ–≤–µ–Ω / –ù–µ –≤–∏–Ω–æ–≤–µ–Ω / –í–∏–Ω–æ–≤–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ",
                                color=disnake.Color.red()
                            )
                        )
                    
                    # Validate fine amount
                    if not fine_amount_text.isdigit():
                        return await inter.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏.",
                                color=disnake.Color.red()
                            )
                        )
                    
                    new_fine_amount = int(fine_amount_text)
                    if new_fine_amount < 0:
                        return await inter.edit_original_response(
                            embed=disnake.Embed(
                                title="‚ùå –û—à–∏–±–∫–∞",
                                description="–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.",
                                color=disnake.Color.red()
                            )
                        )
                    
                    # Get appellant and officer users
                    appellant = None
                    officer = None
                    
                    if violator_id:
                        try:
                            appellant = await bot.fetch_user(violator_id)
                        except:
                            pass
                    
                    if officer_id:
                        try:
                            officer = await bot.fetch_user(officer_id)
                        except:
                            pass
                    
                    # Format the verdict template
                    verdict_template = (
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        "üìú **–†–ï–®–ï–ù–ò–ï –°–£–î–ê**\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        "**–ò–ú–ï–ù–ï–ú –†–û–°–°–ò–ô–°–ö–û–ô –§–ï–î–ï–†–ê–¶–ò–ò**\n\n"
                        f"–ì–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥ –≥–æ—Ä–æ–¥–∞ –ú–∞–∫—Å–∏—Ç–∞—É–Ω –≤ —Å–æ—Å—Ç–∞–≤–µ:\n"
                        f"–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É—é—â–µ–≥–æ —Å—É–¥—å–∏ {inter.author.mention},\n"
                        f"–ø—Ä–∏ —Å–µ–∫—Ä–µ—Ç–∞—Ä–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è —Å—É–¥–∞ –ú–∞–∫—Å–∏—á–∞–π,\n"
                        f"—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–≤ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º —Å—É–¥–µ–±–Ω–æ–º –∑–∞—Å–µ–¥–∞–Ω–∏–∏ –¥–µ–ª–æ –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–æ–Ω–Ω–æ–π –∂–∞–ª–æ–±–µ\n"
                        f"{appellant.mention if appellant else appellant_name} –Ω–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–∞ ‚Ññ{protocol_id},\n\n"
                        "**–£–°–¢–ê–ù–û–í–ò–õ:**\n\n"
                        f"{verdict_reasoning}\n\n"
                        "**–ü–û–°–¢–ê–ù–û–í–ò–õ:**\n\n"
                        f"–ü—Ä–∏–∑–Ω–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ {appellant.mention if appellant else appellant_name} **{verdict_decision}** –≤ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è.\n\n"
                    )
                    
                    # Add fine information based on verdict
                    if verdict_decision.lower() == "–Ω–µ –≤–∏–Ω–æ–≤–µ–Ω":
                        verdict_template += (
                            f"–û—Ç–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∞—Ñ –≤ —Ä–∞–∑–º–µ—Ä–µ {fine_amount:,}‚ÇΩ, –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º ‚Ññ{protocol_id}.\n\n"
                        )
                    elif new_fine_amount == 0:
                        verdict_template += (
                            f"–û—Ç–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∞—Ñ –≤ —Ä–∞–∑–º–µ—Ä–µ {fine_amount:,}‚ÇΩ, –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º ‚Ññ{protocol_id}.\n\n"
                        )
                    elif new_fine_amount != fine_amount:
                        verdict_template += (
                            f"–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞ —Å {fine_amount:,}‚ÇΩ –Ω–∞ {new_fine_amount:,}‚ÇΩ.\n\n"
                        )
                    else:
                        verdict_template += (
                            f"–û—Å—Ç–∞–≤–∏—Ç—å –≤ —Å–∏–ª–µ —à—Ç—Ä–∞—Ñ –≤ —Ä–∞–∑–º–µ—Ä–µ {fine_amount:,}‚ÇΩ, –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º ‚Ññ{protocol_id}.\n\n"
                        )
                    
                    # Add additional sanctions if provided
                    if additional_sanctions:
                        verdict_template += (
                            f"**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏:**\n"
                            f"{additional_sanctions}\n\n"
                        )
                    
                    # Add footer
                    verdict_template += (
                        f"–†–µ—à–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.\n\n"
                        f"–°—É–¥—å—è: {inter.author.display_name}\n"
                        f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    )
                    
                    # Create verdict embed
                    verdict_embed = disnake.Embed(
                        title=f"‚öñÔ∏è –†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞ –ø–æ –¥–µ–ª—É ‚Ññ{protocol_id}",
                        description=verdict_template,
                        color=disnake.Color.dark_blue()
                    )
                    
                    # Send verdict to the thread
                    mentions = []
                    if appellant:
                        mentions.append(appellant.mention)
                    if officer:
                        mentions.append(officer.mention)
                    
                    mentions_text = " ".join(mentions) if mentions else ""
                    
                    await inter.channel.send(
                        content=mentions_text,
                        embed=verdict_embed
                    )
                    
                    # Update violation status and fine amount in database
                    new_status = "active"  # Default status if fine is still active
                    
                    if verdict_decision.lower() == "–Ω–µ –≤–∏–Ω–æ–≤–µ–Ω" or new_fine_amount == 0:
                        new_status = "cancelled"  # Cancel the fine
                    else:
                        new_status = "modified" if new_fine_amount != fine_amount else "active"
                    
                    cursor.execute('''
                        UPDATE traffic_violations
                        SET status = ?, fine_amount = ?
                        WHERE id = ?
                    ''', (new_status, new_fine_amount, protocol_id))
                    conn.commit()
                    
                    # Send confirmation to the judge
                    success_embed = disnake.Embed(
                        title="‚úÖ –†–µ—à–µ–Ω–∏–µ –≤—ã–Ω–µ—Å–µ–Ω–æ",
                        description=(
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üî¢ **ID –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:** {protocol_id}\n"
                            f"‚öñÔ∏è **–†–µ—à–µ–Ω–∏–µ:** {verdict_decision}\n"
                            f"üí∞ **–®—Ç—Ä–∞—Ñ:** {new_fine_amount:,}‚ÇΩ "
                            f"({'–æ—Ç–º–µ–Ω–µ–Ω' if new_status == 'cancelled' else '–∏–∑–º–µ–Ω–µ–Ω' if new_status == 'modified' else '–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'})\n\n"
                            "–†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Ç—Ä–µ–¥–µ –∏ –≤—Å—Ç—É–ø–∏–ª–æ –≤ —Å–∏–ª—É.\n\n"
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                        ),
                        color=disnake.Color.green()
                    )
                    await inter.edit_original_response(embed=success_embed)
                    
                    # Send notification to the original violation thread
                    try:
                        # Get the original thread
                        cursor.execute('''
                            SELECT thread_id
                            FROM traffic_violations
                            WHERE id = ?
                        ''', (protocol_id,))
                        
                        original_thread_data = cursor.fetchone()
                        if original_thread_data:
                            original_thread_id = original_thread_data[0]
                            original_thread = bot.get_channel(original_thread_id)
                            
                            if original_thread:
                                # Create notification embed
                                notification_embed = disnake.Embed(
                                    title="‚öñÔ∏è –†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞",
                                    description=(
                                        f"–ü–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏ –Ω–∞ —à—Ç—Ä–∞—Ñ #{protocol_id} –≤—ã–Ω–µ—Å–µ–Ω–æ —Å—É–¥–µ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.\n\n"
                                        f"**–†–µ—à–µ–Ω–∏–µ:** {verdict_decision}\n"
                                        f"**–®—Ç—Ä–∞—Ñ:** {new_fine_amount:,}‚ÇΩ "
                                        f"({'–æ—Ç–º–µ–Ω–µ–Ω' if new_status == 'cancelled' else '–∏–∑–º–µ–Ω–µ–Ω' if new_status == 'modified' else '–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'})\n\n"
                                        f"**–°—É–¥—å—è:** {inter.author.mention}\n"
                                        f"**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}\n\n"
                                        f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ—à–µ–Ω–∏—è: {inter.channel.jump_url}"
                                    ),
                                    color=disnake.Color.dark_blue()
                                )
                                
                                await original_thread.send(embed=notification_embed)
                    except Exception as e:
                        print(f"Error sending notification to original thread: {e}")
                    
                    # Send DM notification to appellant
                    if appellant:
                        try:
                            dm_embed = disnake.Embed(
                                title="‚öñÔ∏è –†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞ –ø–æ –≤–∞—à–µ–π –∞–ø–µ–ª–ª—è—Ü–∏–∏",
                                description=(
                                    f"–ü–æ –≤–∞—à–µ–π –∞–ø–µ–ª–ª—è—Ü–∏–∏ –Ω–∞ —à—Ç—Ä–∞—Ñ #{protocol_id} –≤—ã–Ω–µ—Å–µ–Ω–æ —Å—É–¥–µ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.\n\n"
                                    f"**–†–µ—à–µ–Ω–∏–µ:** {verdict_decision}\n"
                                    f"**–®—Ç—Ä–∞—Ñ:** {new_fine_amount:,}‚ÇΩ "
                                    f"({'–æ—Ç–º–µ–Ω–µ–Ω' if new_status == 'cancelled' else '–∏–∑–º–µ–Ω–µ–Ω' if new_status == 'modified' else '–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'})\n\n"
                                    f"**–°—É–¥—å—è:** {inter.author.mention}\n"
                                    f"**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}\n\n"
                                    f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ—à–µ–Ω–∏—è: {inter.channel.jump_url}"
                                ),
                                color=disnake.Color.dark_blue()
                            )
                            
                            await appellant.send(embed=dm_embed)
                        except:
                            pass
                
                except Exception as e:
                    await inter.edit_original_response(
                        embed=disnake.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞",
                            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–Ω–µ—Å–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è: {str(e)}",
                            color=disnake.Color.red()
                        )
                    )
        
        # Send the modal
        await inter.response.send_modal(VerdictModal())
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–æ—Ä–º—ã: {str(e)}",
            color=disnake.Color.red()
        )
        await inter.response.send_message(embed=error_embed, ephemeral=True)

@bot.command()
async def –æ–±–Ω–æ–≤–∏—Ç—å_—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è(ctx):
    """Updates vehicle spawn permissions for all users based on their owned cars, rentals, and jobs"""
    # Check if user has admin permissions
    if not ctx.author.guild_permissions.administrator:
        embed = disnake.Embed(
            title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
            description="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
            color=disnake.Color.red()
        )
        return await ctx.send(embed=embed)
    
    try:
        # Initial response
        initial_embed = disnake.Embed(
            title="‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...",
            description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —Å–ø–∞–≤–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            color=disnake.Color.yellow()
        )
        message = await ctx.send(embed=initial_embed)
        
        # Get all users with purchased cars
        cursor.execute('SELECT DISTINCT buyer_id FROM purchased_cars')
        user_ids = [row[0] for row in cursor.fetchall()]
        
        # Get all users with active rentals
        cursor.execute('''
            SELECT DISTINCT renter_id FROM rentcar 
            WHERE status = 'active' AND end_time > ?
        ''', (datetime.now().isoformat(),))
        renter_ids = [row[0] for row in cursor.fetchall()]
        
        # Get all users with jobs
        cursor.execute('SELECT DISTINCT user_id FROM user_jobs')
        job_user_ids = [row[0] for row in cursor.fetchall()]
        
        # Combine all user IDs (remove duplicates)
        all_user_ids = list(set(user_ids + renter_ids + job_user_ids))
        
        # Process statistics
        total_users = len(all_user_ids)
        processed_users = 0
        successful_users = 0
        failed_users = 0
        total_vehicles_added = 0
        
        # Process each user
        for user_id in all_user_ids:
            try:
                # Get user object
                member = None
                try:
                    member = await ctx.guild.fetch_member(user_id)
                except:
                    # User might not be in the guild anymore
                    continue
                
                if not member:
                    continue
                
                display_name = member.display_name
                
                # Get all cars owned by the user
                cursor.execute('''
                    SELECT brand, model 
                    FROM purchased_cars 
                    WHERE buyer_id = ?
                ''', (user_id,))
                owned_cars = cursor.fetchall()
                
                # Get all rented cars
                cursor.execute('''
                    SELECT pc.brand, pc.model
                    FROM rentcar rc
                    JOIN purchased_cars pc ON rc.car_id = pc.id
                    WHERE rc.renter_id = ? AND rc.status = 'active'
                    AND rc.end_time > ?
                ''', (user_id, datetime.now().isoformat()))
                rented_cars = cursor.fetchall()
                
                # Combine owned and rented cars
                all_cars = owned_cars + rented_cars
                
                # Get job-related vehicles
                job_vehicles = []
                
                # Get user's jobs from user_jobs table
                cursor.execute('SELECT job_id FROM user_jobs WHERE user_id = ?', (user_id,))
                job_ids = [row[0] for row in cursor.fetchall()]
                
                # Get vehicles for each job from addjobs table
                for job_id in job_ids:
                    cursor.execute('SELECT car FROM addjobs WHERE job_id = ?', (job_id,))
                    job_cars = [row[0] for row in cursor.fetchall()]
                    job_vehicles.extend(job_cars)
                
                # Process all vehicles for this user
                user_success = True
                vehicles_added = 0
                
                # Process owned and rented cars
                for brand, model in all_cars:
                    vehicle_name = f"{brand} {model}"
                    result = await carmanager(display_name, "–¥–æ–±–∞–≤–∏—Ç—å", vehicle_name)
                    if result:
                        vehicles_added += 1
                    else:
                        user_success = False
                
                # Process job vehicles
                for vehicle in job_vehicles:
                    result = await carmanager(display_name, "–¥–æ–±–∞–≤–∏—Ç—å", vehicle)
                    if result:
                        vehicles_added += 1
                    else:
                        user_success = False
                
                # Update statistics
                processed_users += 1
                if user_success:
                    successful_users += 1
                else:
                    failed_users += 1
                total_vehicles_added += vehicles_added
                
                # Update progress every 5 users
                if processed_users % 5 == 0:
                    progress_embed = disnake.Embed(
                        title="‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...",
                        description=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_users}/{total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
                        color=disnake.Color.yellow()
                    )
                    await message.edit(embed=progress_embed)
                
            except Exception as e:
                print(f"Error processing user {user_id}: {e}")
                failed_users += 1
                processed_users += 1
        
        # Create result embed
        result_embed = disnake.Embed(
            title="‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            color=disnake.Color.green()
        )
        
        # Add summary field
        result_embed.add_field(
            name="üìä –°–≤–æ–¥–∫–∞",
            value=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users}\n"
                f"‚úÖ **–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {successful_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                f"‚ùå **–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:** {failed_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                f"üöó **–í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¢–°:** {total_vehicles_added}\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            inline=False
        )
        
        result_embed.set_footer(text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Ä¢ {datetime.now().strftime('%d.%m.%Y %H:%M')}")
        
        await message.edit(embed=result_embed)
        
        # Log the action
        logs_channel = bot.get_channel(1351455653197123665)
        logs_embed = disnake.Embed(
            title="üîÑ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üë§ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {ctx.author.mention}\n"
                f"üë• **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {processed_users}/{total_users}\n"
                f"üöó **–î–æ–±–∞–≤–ª–µ–Ω–æ –¢–°:** {total_vehicles_added}\n"
                f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.blue()
        )
        await logs_channel.send(embed=logs_embed)
        
    except Exception as e:
        error_embed = disnake.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {str(e)}",
            color=disnake.Color.red()
        )
        await ctx.send(embed=error_embed)




def load_car_names_mapping():
    try:
        # Use relative path to the current script directory
        script_dir = os.path.dirname(os.path.abspath(__file__))
        cars_json_path = os.path.join(script_dir, "cars_names.json")
        
        with open(cars_json_path, "r", encoding="utf-8") as f:
            car_mapping = json.load(f)
            # Create reverse mapping (display name -> internal name)
            reverse_mapping = {v.lower(): k for k, v in car_mapping.items()}
            return car_mapping, reverse_mapping
    except Exception as e:
        print(f"Error loading car names mapping: {e}")
        return {}, {}

# Load car mappings at startup
car_mapping, reverse_car_mapping = load_car_names_mapping()

# Function to convert car name to internal format
def convert_car_name(car_name):
    """Convert user-friendly car name to internal BeamMP format"""
    car_name_lower = car_name.lower()
    
    # Check if the car name exists in our reverse mapping
    if car_name_lower in reverse_car_mapping:
        internal_car_name = reverse_car_mapping[car_name_lower]
        display_name = car_name
    else:
        # Check if it's already an internal name
        if car_name in car_mapping:
            internal_car_name = car_name
            display_name = car_mapping[car_name]
        else:
            internal_car_name = car_name
            display_name = car_name
    
    return internal_car_name, display_name

async def carmanager(discord_name: str, action: str, car_name: str = None):
    try:
        # Extract BeamMP nickname from discord_name
        if '[' in discord_name and ']' in discord_name:
            beammp_nick = discord_name.split('[')[1].split(']')[0]
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ò–º—è[–ù–∏–∫_BeamMP]")
            return
        
        # Check if action is valid
        action = action.lower()
        if action not in ["–¥–æ–±–∞–≤–∏—Ç—å", "—É–¥–∞–ª–∏—Ç—å"]:
            print("–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        
        # For both actions, car_name is required
        if not car_name:
            print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã.")
        # Convert car name to internal format using the local function
        internal_car_name, display_name = convert_car_name(car_name)
        
        # If the car wasn't found in the mapping, send a warning
        if internal_car_name == car_name and display_name == car_name and car_name not in car_mapping:
            print("–∞–≤—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        
        # Perform the requested action
        if action == "–¥–æ–±–∞–≤–∏—Ç—å":
            result = add_car_to_player(beammp_nick, internal_car_name)
            if result:
                return True
            else:
                return False
        else:  # action == "—É–¥–∞–ª–∏—Ç—å"
            result = remove_car_from_player(beammp_nick, internal_car_name)
            if result:
                return True
            else:
                return False
    
    except Exception as e:
        await ctx.send(
            embed=disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}",
                color=disnake.Color.red()
            )
        )
        return False

@bot.command()
@commands.has_permissions(administrator=True)
async def removemon(ctx, user: disnake.Member, price: int):
    """Command to remove money from a user's balance"""
    try:
        # Get current user balance
        bal = unbclient.get_user_bal(1341469479510474813, user.id)
        
        # Calculate new balance after deduction
        new_buyer_bal = bal['cash'] - price
        
        # Update user balance
        unbclient.set_user_bal(1341469479510474813, user.id, cash=new_buyer_bal)
        
        # Create success embed
        success_embed = disnake.Embed(
            title="üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –î–µ—Ç–∞–ª–∏ –û–ø–µ—Ä–∞—Ü–∏–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.mention}\n"
                f"üíµ **–°—É–º–º–∞:** {price:,}‚ÇΩ\n"
                f"üí∞ **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {new_buyer_bal:,}‚ÇΩ\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green()
        )
        await ctx.send(embed=success_embed)
        
    except Exception as e:
        # Create error embed
        error_embed = disnake.Embed(
            title="‚ùå Error",
            description=f"Failed to update balance: {str(e)}",
            color=disnake.Color.red()
        )
        await ctx.send(embed=error_embed)



@bot.slash_command(
    name="–∞–≤—Ç–æ—à–∫–æ–ª–∞",
    description="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—à–∫–æ–ª–æ–π",
    guild_ids=[1341469479510474813]
)
async def driving_school(inter: disnake.ApplicationCommandInteraction):
    """Group command for driving school management"""
    pass

@driving_school.sub_command(
    name="–Ω–∞—á–∞—Ç—å_—ç–∫–∑–∞–º–µ–Ω",
    description="–ù–∞—á–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é –¥–ª—è —É—á–µ–Ω–∏–∫–∞"
)
@commands.has_any_role("–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B","–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ C","–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ D", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
async def start_exam(
    inter: disnake.ApplicationCommandInteraction,
    —É—á–µ–Ω–∏–∫: disnake.Member = commands.Param(description="–£—á–µ–Ω–∏–∫, —Å–¥–∞—é—â–∏–π —ç–∫–∑–∞–º–µ–Ω"),
    –∫–∞—Ç–µ–≥–æ—Ä–∏—è: str = commands.Param(
        description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤", 
        choices=["B", "C", "D", "E"]
    )
):
    """Start a driving exam for a student"""
    try:
        await inter.response.defer(ephemeral=True)
        
        student_display_name = —É—á–µ–Ω–∏–∫.display_name
        
        if '[' not in student_display_name or ']' not in student_display_name:
            return await inter.edit_original_response(
                embed=disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description=f"–£ —É—á–µ–Ω–∏–∫–∞ {—É—á–µ–Ω–∏–∫.mention} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–Ω–µ–π–º–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: –ò–º—è [–ù–∏–∫_BeamMP]",
                    color=disnake.Color.red()
                )
            )
        
        cursor.execute('''
            SELECT category, status FROM licenses 
            WHERE user_id = ? AND category = ?
        ''', (str(—É—á–µ–Ω–∏–∫.id), –∫–∞—Ç–µ–≥–æ—Ä–∏—è))
        
        existing_license = cursor.fetchone()
        if existing_license and existing_license[1] == "active":
            return await inter.edit_original_response(
                embed=disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description=f"–£ —É—á–µ–Ω–∏–∫–∞ {—É—á–µ–Ω–∏–∫.mention} —É–∂–µ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {–∫–∞—Ç–µ–≥–æ—Ä–∏—è}",
                    color=disnake.Color.red()
                )
            )
        
        test_vehicle = "Lada2110"  
        
        cursor.execute('''
            INSERT INTO driving_exams 
            (student_id, instructor_id, category, status, start_time)
            VALUES (?, ?, ?, 'in_progress', ?)
        ''', (
            —É—á–µ–Ω–∏–∫.id, inter.author.id, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, datetime.now().isoformat()
        ))
        conn.commit()
        
        exam_id = cursor.lastrowid
        
        try:
            beammp_name = student_display_name.split('[')[1].split(']')[0]
            result = add_car_to_player(beammp_name, test_vehicle)
            
            if not result:
                cursor.execute('''
                    UPDATE driving_exams
                    SET status = 'failed', end_time = ?
                    WHERE id = ?
                ''', (datetime.now().isoformat(), exam_id))
                conn.commit()
                
                return await inter.edit_original_response(
                    embed=disnake.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É—á–µ–Ω–∏–∫—É {—É—á–µ–Ω–∏–∫.mention}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞.",
                        color=disnake.Color.red()
                    )
                )
        except Exception as e:
            cursor.execute('''
                UPDATE driving_exams
                SET status = 'failed', end_time = ?
                WHERE id = ?
            ''', (datetime.now().isoformat(), exam_id))
            conn.commit()
            
            return await inter.edit_original_response(
                embed=disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {str(e)}",
                    color=disnake.Color.red()
                )
            )
        
        success_embed = disnake.Embed(
            title="üöó –≠–∫–∑–∞–º–µ–Ω –Ω–∞—á–∞—Ç",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–∑–∞–º–µ–Ω–µ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üë§ **–£—á–µ–Ω–∏–∫:** {—É—á–µ–Ω–∏–∫.mention}\n"
                f"üî∞ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤:** {–∫–∞—Ç–µ–≥–æ—Ä–∏—è}\n"
                f"üöò **–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å:** {test_vehicle}\n"
                f"üë®‚Äçüè´ **–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:** {inter.author.mention}\n"
                f"üî¢ **ID —ç–∫–∑–∞–º–µ–Ω–∞:** {exam_id}\n\n"
                f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                f"`/–∞–≤—Ç–æ—à–∫–æ–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å_—ç–∫–∑–∞–º–µ–Ω {exam_id} [—Ä–µ–∑—É–ª—å—Ç–∞—Ç]`\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green()
        )
        
        await inter.edit_original_response(embed=success_embed)
        
        try:
            student_embed = disnake.Embed(
                title="üöó –≠–∫–∑–∞–º–µ–Ω –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é –Ω–∞—á–∞—Ç",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üî∞ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤:** {–∫–∞—Ç–µ–≥–æ—Ä–∏—è}\n"
                    f"üöò **–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å:** {test_vehicle}\n"
                    f"üë®‚Äçüè´ **–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:** {inter.author.display_name}\n\n"
                    f"–í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é. –°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞.\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.blue()
            )
            await —É—á–µ–Ω–∏–∫.send(embed=student_embed)
        except:
            pass
        

        log_channel = bot.get_channel(1351455653197123665)  
        if log_channel:
            log_embed = disnake.Embed(
                title="üöó –ù–∞—á–∞—Ç —ç–∫–∑–∞–º–µ–Ω –≤ –∞–≤—Ç–æ—à–∫–æ–ª–µ",
                description=(
                    f"üë§ **–£—á–µ–Ω–∏–∫:** {—É—á–µ–Ω–∏–∫.mention}\n"
                    f"üî∞ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤:** {–∫–∞—Ç–µ–≥–æ—Ä–∏—è}\n"
                    f"üë®‚Äçüè´ **–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:** {inter.author.mention}\n"
                    f"‚è∞ **–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                ),
                color=disnake.Color.blue()
            )
            await log_channel.send(embed=log_embed)
        
    except Exception as e:
        await inter.edit_original_response(
            embed=disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞: {str(e)}",
                color=disnake.Color.red()
            )
        )

@driving_school.sub_command(
    name="–∑–∞–≤–µ—Ä—à–∏—Ç—å_—ç–∫–∑–∞–º–µ–Ω",
    description="–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é –∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
)
@commands.has_any_role("–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B","–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ C","–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ D", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
async def finish_exam(
    inter: disnake.ApplicationCommandInteraction,
    —ç–∫–∑–∞–º–µ–Ω_id: int = commands.Param(description="ID —ç–∫–∑–∞–º–µ–Ω–∞"),
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç: str = commands.Param(
        description="–†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫–∑–∞–º–µ–Ω–∞", 
        choices=["—Å–¥–∞–ª", "–Ω–µ —Å–¥–∞–ª"]
    )
):
    """Finish a driving exam and set the result"""
    try:
        await inter.response.defer(ephemeral=True)
        

        cursor.execute('''
            SELECT student_id, instructor_id, category, status
            FROM driving_exams
            WHERE id = ?
        ''', (—ç–∫–∑–∞–º–µ–Ω_id,))
        
        exam_data = cursor.fetchone()
        
        if not exam_data:
            return await inter.edit_original_response(
                embed=disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description=f"–≠–∫–∑–∞–º–µ–Ω —Å ID {—ç–∫–∑–∞–º–µ–Ω_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    color=disnake.Color.red()
                )
            )
        
        student_id, instructor_id, category, status = exam_data
        

        if status != "in_progress":
            return await inter.edit_original_response(
                embed=disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description=f"–≠–∫–∑–∞–º–µ–Ω —Å ID {—ç–∫–∑–∞–º–µ–Ω_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω",
                    color=disnake.Color.red()
                )
            )
        

        if instructor_id != inter.author.id and not any(role.name == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" for role in inter.author.roles):
            return await inter.edit_original_response(
                embed=disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∞–ª –¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä",
                    color=disnake.Color.red()
                )
            )
        
        # Get student
        try:
            student = await bot.fetch_user(student_id)
            student_member = await inter.guild.fetch_member(student_id)
            student_display_name = student_member.display_name
        except:
            return await inter.edit_original_response(
                embed=disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–µ–Ω–∏–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —ç—Ç–∏–º —ç–∫–∑–∞–º–µ–Ω–æ–º",
                    color=disnake.Color.red()
                )
            )
        

        test_vehicle = "Lada2110"  #
        try:

            beammp_name = student_display_name.split('[')[1].split(']')[0]
            remove_car_from_player(beammp_name, test_vehicle)
        except Exception as e:

            print(f"Error removing test vehicle: {e}")
        

        new_status = "passed" if —Ä–µ–∑—É–ª—å—Ç–∞—Ç == "—Å–¥–∞–ª" else "failed"
        cursor.execute('''
            UPDATE driving_exams
            SET status = ?, result = ?, end_time = ?
            WHERE id = ?
        ''', (new_status, —Ä–µ–∑—É–ª—å—Ç–∞—Ç, datetime.now().isoformat(), —ç–∫–∑–∞–º–µ–Ω_id))
        

        if —Ä–µ–∑—É–ª—å—Ç–∞—Ç == "—Å–¥–∞–ª":

            cursor.execute('''
                SELECT category, status FROM licenses
                WHERE user_id = ? AND category = ?
            ''', (str(student_id), category))
            
            existing_license = cursor.fetchone()
            
            if existing_license:
                cursor.execute('''
                    UPDATE licenses
                    SET issue_date = ?, status = "active"
                    WHERE user_id = ? AND category = ?
                ''', (datetime.now().isoformat(), str(student_id), category))
            else:
                cursor.execute('''
                    INSERT INTO licenses
                    (user_id, category, issue_date, status)
                    VALUES (?, ?, ?, "active")
                ''', (str(student_id), category, datetime.now().isoformat()))
        
        conn.commit()
        

        result_embed = disnake.Embed(
            title=f"{'‚úÖ –≠–∫–∑–∞–º–µ–Ω —Å–¥–∞–Ω' if —Ä–µ–∑—É–ª—å—Ç–∞—Ç == '—Å–¥–∞–ª' else '‚ùå –≠–∫–∑–∞–º–µ–Ω –Ω–µ —Å–¥–∞–Ω'}",
            description=(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–∞ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üë§ **–£—á–µ–Ω–∏–∫:** {student.mention}\n"
                f"üî∞ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤:** {category}\n"
                f"üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.upper()}\n"
                f"üë®‚Äçüè´ **–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:** {inter.author.mention}\n"
                f"‚è∞ **–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"{'üéâ –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ' + category + ' –≤—ã–¥–∞–Ω–æ!' if —Ä–µ–∑—É–ª—å—Ç–∞—Ç == '—Å–¥–∞–ª' else 'üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω –µ—â–µ —Ä–∞–∑.'}\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            color=disnake.Color.green() if —Ä–µ–∑—É–ª—å—Ç–∞—Ç == '—Å–¥–∞–ª' else disnake.Color.red()
        )
        

        await inter.channel.send(
            content=student.mention,
            embed=result_embed
        )

        await inter.edit_original_response(
            embed=disnake.Embed(
                title="‚úÖ –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω",
                description=f"–≠–∫–∑–∞–º–µ–Ω –¥–ª—è {student.mention} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç}",
                color=disnake.Color.green()
            )
        )
        
        try:
            student_embed = disnake.Embed(
                title=f"{'‚úÖ –í—ã —Å–¥–∞–ª–∏ —ç–∫–∑–∞–º–µ–Ω!' if —Ä–µ–∑—É–ª—å—Ç–∞—Ç == '—Å–¥–∞–ª' else '‚ùå –≠–∫–∑–∞–º–µ–Ω –Ω–µ —Å–¥–∞–Ω'}",
                description=(
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–∞ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üî∞ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤:** {category}\n"
                    f"üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.upper()}\n"
                    f"üë®‚Äçüè´ **–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:** {inter.author.display_name}\n\n"
                    f"{'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–¥–∞–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ' + category + '.' if —Ä–µ–∑—É–ª—å—Ç–∞—Ç == '—Å–¥–∞–ª' else 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–¥–∞–ª–∏ —ç–∫–∑–∞–º–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.'}\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                color=disnake.Color.green() if —Ä–µ–∑—É–ª—å—Ç–∞—Ç == '—Å–¥–∞–ª' else disnake.Color.red()
            )
            await student.send(embed=student_embed)
        except:
            pass
        
        log_channel = bot.get_channel(1351455653197123665) 
        if log_channel:
            log_embed = disnake.Embed(
                title=f"üöó –ó–∞–≤–µ—Ä—à–µ–Ω —ç–∫–∑–∞–º–µ–Ω –≤ –∞–≤—Ç–æ—à–∫–æ–ª–µ",
                description=(
                    f"üë§ **–£—á–µ–Ω–∏–∫:** {student.mention}\n"
                    f"üî∞ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤:** {category}\n"
                    f"üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.upper()}\n"
                    f"üë®‚Äçüè´ **–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:** {inter.author.mention}\n"
                    f"‚è∞ **–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                ),
                color=disnake.Color.green() if —Ä–µ–∑—É–ª—å—Ç–∞—Ç == '—Å–¥–∞–ª' else disnake.Color.red()
            )
            await log_channel.send(embed=log_embed)
        
    except Exception as e:
        await inter.edit_original_response(
            embed=disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç–∫–∑–∞–º–µ–Ω–∞: {str(e)}",
                color=disnake.Color.red()
            )
        )







bot.run(discord_token)